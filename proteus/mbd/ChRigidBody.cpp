/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__mbd__ChRigidBody
#define __PYX_HAVE_API__mbd__ChRigidBody
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <memory>
#include "ChMoorings.h"
#include "ChBodyAddedMass.h"
#include "ChRigidBody.h"
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "proteus/mbd/ChRigidBody.pyx",
  "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd",
  "stringsource",
  "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/cpython/type.pxd",
  "proteus/mbd/pyChronoCore.pxd",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif


/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChVector;
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChQuaternion;
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys;
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame;
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving;
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyFrame;
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody;
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox;
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC;
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud;
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass;
struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody;
struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem;
struct __pyx_obj_3mbd_11ChRigidBody_Mesh;
struct __pyx_obj_3mbd_11ChRigidBody_SurfaceBoxNodesCloud;
struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings;
struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass;
struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__;
struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_3mbd_11ChRigidBody_linkBodies;

/* "mbd/ChRigidBody.pyx":2984
 * 
 * 
 * cpdef linkBodies(ProtChBody body1,             # <<<<<<<<<<<<<<
 *                  ProtChBody body2,
 *                  ProtChSystem system,
 */
struct __pyx_opt_args_3mbd_11ChRigidBody_linkBodies {
  int __pyx_n;
  double limit_X;
  double limit_Y;
  double limit_Z;
  double limit_Rx;
  double limit_Ry;
  double limit_Rz;
};

/* "pyChronoCore.pxd":10
 * cimport ChronoHeaders as ch
 * 
 * cdef class ChVector:             # <<<<<<<<<<<<<<
 *     cdef ch.ChVector cppobj
 *     cpdef double x(self)
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChVector *__pyx_vtab;
  ChVector<double>  cppobj;
};


/* "pyChronoCore.pxd":16
 *     cpdef double z(self)
 * 
 * cdef class ChQuaternion:             # <<<<<<<<<<<<<<
 *     cdef ch.ChQuaternion cppobj
 *     cpdef double e0(self)
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChQuaternion {
  PyObject_HEAD
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChQuaternion *__pyx_vtab;
  ChQuaternion<double>  cppobj;
};


/* "pyChronoCore.pxd":23
 *     cpdef double e3(self)
 * 
 * cdef class ChCoordsys:             # <<<<<<<<<<<<<<
 *     cdef ch.ChCoordsys cppobj
 *     cpdef np.ndarray getPos(self)
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys {
  PyObject_HEAD
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChCoordsys *__pyx_vtab;
  ChCoordsys<double>  cppobj;
};


/* "pyChronoCore.pxd":28
 *     cpdef np.ndarray getRot(self)
 * 
 * cdef class ChFrame:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChFrame] sharedptr_chframe
 *     cpdef np.ndarray GetPos(self)
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame {
  PyObject_HEAD
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChFrame *__pyx_vtab;
  std::shared_ptr<ChFrame<double> >  sharedptr_chframe;
};


/* "pyChronoCore.pxd":38
 *     cpdef double GetRotAngle(self)
 * 
 * cdef class ChFrameMoving(ChFrame):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChFrameMoving] sharedptr_chframemoving
 *     cpdef np.ndarray GetPos_dt(self)
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving {
  struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame __pyx_base;
  std::shared_ptr<ChFrameMoving<double> >  sharedptr_chframemoving;
};


/* "pyChronoCore.pxd":47
 *     cpdef np.ndarray GetWacc_loc(self)
 * 
 * cdef class ChBodyFrame(ChFrameMoving):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChBodyFrame] sharedptr_chbodyframe
 * 
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyFrame {
  struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving __pyx_base;
  std::shared_ptr<ChBodyFrame>  sharedptr_chbodyframe;
};


/* "pyChronoCore.pxd":50
 *     cdef shared_ptr[ch.ChBodyFrame] sharedptr_chbodyframe
 * 
 * cdef class ChBody(ChBodyFrame):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChBody] sharedptr_chbody
 *     cpdef void SetBodyFixed(self, bool state)
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody {
  struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyFrame __pyx_base;
  std::shared_ptr<ChBody>  sharedptr_chbody;
};


/* "pyChronoCore.pxd":60
 *     cpdef double GetMass(self)
 * 
 * cdef class ChBodyEasyBox(ChBody):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChBodyEasyBox] sharedptr_chbodyeasybox
 * 
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox {
  struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody __pyx_base;
  std::shared_ptr<ChBodyEasyBox>  sharedptr_chbodyeasybox;
};


/* "pyChronoCore.pxd":63
 *     cdef shared_ptr[ch.ChBodyEasyBox] sharedptr_chbodyeasybox
 * 
 * cdef class ChMaterialSurfaceSMC:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChMaterialSurfaceSMC] sharedptr
 *     cpdef void SetYoungModulus(self, float val)
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC {
  PyObject_HEAD
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *__pyx_vtab;
  std::shared_ptr<ChMaterialSurfaceSMC>  sharedptr;
};


/* "pyChronoCore.pxd":90
 * 
 * 
 * cdef class ChContactSurfaceNodeCloud:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChContactSurfaceNodeCloud] sharedptr
 *     cpdef void AddAllNodes(self, double point_radius)
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud {
  PyObject_HEAD
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud *__pyx_vtab;
  std::shared_ptr<ChContactSurfaceNodeCloud>  sharedptr;
};


/* "pyChronoCore.pxd":109
 * #         deref(self.sharedptr).Initialize(<shared_ptr[ch.ChNodeFEAxyz]> anodeA, <shared_ptr[ch.ChNodeFEAxyz]> anodeB)
 * 
 * cdef class ChBodyAddedMass(ChBody):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChBodyAddedMass] sharedptr_chbodyaddedmass
 *     cdef void SetMfullmass(self, ch.ChMatrixDynamic Mfullmass_in)
 */
struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass {
  struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody __pyx_base;
  std::shared_ptr<ChBodyAddedMass>  sharedptr_chbodyaddedmass;
};


/* "mbd/ChRigidBody.pyx":203
 *                           double limit_Rz)
 * 
 * cdef class ProtChBody:             # <<<<<<<<<<<<<<
 *     cdef cppRigidBody * thisptr
 *     cdef ch.ChQuaternion rotation
 */
struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody {
  PyObject_HEAD
  struct __pyx_vtabstruct_3mbd_11ChRigidBody_ProtChBody *__pyx_vtab;
  cppRigidBody *thisptr;
  ChQuaternion<double>  rotation;
  ChQuaternion<double>  rotation_last;
  PyObject *record_file;
  PyObject *model;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *ProtChSystem;
  PyObject *Shape;
  int nd;
  int i_start;
  int i_end;
  double dt;
  double width_2D;
  PyObject *record_dict;
  PyObject *prescribed_motion_function;
  struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *ChBody;
  PyArrayObject *position;
  PyArrayObject *position_last;
  PyArrayObject *F;
  PyArrayObject *M;
  PyArrayObject *F_last;
  PyArrayObject *M_last;
  PyArrayObject *F_prot;
  PyArrayObject *M_prot;
  PyArrayObject *F_prot_last;
  PyArrayObject *M_prot_last;
  PyArrayObject *F_applied;
  PyArrayObject *M_applied;
  PyArrayObject *F_applied_last;
  PyArrayObject *M_applied_last;
  PyArrayObject *F_Aij;
  PyArrayObject *M_Aij;
  PyArrayObject *F_Aij_last;
  PyArrayObject *M_Aij_last;
  PyArrayObject *acceleration;
  PyArrayObject *acceleration_last;
  PyArrayObject *velocity;
  PyArrayObject *velocity_last;
  PyArrayObject *ang_acceleration_last;
  PyArrayObject *ang_acceleration;
  PyArrayObject *ang_velocity_last;
  PyArrayObject *ang_velocity;
  double ang_vel_norm;
  double ang_vel_norm_last;
  PyArrayObject *barycenter0;
  PyArrayObject *rotation_init;
  PyArrayObject *rotm;
  PyArrayObject *rotm_last;
  PyArrayObject *rotq;
  PyArrayObject *rotq_last;
  PyArrayObject *adams_vel;
  std::string name;
  bool predicted;
  double dt_predict;
  PyArrayObject *h_predict;
  double h_ang_predict;
  PyArrayObject *h_ang_vel_predict;
  PyArrayObject *h_predict_last;
  double h_ang_predict_last;
  PyArrayObject *h_ang_vel_predict_last;
  PyArrayObject *Aij;
  bool applyAddedMass;
};


/* "mbd/ChRigidBody.pyx":1372
 * 
 * 
 * cdef class ProtChSystem:             # <<<<<<<<<<<<<<
 *     cdef cppSystem * thisptr
 *     cdef public object model
 */
struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem {
  PyObject_HEAD
  cppSystem *thisptr;
  PyObject *model;
  double dt_init;
  double proteus_dt;
  double proteus_dt_last;
  double proteus_dt_next;
  std::string directory;
  PyObject *u;
  int nd;
  PyObject *femSpace_velocity;
  PyObject *femSpace_pressure;
  PyObject *nodes_kdtree;
  int min_nb_steps;
  double dt_fluid;
  double dt_fluid_last;
  double dt_fluid_next;
  double dt;
  double dt_last;
  double t;
  PyObject *subcomponents;
  double chrono_dt;
  bool build_kdtree;
  bool dist_search;
  bool parallel_mode;
  int chrono_processor;
  bool first_step;
  std::string scheme;
  std::string prediction;
  int step_nb;
  int step_start;
  double sampleRate;
  double next_sample;
  bool record_values;
  PyObject *model_mesh;
  PyObject *model_addedmass;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *ProtChAddedMass;
  int tCount;
};


/* "mbd/ChRigidBody.pyx":1901
 * 
 * 
 * cdef class Mesh:             # <<<<<<<<<<<<<<
 *     cdef cppMesh * thisptr
 *     def __cinit__(self, ProtChSystem system):
 */
struct __pyx_obj_3mbd_11ChRigidBody_Mesh {
  PyObject_HEAD
  cppMesh *thisptr;
};


/* "mbd/ChRigidBody.pyx":1909
 *         self.thisptr.SetAutomaticGravity(val)
 * 
 * cdef class SurfaceBoxNodesCloud:             # <<<<<<<<<<<<<<
 *     cdef cppSurfaceBoxNodesCloud * thisptr
 *     def __cinit__(self, ProtChSystem system, Mesh mesh, np.ndarray position, np.ndarray dimensions):
 */
struct __pyx_obj_3mbd_11ChRigidBody_SurfaceBoxNodesCloud {
  PyObject_HEAD
  cppSurfaceBoxNodesCloud *thisptr;
};


/* "mbd/ChRigidBody.pyx":1942
 * 
 * 
 * cdef class ProtChMoorings:             # <<<<<<<<<<<<<<
 *     """Class for building mooring cables
 * 
 */
struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings {
  PyObject_HEAD
  cppMultiSegmentedCable *thisptr;
  PyObject *record_file;
  PyObject *model;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *ProtChSystem;
  PyObject *Mesh;
  int nd;
  PyObject *nodes_function;
  PyObject *nodes_function_tangent;
  PyObject *fluid_velocity_function;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *body_front;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *body_back;
  bool front_body;
  bool back_body;
  bool nodes_built;
  bool external_forces_from_ns;
  bool external_forces_manual;
  PyArrayObject *fluid_density_array;
  PyArrayObject *fluid_velocity_array;
  PyArrayObject *fluid_velocity_array_previous;
  PyArrayObject *fluid_acceleration_array;
  std::string name;
  std::string beam_type;
  int nodes_nb;
  PyArrayObject *nb_elems;
  __Pyx_memviewslice _record_etas;
  bool initialized;
  __Pyx_memviewslice nearest_node_array;
  __Pyx_memviewslice containing_element_array;
  __Pyx_memviewslice owning_rank;
  std::string hdfFileName;
};


/* "mbd/ChRigidBody.pyx":2945
 * 
 * 
 * cdef class ProtChAddedMass:             # <<<<<<<<<<<<<<
 *     """
 *     Class (hack) to attach added mass model to ProtChSystem
 */
struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass {
  PyObject_HEAD
  PyObject *model;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *ProtChSystem;
};


/* "mbd/ChRigidBody.pyx":2000
 *       int[:] owning_rank
 *       string hdfFileName
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   ProtChSystem system,
 *                   Mesh mesh,
 */
struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ {
  PyObject_HEAD
  PyObject *__pyx_v_check_arrays;
  __Pyx_memviewslice __pyx_v_length;
};


/* "mbd/ChRigidBody.pyx":2010
 *                   string beam_type="CableANCF"):
 *         check_arrays = [len(length), len(nb_elems), len(d), len(rho), len(E)]
 *         assert all(v == len(length) for v in check_arrays), 'arrays are not of same length'             # <<<<<<<<<<<<<<
 *         self.ProtChSystem = system
 *         self.ProtChSystem.addSubcomponent(self)
 */
struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "View.MemoryView":103
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":275
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":326
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":951
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "pyChronoCore.pxd":10
 * cimport ChronoHeaders as ch
 * 
 * cdef class ChVector:             # <<<<<<<<<<<<<<
 *     cdef ch.ChVector cppobj
 *     cpdef double x(self)
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChVector {
  double (*x)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChVector *, int __pyx_skip_dispatch);
  double (*y)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChVector *, int __pyx_skip_dispatch);
  double (*z)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChVector *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChVector *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChVector;


/* "pyChronoCore.pxd":16
 *     cpdef double z(self)
 * 
 * cdef class ChQuaternion:             # <<<<<<<<<<<<<<
 *     cdef ch.ChQuaternion cppobj
 *     cpdef double e0(self)
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChQuaternion {
  double (*e0)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChQuaternion *, int __pyx_skip_dispatch);
  double (*e1)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChQuaternion *, int __pyx_skip_dispatch);
  double (*e2)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChQuaternion *, int __pyx_skip_dispatch);
  double (*e3)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChQuaternion *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChQuaternion *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChQuaternion;


/* "pyChronoCore.pxd":23
 *     cpdef double e3(self)
 * 
 * cdef class ChCoordsys:             # <<<<<<<<<<<<<<
 *     cdef ch.ChCoordsys cppobj
 *     cpdef np.ndarray getPos(self)
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChCoordsys {
  PyArrayObject *(*getPos)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys *, int __pyx_skip_dispatch);
  PyArrayObject *(*getRot)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChCoordsys *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChCoordsys;


/* "pyChronoCore.pxd":28
 *     cpdef np.ndarray getRot(self)
 * 
 * cdef class ChFrame:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChFrame] sharedptr_chframe
 *     cpdef np.ndarray GetPos(self)
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChFrame {
  PyArrayObject *(*GetPos)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *, int __pyx_skip_dispatch);
  PyArrayObject *(*GetRot)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *, int __pyx_skip_dispatch);
  void (*SetRot)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChQuaternion *, int __pyx_skip_dispatch);
  void (*SetPos)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChVector *, int __pyx_skip_dispatch);
  PyArrayObject *(*GetA)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *, int __pyx_skip_dispatch);
  PyArrayObject *(*GetRotAxis)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *, int __pyx_skip_dispatch);
  double (*GetRotAngle)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChFrame *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChFrame;


/* "pyChronoCore.pxd":38
 *     cpdef double GetRotAngle(self)
 * 
 * cdef class ChFrameMoving(ChFrame):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChFrameMoving] sharedptr_chframemoving
 *     cpdef np.ndarray GetPos_dt(self)
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChFrameMoving {
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChFrame __pyx_base;
  PyArrayObject *(*GetPos_dt)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving *, int __pyx_skip_dispatch);
  PyArrayObject *(*GetPos_dtdt)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving *, int __pyx_skip_dispatch);
  PyArrayObject *(*GetRot_dt)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving *, int __pyx_skip_dispatch);
  PyArrayObject *(*GetRot_dtdt)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving *, int __pyx_skip_dispatch);
  PyArrayObject *(*GetWvel_loc)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving *, int __pyx_skip_dispatch);
  PyArrayObject *(*GetWacc_loc)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChFrameMoving *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChFrameMoving;


/* "pyChronoCore.pxd":47
 *     cpdef np.ndarray GetWacc_loc(self)
 * 
 * cdef class ChBodyFrame(ChFrameMoving):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChBodyFrame] sharedptr_chbodyframe
 * 
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyFrame {
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChFrameMoving __pyx_base;
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyFrame *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBodyFrame;


/* "pyChronoCore.pxd":50
 *     cdef shared_ptr[ch.ChBodyFrame] sharedptr_chbodyframe
 * 
 * cdef class ChBody(ChBodyFrame):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChBody] sharedptr_chbody
 *     cpdef void SetBodyFixed(self, bool state)
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBody {
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyFrame __pyx_base;
  void (*SetBodyFixed)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody *, bool, int __pyx_skip_dispatch);
  void (*SetMaterialSurface)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody *, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  void (*SetInertiaXX)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody *, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChVector *, int __pyx_skip_dispatch);
  void (*SetInertiaXY)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody *, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChVector *, int __pyx_skip_dispatch);
  void (*SetMass)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody *, double, int __pyx_skip_dispatch);
  PyArrayObject *(*GetInertia)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody *, int __pyx_skip_dispatch);
  double (*GetMass)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBody *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBody;


/* "pyChronoCore.pxd":60
 *     cpdef double GetMass(self)
 * 
 * cdef class ChBodyEasyBox(ChBody):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChBodyEasyBox] sharedptr_chbodyeasybox
 * 
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox {
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBody __pyx_base;
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox;


/* "pyChronoCore.pxd":63
 *     cdef shared_ptr[ch.ChBodyEasyBox] sharedptr_chbodyeasybox
 * 
 * cdef class ChMaterialSurfaceSMC:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChMaterialSurfaceSMC] sharedptr
 *     cpdef void SetYoungModulus(self, float val)
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC {
  void (*SetYoungModulus)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetPoissonRatio)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetSfriction)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetKfriction)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetFriction)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetRestitution)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetAdhesion)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetAdhesionMultDMT)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetKn)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetKt)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetGn)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  void (*SetGt)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, float, int __pyx_skip_dispatch);
  double (*GetYoungModulus)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  double (*GetPoissonRatio)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  double (*GetSfriction)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  double (*GetKfriction)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  double (*GetRestitution)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  double (*GetAdhesion)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  double (*GetAdhesionMultDMT)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  double (*GetKn)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  double (*GetKt)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  double (*GetGn)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
  double (*GetGt)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC;


/* "pyChronoCore.pxd":90
 * 
 * 
 * cdef class ChContactSurfaceNodeCloud:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChContactSurfaceNodeCloud] sharedptr
 *     cpdef void AddAllNodes(self, double point_radius)
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud {
  void (*AddAllNodes)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud;


/* "pyChronoCore.pxd":109
 * #         deref(self.sharedptr).Initialize(<shared_ptr[ch.ChNodeFEAxyz]> anodeA, <shared_ptr[ch.ChNodeFEAxyz]> anodeB)
 * 
 * cdef class ChBodyAddedMass(ChBody):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ch.ChBodyAddedMass] sharedptr_chbodyaddedmass
 *     cdef void SetMfullmass(self, ch.ChMatrixDynamic Mfullmass_in)
 */

struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass {
  struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBody __pyx_base;
  void (*SetMfullmass)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *, ChMatrixDynamic<double> );
  void (*SetInvMfullmass)(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *, ChMatrixDynamic<double> );
};
static struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass;


/* "mbd/ChRigidBody.pyx":203
 *                           double limit_Rz)
 * 
 * cdef class ProtChBody:             # <<<<<<<<<<<<<<
 *     cdef cppRigidBody * thisptr
 *     cdef ch.ChQuaternion rotation
 */

struct __pyx_vtabstruct_3mbd_11ChRigidBody_ProtChBody {
  PyArrayObject *(*callPrescribedMotion)(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *, double);
};
static struct __pyx_vtabstruct_3mbd_11ChRigidBody_ProtChBody *__pyx_vtabptr_3mbd_11ChRigidBody_ProtChBody;


/* "View.MemoryView":103
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":326
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":951
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* BufferFormatCheck.proto */
static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type); // PROTO

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_DivideObjC(op1, op2, floatval, inplace)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* None.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* None.proto */
static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs,
                                        char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(PyObject *);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_int(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_int(const char *itemp, PyObject *obj);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyArrayObject *__pyx_f_3mbd_11ChRigidBody_10ProtChBody_callPrescribedMotion(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, double __pyx_v_t); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'mbd.ChronoHeaders' */

/* Module declarations from 'proteus.mbd' */

/* Module declarations from 'proteus.mbd.ChronoHeaders' */

/* Module declarations from 'proteus.mbd.pyChronoCore' */
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChVector = 0;
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChQuaternion = 0;
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChCoordsys = 0;
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChFrame = 0;
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChFrameMoving = 0;
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyFrame = 0;
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBody = 0;
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox = 0;
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC = 0;
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud = 0;
static PyTypeObject *__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass = 0;
static PyArrayObject *(*__pyx_f_7proteus_3mbd_12pyChronoCore_ChVector_to_npArray)(ChVector<double>  &); /*proto*/

/* Module declarations from 'mbd.ChRigidBody' */
static PyTypeObject *__pyx_ptype_3mbd_11ChRigidBody_ProtChBody = 0;
static PyTypeObject *__pyx_ptype_3mbd_11ChRigidBody_ProtChSystem = 0;
static PyTypeObject *__pyx_ptype_3mbd_11ChRigidBody_Mesh = 0;
static PyTypeObject *__pyx_ptype_3mbd_11ChRigidBody_SurfaceBoxNodesCloud = 0;
static PyTypeObject *__pyx_ptype_3mbd_11ChRigidBody_ProtChMoorings = 0;
static PyTypeObject *__pyx_ptype_3mbd_11ChRigidBody_ProtChAddedMass = 0;
static PyTypeObject *__pyx_ptype_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ = 0;
static PyTypeObject *__pyx_ptype_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static PyObject *__pyx_f_3mbd_11ChRigidBody_pyxGetLocalNearestNode(__Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, int, int); /*proto*/
static void __pyx_f_3mbd_11ChRigidBody_attachNodeToNode(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *, int, struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_3mbd_11ChRigidBody_linkBodies(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *, struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys *, int __pyx_skip_dispatch, struct __pyx_opt_args_3mbd_11ChRigidBody_linkBodies *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
#define __Pyx_MODULE_NAME "mbd.ChRigidBody"
int __pyx_module_is_main_mbd__ChRigidBody = 0;

/* Implementation of 'mbd.ChRigidBody' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_8[] = "8";
static const char __pyx_k_A[] = "A";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_i[] = "%i";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_ET[] = "ET";
static const char __pyx_k_Fx[] = "Fx";
static const char __pyx_k_Fy[] = "Fy";
static const char __pyx_k_Fz[] = "Fz";
static const char __pyx_k_Mx[] = "Mx";
static const char __pyx_k_My[] = "My";
static const char __pyx_k_Mz[] = "Mz";
static const char __pyx_k_ar[] = "ar";
static const char __pyx_k_ax[] = "ax";
static const char __pyx_k_ay[] = "ay";
static const char __pyx_k_az[] = "az";
static const char __pyx_k_bd[] = "bd";
static const char __pyx_k_eN[] = "eN";
static const char __pyx_k_h5[] = ".h5";
static const char __pyx_k_hx[] = "hx";
static const char __pyx_k_hy[] = "hy";
static const char __pyx_k_hz[] = "hz";
static const char __pyx_k_i8[] = "i8";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_nd[] = "nd";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_op[] = "op";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_st[] = "st";
static const char __pyx_k_sx[] = "sx";
static const char __pyx_k_sy[] = "sy";
static const char __pyx_k_sz[] = "sz";
static const char __pyx_k_ux[] = "ux";
static const char __pyx_k_uy[] = "uy";
static const char __pyx_k_uz[] = "uz";
static const char __pyx_k_xi[] = "xi";
static const char __pyx_k_2_0[] = "2.0";
static const char __pyx_k_Aij[] = "Aij";
static const char __pyx_k_CSS[] = "CSS";
static const char __pyx_k_HDF[] = "HDF";
static const char __pyx_k_HHT[] = "HHT";
static const char __pyx_k_Int[] = "Int";
static const char __pyx_k_Iyy[] = "Iyy";
static const char __pyx_k_MPI[] = "MPI";
static const char __pyx_k_Tb0[] = "Tb0";
static const char __pyx_k_Tb1[] = "Tb1";
static const char __pyx_k_Tb2[] = "Tb2";
static const char __pyx_k_Tf0[] = "Tf0";
static const char __pyx_k_Tf1[] = "Tf1";
static const char __pyx_k_Tf2[] = "Tf2";
static const char __pyx_k_XYZ[] = "XYZ";
static const char __pyx_k__23[] = "$$$$$$$$$$$$$$$$$$";
static const char __pyx_k__78[] = ",";
static const char __pyx_k__85[] = "(";
static const char __pyx_k__90[] = "/";
static const char __pyx_k_acc[] = "acc";
static const char __pyx_k_amx[] = "amx";
static const char __pyx_k_amy[] = "amy";
static const char __pyx_k_amz[] = "amz";
static const char __pyx_k_ang[] = "ang";
static const char __pyx_k_csv[] = ".csv";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_eta[] = "eta";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_i_2[] = "i";
static const char __pyx_k_i_i[] = "%i %i";
static const char __pyx_k_inv[] = "inv";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_rho[] = "rho";
static const char __pyx_k_rot[] = "rot";
static const char __pyx_k_row[] = "row";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_t_2[] = "_t";
static const char __pyx_k_vel[] = "vel";
static const char __pyx_k_x_2[] = "x: ";
static const char __pyx_k_xmf[] = ".xmf";
static const char __pyx_k_Comm[] = "Comm";
static const char __pyx_k_File[] = "File";
static const char __pyx_k_Grid[] = "Grid";
static const char __pyx_k_Mesh[] = "Mesh";
static const char __pyx_k_Name[] = "Name";
static const char __pyx_k_Node[] = "Node";
static const char __pyx_k_Time[] = "Time";
static const char __pyx_k_Type[] = "Type";
static const char __pyx_k_Xdmf[] = "Xdmf";
static const char __pyx_k__172[] = "*";
static const char __pyx_k_am_t[] = "am_t";
static const char __pyx_k_ang2[] = "ang2";
static const char __pyx_k_ang3[] = "ang3";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_ax_t[] = "ax_t";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_ay_t[] = "ay_t";
static const char __pyx_k_az_t[] = "az_t";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_comm[] = "comm";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_h5_2[] = ".h5:/";
static const char __pyx_k_h5py[] = "h5py";
static const char __pyx_k_hxyz[] = "hxyz";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mesh[] = "mesh";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_rank[] = "rank";
static const char __pyx_k_rotq[] = "rotq";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_sx_t[] = "sx_t";
static const char __pyx_k_sy_t[] = "sy_t";
static const char __pyx_k_sz_t[] = "sz_t";
static const char __pyx_k_t_ch[] = "t_ch";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_ux_t[] = "ux_t";
static const char __pyx_k_uy_t[] = "uy_t";
static const char __pyx_k_uz_t[] = "uz_t";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_Euler[] = "Euler";
static const char __pyx_k_F_Aij[] = "F_Aij";
static const char __pyx_k_Float[] = "Float";
static const char __pyx_k_Shape[] = "Shape ";
static const char __pyx_k_Value[] = "Value";
static const char __pyx_k_amx_t[] = "amx_t";
static const char __pyx_k_amy_t[] = "amy_t";
static const char __pyx_k_amz_t[] = "amz_t";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_bcast[] = "bcast";
static const char __pyx_k_body1[] = "body1";
static const char __pyx_k_body2[] = "body2";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_csv_2[] = "csv";
static const char __pyx_k_debug[] = "debug";
static const char __pyx_k_dragx[] = "dragx";
static const char __pyx_k_dragy[] = "dragy";
static const char __pyx_k_dragz[] = "dragz";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_i_end[] = "i_end";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_model[] = "model";
static const char __pyx_k_node1[] = "node1";
static const char __pyx_k_node2[] = "node2";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_parse[] = "parse";
static const char __pyx_k_pivot[] = "pivot";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_pris1[] = "pris1";
static const char __pyx_k_pris2[] = "pris2";
static const char __pyx_k_query[] = "query";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scipy[] = "scipy";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_t_csv[] = "_t.csv";
static const char __pyx_k_t_max[] = "t_max";
static const char __pyx_k_t_sim[] = "t_sim";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_u_csv[] = "_u.csv";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_x_old[] = "x_old: ";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_AM_csv[] = "_AM.csv";
static const char __pyx_k_Center[] = "Center";
static const char __pyx_k_Domain[] = "Domain";
static const char __pyx_k_F_prot[] = "F_prot";
static const char __pyx_k_Format[] = "Format";
static const char __pyx_k_Fx_Aij[] = "Fx_Aij";
static const char __pyx_k_Fy_Aij[] = "Fy_Aij";
static const char __pyx_k_Fz_Aij[] = "Fz_Aij";
static const char __pyx_k_MAXLOC[] = "MAXLOC";
static const char __pyx_k_MINLOC[] = "MINLOC";
static const char __pyx_k_M_prot[] = "M_prot";
static const char __pyx_k_Scalar[] = "Scalar";
static const char __pyx_k_anchor[] = "anchor";
static const char __pyx_k_ang_ax[] = "ang_ax";
static const char __pyx_k_ang_ay[] = "ang_ay";
static const char __pyx_k_ang_az[] = "ang_az";
static const char __pyx_k_ang_ux[] = "ang_ux";
static const char __pyx_k_ang_uy[] = "ang_uy";
static const char __pyx_k_ang_uz[] = "ang_uz";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_cable1[] = "cable1";
static const char __pyx_k_cable2[] = "cable2";
static const char __pyx_k_coords[] = "coords";
static const char __pyx_k_drag_t[] = "drag_t";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_exit_2[] = "exit";
static const char __pyx_k_forces[] = "forces";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_free_r[] = "free_r";
static const char __pyx_k_free_x[] = "free_x";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kdtree[] = "kdtree";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_linalg[] = "linalg";
static const char __pyx_k_logDir[] = "logDir";
static const char __pyx_k_margin[] = "margin";
static const char __pyx_k_mpi4py[] = "mpi4py";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_normal[] = "normal";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_record[] = "record_";
static const char __pyx_k_scheme[] = "scheme";
static const char __pyx_k_strain[] = "_strain";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_system[] = "system";
static const char __pyx_k_tolist[] = "tolist";
static const char __pyx_k_tstype[] = "tstype";
static const char __pyx_k_u_grad[] = "u_grad";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_writer[] = "writer";
static const char __pyx_k_x_body[] = "x_body: ";
static const char __pyx_k_Aij_csv[] = "_Aij.csv";
static const char __pyx_k_Element[] = "Element";
static const char __pyx_k_Fx_prot[] = "Fx_prot";
static const char __pyx_k_Fy_prot[] = "Fy_prot";
static const char __pyx_k_Fz_prot[] = "Fz_prot";
static const char __pyx_k_Mx_prot[] = "Mx_prot";
static const char __pyx_k_My_prot[] = "My_prot";
static const char __pyx_k_Mz_prot[] = "Mz_prot";
static const char __pyx_k_Uniform[] = "Uniform";
static const char __pyx_k_Version[] = "Version";
static const char __pyx_k_ang_acc[] = "ang_acc";
static const char __pyx_k_ang_vel[] = "ang_vel";
static const char __pyx_k_barrier[] = "barrier";
static const char __pyx_k_cKDTree[] = "cKDTree";
static const char __pyx_k_csvfile[] = "csvfile";
static const char __pyx_k_damping[] = "damping";
static const char __pyx_k_dragx_t[] = "dragx_t";
static const char __pyx_k_dragy_t[] = "dragy_t";
static const char __pyx_k_dragz_t[] = "dragz_t";
static const char __pyx_k_dt_init[] = "dt_init";
static const char __pyx_k_dt_last[] = "dt_last";
static const char __pyx_k_eOffset[] = "eOffset";
static const char __pyx_k_element[] = "element";
static const char __pyx_k_flatten[] = "flatten";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_getroot[] = "getroot";
static const char __pyx_k_gravity[] = "gravity";
static const char __pyx_k_i_start[] = "i_start";
static const char __pyx_k_inertia[] = "inertia";
static const char __pyx_k_limit_X[] = "limit_X";
static const char __pyx_k_limit_Y[] = "limit_Y";
static const char __pyx_k_limit_Z[] = "limit_Z";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_moments[] = "moments";
static const char __pyx_k_nodes_t[] = "nodes_t";
static const char __pyx_k_pos_csv[] = "_pos.csv";
static const char __pyx_k_prestep[] = "prestep";
static const char __pyx_k_proteus[] = "proteus";
static const char __pyx_k_rotq_e0[] = "rotq_e0";
static const char __pyx_k_rotq_e1[] = "rotq_e1";
static const char __pyx_k_rotq_e2[] = "rotq_e2";
static const char __pyx_k_rotq_e3[] = "rotq_e3";
static const char __pyx_k_setName[] = "setName";
static const char __pyx_k_spatial[] = "spatial";
static const char __pyx_k_udt_csv[] = "_udt.csv";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_with_dt[] = " with dt=";
static const char __pyx_k_Archiver[] = "Archiver";
static const char __pyx_k_DataItem[] = "DataItem";
static const char __pyx_k_DataType[] = "DataType";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_Geometry[] = "Geometry";
static const char __pyx_k_Get_size[] = "Get_size";
static const char __pyx_k_GridType[] = "GridType";
static const char __pyx_k_Polyline[] = "Polyline";
static const char __pyx_k_Temporal[] = "Temporal";
static const char __pyx_k_Topology[] = "Topology";
static const char __pyx_k_ang_disp[] = "ang_disp";
static const char __pyx_k_cable_nb[] = "cable_nb";
static const char __pyx_k_coordsys[] = "coordsys";
static const char __pyx_k_deepcopy[] = "deepcopy";
static const char __pyx_k_distance[] = "distance";
static const char __pyx_k_drag_csv[] = "_drag.csv";
static const char __pyx_k_eN_guess[] = "eN_guess";
static const char __pyx_k_envelope[] = "envelope";
static const char __pyx_k_fairlead[] = "fairlead";
static const char __pyx_k_femSpace[] = "femSpace";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getValue[] = "getValue";
static const char __pyx_k_intertia[] = "intertia";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_limit_Rx[] = "limit_Rx";
static const char __pyx_k_limit_Ry[] = "limit_Ry";
static const char __pyx_k_limit_Rz[] = "limit_Rz";
static const char __pyx_k_logEvent[] = "logEvent";
static const char __pyx_k_nb_elems[] = "nb_elems";
static const char __pyx_k_pos_body[] = "pos_body: ";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_poststep[] = "poststep";
static const char __pyx_k_recordH5[] = "_recordH5";
static const char __pyx_k_record_2[] = "record";
static const char __pyx_k_substeps[] = " substeps)";
static const char __pyx_k_tangents[] = "tangents";
static const char __pyx_k_tens_csv[] = "_tens.csv";
static const char __pyx_k_tompi4py[] = "tompi4py";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_writerow[] = "writerow";
static const char __pyx_k_xmlns_xi[] = "xmlns:xi";
static const char __pyx_k_Attribute[] = "Attribute";
static const char __pyx_k_CableANCF[] = "CableANCF";
static const char __pyx_k_F_applied[] = "F_applied: ";
static const char __pyx_k_M_applied[] = "M_applied";
static const char __pyx_k_Precision[] = "Precision";
static const char __pyx_k_Profiling[] = "Profiling";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_allreduce[] = "allreduce";
static const char __pyx_k_beam_type[] = "beam_type";
static const char __pyx_k_delimiter[] = "delimiter";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_getValues[] = "getValues";
static const char __pyx_k_h_predict[] = "h_predict: ";
static const char __pyx_k_indentXML[] = "indentXML";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_nodeArray[] = "nodeArray";
static const char __pyx_k_onElement[] = "onElement";
static const char __pyx_k_posdt_csv[] = "_posdt.csv";
static const char __pyx_k_positions[] = "positions";
static const char __pyx_k_recordXML[] = "_recordXML";
static const char __pyx_k_startTime[] = "startTime";
static const char __pyx_k_stiffness[] = "stiffness";
static const char __pyx_k_x_new_rot[] = "x_new_rot: ";
static const char __pyx_k_Collection[] = "Collection";
static const char __pyx_k_Dimensions[] = "Dimensions";
static const char __pyx_k_Fx_applied[] = "Fx_applied";
static const char __pyx_k_Fy_applied[] = "Fy_applied";
static const char __pyx_k_Fz_applied[] = "Fz_applied";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_Mx_applied[] = "Mx_applied";
static const char __pyx_k_My_applied[] = "My_applied";
static const char __pyx_k_Mz_applied[] = "Mz_applied";
static const char __pyx_k_SubElement[] = "SubElement";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_all_values[] = "all_values";
static const char __pyx_k_barycenter[] = "barycenter";
static const char __pyx_k_buildNodes[] = "buildNodes";
static const char __pyx_k_dimensions[] = "dimensions";
static const char __pyx_k_elements_t[] = "elements_t";
static const char __pyx_k_getMoments[] = "getMoments";
static const char __pyx_k_globalMesh[] = "globalMesh";
static const char __pyx_k_h5_nodes_t[] = ".h5:/nodes_t";
static const char __pyx_k_netMoments[] = "netMoments";
static const char __pyx_k_node_guess[] = "node_guess";
static const char __pyx_k_prediction[] = "prediction";
static const char __pyx_k_proteus_dt[] = "proteus_dt";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_rank_guess[] = "rank_guess";
static const char __pyx_k_rotation3D[] = "rotation3D";
static const char __pyx_k_sampleRate[] = "sampleRate";
static const char __pyx_k_segment_nb[] = "segment_nb";
static const char __pyx_k_tangential[] = "tangential";
static const char __pyx_k_tensions_t[] = "tensions_t";
static const char __pyx_k_velocity_t[] = "velocity_t";
static const char __pyx_k_ChRigidBody[] = "ChRigidBody";
static const char __pyx_k_ElementTree[] = "ElementTree";
static const char __pyx_k_F_applied_2[] = "F_applied";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_Mass_Matrix[] = "Mass Matrix:\n";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_SETTING_ROT[] = "$$$$$ SETTING ROT";
static const char __pyx_k_SetPosition[] = "SetPosition";
static const char __pyx_k_Trapezoidal[] = "Trapezoidal";
static const char __pyx_k_attachShape[] = "attachShape";
static const char __pyx_k_barycenters[] = "barycenters";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_elementMaps[] = "elementMaps";
static const char __pyx_k_h_predict_2[] = "h_predict";
static const char __pyx_k_netForces_p[] = "netForces_p";
static const char __pyx_k_netForces_v[] = "netForces_v";
static const char __pyx_k_posdtdt_csv[] = "_posdtdt.csv";
static const char __pyx_k_record_body[] = "record_body";
static const char __pyx_k_record_file[] = "record_file";
static const char __pyx_k_rest_length[] = "rest_length";
static const char __pyx_k_setRotation[] = "setRotation";
static const char __pyx_k_storeValues[] = "storeValues";
static const char __pyx_k_BodyDynamics[] = "BodyDynamics";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_SpatialTools[] = "SpatialTools";
static const char __pyx_k_acceleration[] = "acceleration";
static const char __pyx_k_ang_velocity[] = "ang_velocity";
static const char __pyx_k_coefficients[] = "coefficients";
static const char __pyx_k_nNodes_owned[] = "nNodes_owned";
static const char __pyx_k_recordValues[] = "_recordValues";
static const char __pyx_k_setAddedMass[] = "setAddedMass";
static const char __pyx_k_t_model_last[] = "t_model_last";
static const char __pyx_k_updateForces[] = "updateForces";
static const char __pyx_k_x_new_trarot[] = "x_new_trarot: ";
static const char __pyx_k_AttributeType[] = "AttributeType";
static const char __pyx_k_Finished_init[] = "Finished init";
static const char __pyx_k_Setup_initial[] = "Setup initial";
static const char __pyx_k_Starting_init[] = "Starting init";
static const char __pyx_k_backwardEuler[] = "backwardEuler";
static const char __pyx_k_getDragForces[] = "getDragForces";
static const char __pyx_k_h5_elements_t[] = ".h5:/elements_t";
static const char __pyx_k_h_ang_predict[] = "h_ang_predict: ";
static const char __pyx_k_nodeStarArray[] = "nodeStarArray";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_Chrono_prestep[] = "Chrono prestep";
static const char __pyx_k_CollectionType[] = "CollectionType";
static const char __pyx_k_Spatial_Domain[] = " Spatial_Domain";
static const char __pyx_k_acceleration_t[] = "acceleration_t";
static const char __pyx_k_calculate_init[] = "calculate_init";
static const char __pyx_k_create_dataset[] = "create_dataset";
static const char __pyx_k_getShearForces[] = "getShearForces";
static const char __pyx_k_getTensionBack[] = "getTensionBack";
static const char __pyx_k_h_predict_last[] = "h_predict_last: ";
static const char __pyx_k_levelModelList[] = "levelModelList";
static const char __pyx_k_proteus_mprans[] = "proteus.mprans";
static const char __pyx_k_stepController[] = "stepController";
static const char __pyx_k_Chrono_poststep[] = "Chrono poststep";
static const char __pyx_k_addSubcomponent[] = "addSubcomponent";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_checkedElements[] = "checkedElements";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_getInverseValue[] = "getInverseValue";
static const char __pyx_k_getLocalElement[] = "getLocalElement";
static const char __pyx_k_getNodesTension[] = "getNodesTension";
static const char __pyx_k_getTensionFront[] = "getTensionFront";
static const char __pyx_k_mbd_ChRigidBody[] = "mbd.ChRigidBody";
static const char __pyx_k_nodeStarOffsets[] = "nodeStarOffsets";
static const char __pyx_k_record_moorings[] = "record_moorings";
static const char __pyx_k_Full_Mass_Matrix[] = "Full Mass Matrix:\n";
static const char __pyx_k_NumberOfElements[] = "NumberOfElements";
static const char __pyx_k_ang_acceleration[] = "ang_acceleration";
static const char __pyx_k_function_tangent[] = "function_tangent";
static const char __pyx_k_getGradientValue[] = "getGradientValue";
static const char __pyx_k_getNodesPosition[] = "getNodesPosition";
static const char __pyx_k_getNodesVelocity[] = "getNodesVelocity";
static const char __pyx_k_nElements_global[] = "nElements_global";
static const char __pyx_k_no_time_step_set[] = "no time step set";
static const char __pyx_k_proteus_Archiver[] = "proteus.Archiver";
static const char __pyx_k_referenceElement[] = "referenceElement";
static const char __pyx_k_set_element_type[] = "set element type";
static const char __pyx_k_Added_Mass_Matrix[] = "Added Mass Matrix:\n";
static const char __pyx_k_elementNodesArray[] = "elementNodesArray";
static const char __pyx_k_function_position[] = "function_position";
static const char __pyx_k_getPressureForces[] = "getPressureForces";
static const char __pyx_k_h_ang_vel_predict[] = "h_ang_vel_predict: ";
static const char __pyx_k_nodeElementsArray[] = "nodeElementsArray";
static const char __pyx_k_setCouplingScheme[] = "setCouplingScheme";
static const char __pyx_k_setExternalForces[] = "setExternalForces";
static const char __pyx_k_AuxiliaryVariables[] = "AuxiliaryVariables";
static const char __pyx_k_Chrono_system_to_t[] = "Chrono system to t=";
static const char __pyx_k_auxiliaryVariables[] = "auxiliaryVariables";
static const char __pyx_k_getAddedMassForces[] = "getAddedMassForces";
static const char __pyx_k_h_ang_predict_last[] = "h_ang_predict_last: ";
static const char __pyx_k_nodeElementOffsets[] = "nodeElementOffsets";
static const char __pyx_k_not_a_valid_choice[] = " not a valid choice.";
static const char __pyx_k_patchBoundaryNodes[] = "patchBoundaryNodes";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_fluid_density_array[] = "fluid_density_array";
static const char __pyx_k_getLocalNearestNode[] = "getLocalNearestNode";
static const char __pyx_k_fluid_velocity_array[] = "fluid_velocity_array";
static const char __pyx_k_getNodesAcceleration[] = "getNodesAcceleration";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_was_already_attached[] = " was already attached";
static const char __pyx_k_cinit___locals_lambda[] = "__cinit__.<locals>.<lambda>";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_xml_etree_ElementTree[] = "xml.etree.ElementTree";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_cinit___locals_genexpr[] = "__cinit__.<locals>.genexpr";
static const char __pyx_k_h_ang_vel_predict_last[] = "h_ang_vel_predict_last: ";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_fluid_acceleration_array[] = "fluid_acceleration_array";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_Solved_Chrono_system_to_t[] = "Solved Chrono system to t=";
static const char __pyx_k_recordValues_locals_record[] = "_recordValues.<locals>.record";
static const char __pyx_k_getFluidVelocityLocalCoords[] = "getFluidVelocityLocalCoords";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_nodeOffsets_subdomain_owned[] = "nodeOffsets_subdomain_owned";
static const char __pyx_k_Prediction_requested_unknown[] = "Prediction requested unknown";
static const char __pyx_k_Solving_Chrono_system_from_t[] = "Solving Chrono system from t=";
static const char __pyx_k_arrays_are_not_of_same_length[] = "arrays are not of same length";
static const char __pyx_k_findElementContainingCoordsKD[] = "findElementContainingCoordsKD";
static const char __pyx_k_http_www_w3_org_2001_XInclude[] = "http://www.w3.org/2001/XInclude";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_nodeNumbering_subdomain2global[] = "nodeNumbering_subdomain2global";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Coupling_between_Chrono_and_Pro[] = "\nCoupling between Chrono and Proteus is done in this file.\n\nObjects (classes) starting with 'ProtCh' (e.g. ProtChBody) are objects that\nhave logic specifically developed for communication between Proteus and Chrono.\n\nObjects starting with 'Ch' (e.g. ChBody) are objects that only have Chrono\nlogic associated to them.\n\nSome ProtCh objects give access to the Chrono object:\nmy_protchsystem = ProtChSystem(gravity=np.ndarray([0.,-9.81,0.]))\nmy_protchbody = ProtChBody(system=my_protchsystem)\nmy_chbody = ProtChBody.ChBody\nmy_chbody.SetPos(...)\n";
static const char __pyx_k_Finished_search_for_cable_nodes[] = "Finished search for cable nodes";
static const char __pyx_k_Position_aray_must_be_of_length[] = "Position aray must be of length 3";
static const char __pyx_k_ang2_and_t_should_have_the_same[] = "ang2 and t should have the same length";
static const char __pyx_k_ang3_and_t_should_have_the_same[] = "ang3 and t should have the same length";
static const char __pyx_k_findElementContainingCoordsDist[] = "findElementContainingCoordsDist";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_p_home_jcollins_proteus_proteus[] = "/p/home/jcollins/proteus/proteus/mbd/ChRigidBody.pyx";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_xml_version_1_0_DOCTYPE_Xdmf_SY[] = "<?xml version=\"1.0\" ?>\n<!DOCTYPE Xdmf SYSTEM \"Xdmf.dtd\" []>\n";
static const char __pyx_k_Added_mass_matrix_must_be_6x6_np[] = "Added mass matrix must be 6x6 (np)";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Building_k_d_tree_for_mooring_no[] = "Building k-d tree for mooring nodes lookup";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Coupling_scheme_requested_unknow[] = "Coupling scheme requested unknown";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Starting_distance_search_for_cab[] = "Starting distance search for cable nodes";
static const char __pyx_k_Starting_k_d_tree_search_for_cab[] = "Starting k-d tree search for cable nodes";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_ang_and_t_should_have_the_same_l[] = "ang and t should have the same length";
static const char __pyx_k_call_buildNodes_before_calling_t[] = "call buildNodes() before calling this function";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_x_and_t_should_have_the_same_len[] = "x and t should have the same length";
static const char __pyx_k_y_and_t_should_have_the_same_len[] = "y and t should have the same length";
static const char __pyx_k_z_and_t_should_have_the_same_len[] = "z and t should have the same length";
static const char __pyx_k_Position_aray_must_be_of_length_2[] = "Position aray must be of length 4";
static const char __pyx_k_Building_k_d_tree_for_mooring_no_2[] = "Building k-d tree for mooring nodes lookup on first time step";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_2_0;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_kp_s_AM_csv;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_s_Added_Mass_Matrix;
static PyObject *__pyx_kp_s_Added_mass_matrix_must_be_6x6_np;
static PyObject *__pyx_n_s_Aij;
static PyObject *__pyx_kp_s_Aij_csv;
static PyObject *__pyx_n_s_Archiver;
static PyObject *__pyx_n_s_Attribute;
static PyObject *__pyx_n_s_AttributeType;
static PyObject *__pyx_n_s_AuxiliaryVariables;
static PyObject *__pyx_n_s_BodyDynamics;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Building_k_d_tree_for_mooring_no;
static PyObject *__pyx_kp_s_Building_k_d_tree_for_mooring_no_2;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_n_s_CSS;
static PyObject *__pyx_n_b_CableANCF;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Center;
static PyObject *__pyx_n_s_ChRigidBody;
static PyObject *__pyx_kp_s_Chrono_poststep;
static PyObject *__pyx_kp_s_Chrono_prestep;
static PyObject *__pyx_kp_s_Chrono_system_to_t;
static PyObject *__pyx_n_s_Collection;
static PyObject *__pyx_n_s_CollectionType;
static PyObject *__pyx_n_s_Comm;
static PyObject *__pyx_kp_s_Coupling_scheme_requested_unknow;
static PyObject *__pyx_n_s_DataItem;
static PyObject *__pyx_n_s_DataType;
static PyObject *__pyx_n_s_Dimensions;
static PyObject *__pyx_n_s_Domain;
static PyObject *__pyx_n_s_E;
static PyObject *__pyx_n_s_ET;
static PyObject *__pyx_n_s_Element;
static PyObject *__pyx_n_s_ElementTree;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_Euler;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_n_s_F_Aij;
static PyObject *__pyx_kp_s_F_applied;
static PyObject *__pyx_n_s_F_applied_2;
static PyObject *__pyx_n_s_F_prot;
static PyObject *__pyx_n_s_File;
static PyObject *__pyx_kp_s_Finished_init;
static PyObject *__pyx_kp_s_Finished_search_for_cable_nodes;
static PyObject *__pyx_n_s_Float;
static PyObject *__pyx_n_s_Format;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_s_Full_Mass_Matrix;
static PyObject *__pyx_n_s_Fx;
static PyObject *__pyx_n_s_Fx_Aij;
static PyObject *__pyx_n_s_Fx_applied;
static PyObject *__pyx_n_s_Fx_prot;
static PyObject *__pyx_n_s_Fy;
static PyObject *__pyx_n_s_Fy_Aij;
static PyObject *__pyx_n_s_Fy_applied;
static PyObject *__pyx_n_s_Fy_prot;
static PyObject *__pyx_n_s_Fz;
static PyObject *__pyx_n_s_Fz_Aij;
static PyObject *__pyx_n_s_Fz_applied;
static PyObject *__pyx_n_s_Fz_prot;
static PyObject *__pyx_n_s_Geometry;
static PyObject *__pyx_n_s_Get_size;
static PyObject *__pyx_n_s_Grid;
static PyObject *__pyx_n_s_GridType;
static PyObject *__pyx_n_s_HDF;
static PyObject *__pyx_n_s_HHT;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_n_s_Int;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_Iyy;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_n_s_MAXLOC;
static PyObject *__pyx_n_s_MINLOC;
static PyObject *__pyx_n_s_MPI;
static PyObject *__pyx_n_s_M_applied;
static PyObject *__pyx_n_s_M_prot;
static PyObject *__pyx_kp_s_Mass_Matrix;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_Mesh;
static PyObject *__pyx_n_s_Mx;
static PyObject *__pyx_n_s_Mx_applied;
static PyObject *__pyx_n_s_Mx_prot;
static PyObject *__pyx_n_s_My;
static PyObject *__pyx_n_s_My_applied;
static PyObject *__pyx_n_s_My_prot;
static PyObject *__pyx_n_s_Mz;
static PyObject *__pyx_n_s_Mz_applied;
static PyObject *__pyx_n_s_Mz_prot;
static PyObject *__pyx_n_s_Name;
static PyObject *__pyx_n_s_Node;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NumberOfElements;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_Polyline;
static PyObject *__pyx_kp_s_Position_aray_must_be_of_length;
static PyObject *__pyx_kp_s_Position_aray_must_be_of_length_2;
static PyObject *__pyx_n_s_Precision;
static PyObject *__pyx_kp_s_Prediction_requested_unknown;
static PyObject *__pyx_n_s_Profiling;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_SETTING_ROT;
static PyObject *__pyx_n_s_Scalar;
static PyObject *__pyx_n_s_SetPosition;
static PyObject *__pyx_kp_s_Setup_initial;
static PyObject *__pyx_kp_s_Shape;
static PyObject *__pyx_kp_s_Solved_Chrono_system_to_t;
static PyObject *__pyx_kp_s_Solving_Chrono_system_from_t;
static PyObject *__pyx_n_s_SpatialTools;
static PyObject *__pyx_kp_s_Spatial_Domain;
static PyObject *__pyx_kp_s_Starting_distance_search_for_cab;
static PyObject *__pyx_kp_s_Starting_init;
static PyObject *__pyx_kp_s_Starting_k_d_tree_search_for_cab;
static PyObject *__pyx_n_s_SubElement;
static PyObject *__pyx_n_s_Tb0;
static PyObject *__pyx_n_s_Tb1;
static PyObject *__pyx_n_s_Tb2;
static PyObject *__pyx_n_s_Temporal;
static PyObject *__pyx_n_s_Tf0;
static PyObject *__pyx_n_s_Tf1;
static PyObject *__pyx_n_s_Tf2;
static PyObject *__pyx_n_s_Time;
static PyObject *__pyx_n_s_Topology;
static PyObject *__pyx_n_s_Trapezoidal;
static PyObject *__pyx_n_s_Type;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_Uniform;
static PyObject *__pyx_n_s_Value;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Version;
static PyObject *__pyx_n_s_XYZ;
static PyObject *__pyx_n_s_Xdmf;
static PyObject *__pyx_n_s__172;
static PyObject *__pyx_kp_s__23;
static PyObject *__pyx_kp_s__78;
static PyObject *__pyx_kp_s__85;
static PyObject *__pyx_kp_s__90;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_acc;
static PyObject *__pyx_n_s_acceleration;
static PyObject *__pyx_n_s_acceleration_t;
static PyObject *__pyx_n_s_addSubcomponent;
static PyObject *__pyx_n_s_all_values;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_allreduce;
static PyObject *__pyx_n_s_am_t;
static PyObject *__pyx_n_s_amx;
static PyObject *__pyx_n_s_amx_t;
static PyObject *__pyx_n_s_amy;
static PyObject *__pyx_n_s_amy_t;
static PyObject *__pyx_n_s_amz;
static PyObject *__pyx_n_s_amz_t;
static PyObject *__pyx_n_s_anchor;
static PyObject *__pyx_n_s_ang;
static PyObject *__pyx_n_s_ang2;
static PyObject *__pyx_kp_s_ang2_and_t_should_have_the_same;
static PyObject *__pyx_n_s_ang3;
static PyObject *__pyx_kp_s_ang3_and_t_should_have_the_same;
static PyObject *__pyx_n_s_ang_acc;
static PyObject *__pyx_n_s_ang_acceleration;
static PyObject *__pyx_kp_s_ang_and_t_should_have_the_same_l;
static PyObject *__pyx_n_s_ang_ax;
static PyObject *__pyx_n_s_ang_ay;
static PyObject *__pyx_n_s_ang_az;
static PyObject *__pyx_n_s_ang_disp;
static PyObject *__pyx_n_s_ang_ux;
static PyObject *__pyx_n_s_ang_uy;
static PyObject *__pyx_n_s_ang_uz;
static PyObject *__pyx_n_s_ang_vel;
static PyObject *__pyx_n_s_ang_velocity;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_ar;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_kp_s_arrays_are_not_of_same_length;
static PyObject *__pyx_n_s_attachShape;
static PyObject *__pyx_n_s_auxiliaryVariables;
static PyObject *__pyx_n_s_ax;
static PyObject *__pyx_n_s_ax_t;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_ay;
static PyObject *__pyx_n_s_ay_t;
static PyObject *__pyx_n_s_az;
static PyObject *__pyx_n_s_az_t;
static PyObject *__pyx_n_b_backwardEuler;
static PyObject *__pyx_n_s_barrier;
static PyObject *__pyx_n_s_barycenter;
static PyObject *__pyx_n_s_barycenters;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_bcast;
static PyObject *__pyx_n_s_bd;
static PyObject *__pyx_n_s_beam_type;
static PyObject *__pyx_n_s_body1;
static PyObject *__pyx_n_s_body2;
static PyObject *__pyx_n_s_buildNodes;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_cKDTree;
static PyObject *__pyx_n_s_cable1;
static PyObject *__pyx_n_s_cable2;
static PyObject *__pyx_n_s_cable_nb;
static PyObject *__pyx_n_s_calculate_init;
static PyObject *__pyx_kp_s_call_buildNodes_before_calling_t;
static PyObject *__pyx_n_s_checkedElements;
static PyObject *__pyx_n_s_cinit___locals_genexpr;
static PyObject *__pyx_n_s_cinit___locals_lambda;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_coefficients;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_comm;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_coords;
static PyObject *__pyx_n_s_coordsys;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_create_dataset;
static PyObject *__pyx_kp_s_csv;
static PyObject *__pyx_n_s_csv_2;
static PyObject *__pyx_n_s_csvfile;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_damping;
static PyObject *__pyx_n_s_debug;
static PyObject *__pyx_n_s_deepcopy;
static PyObject *__pyx_n_s_delimiter;
static PyObject *__pyx_n_s_dimensions;
static PyObject *__pyx_n_s_distance;
static PyObject *__pyx_n_s_dot;
static PyObject *__pyx_kp_s_drag_csv;
static PyObject *__pyx_n_s_drag_t;
static PyObject *__pyx_n_s_dragx;
static PyObject *__pyx_n_s_dragx_t;
static PyObject *__pyx_n_s_dragy;
static PyObject *__pyx_n_s_dragy_t;
static PyObject *__pyx_n_s_dragz;
static PyObject *__pyx_n_s_dragz_t;
static PyObject *__pyx_n_s_dt_init;
static PyObject *__pyx_n_s_dt_last;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_eN;
static PyObject *__pyx_n_s_eN_guess;
static PyObject *__pyx_n_s_eOffset;
static PyObject *__pyx_n_s_element;
static PyObject *__pyx_n_s_elementMaps;
static PyObject *__pyx_n_s_elementNodesArray;
static PyObject *__pyx_n_s_elements_t;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_envelope;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_eta;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_exit_2;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_fairlead;
static PyObject *__pyx_n_s_femSpace;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_findElementContainingCoordsDist;
static PyObject *__pyx_n_s_findElementContainingCoordsKD;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_flatten;
static PyObject *__pyx_n_s_fluid_acceleration_array;
static PyObject *__pyx_n_s_fluid_density_array;
static PyObject *__pyx_n_s_fluid_velocity_array;
static PyObject *__pyx_n_s_forces;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_free_r;
static PyObject *__pyx_n_s_free_x;
static PyObject *__pyx_n_s_function_position;
static PyObject *__pyx_n_s_function_tangent;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getAddedMassForces;
static PyObject *__pyx_n_s_getDragForces;
static PyObject *__pyx_n_s_getFluidVelocityLocalCoords;
static PyObject *__pyx_n_s_getGradientValue;
static PyObject *__pyx_n_s_getInverseValue;
static PyObject *__pyx_n_s_getLocalElement;
static PyObject *__pyx_n_s_getLocalNearestNode;
static PyObject *__pyx_n_s_getMoments;
static PyObject *__pyx_n_s_getNodesAcceleration;
static PyObject *__pyx_n_s_getNodesPosition;
static PyObject *__pyx_n_s_getNodesTension;
static PyObject *__pyx_n_s_getNodesVelocity;
static PyObject *__pyx_n_s_getPressureForces;
static PyObject *__pyx_n_s_getShearForces;
static PyObject *__pyx_n_s_getTensionBack;
static PyObject *__pyx_n_s_getTensionFront;
static PyObject *__pyx_n_s_getValue;
static PyObject *__pyx_n_s_getValues;
static PyObject *__pyx_n_s_getroot;
static PyObject *__pyx_n_s_globalMesh;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_gravity;
static PyObject *__pyx_kp_s_h5;
static PyObject *__pyx_kp_s_h5_2;
static PyObject *__pyx_kp_s_h5_elements_t;
static PyObject *__pyx_kp_s_h5_nodes_t;
static PyObject *__pyx_n_s_h5py;
static PyObject *__pyx_kp_s_h_ang_predict;
static PyObject *__pyx_kp_s_h_ang_predict_last;
static PyObject *__pyx_kp_s_h_ang_vel_predict;
static PyObject *__pyx_kp_s_h_ang_vel_predict_last;
static PyObject *__pyx_kp_s_h_predict;
static PyObject *__pyx_n_s_h_predict_2;
static PyObject *__pyx_kp_s_h_predict_last;
static PyObject *__pyx_kp_s_http_www_w3_org_2001_XInclude;
static PyObject *__pyx_n_s_hx;
static PyObject *__pyx_n_s_hxyz;
static PyObject *__pyx_n_s_hy;
static PyObject *__pyx_n_s_hz;
static PyObject *__pyx_kp_s_i;
static PyObject *__pyx_n_s_i8;
static PyObject *__pyx_n_s_i_2;
static PyObject *__pyx_n_s_i_end;
static PyObject *__pyx_kp_s_i_i;
static PyObject *__pyx_n_s_i_start;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_indentXML;
static PyObject *__pyx_n_s_inertia;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_intertia;
static PyObject *__pyx_n_s_inv;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_kdtree;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_levelModelList;
static PyObject *__pyx_n_s_limit_Rx;
static PyObject *__pyx_n_s_limit_Ry;
static PyObject *__pyx_n_s_limit_Rz;
static PyObject *__pyx_n_s_limit_X;
static PyObject *__pyx_n_s_limit_Y;
static PyObject *__pyx_n_s_limit_Z;
static PyObject *__pyx_n_s_linalg;
static PyObject *__pyx_n_s_logDir;
static PyObject *__pyx_n_s_logEvent;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_margin;
static PyObject *__pyx_n_s_mbd_ChRigidBody;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mesh;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_model;
static PyObject *__pyx_n_s_moments;
static PyObject *__pyx_n_s_mpi4py;
static PyObject *__pyx_n_s_nElements_global;
static PyObject *__pyx_n_s_nNodes_owned;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_nb_elems;
static PyObject *__pyx_n_s_nd;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_netForces_p;
static PyObject *__pyx_n_s_netForces_v;
static PyObject *__pyx_n_s_netMoments;
static PyObject *__pyx_kp_s_no_time_step_set;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_n_s_node1;
static PyObject *__pyx_n_s_node2;
static PyObject *__pyx_n_s_nodeArray;
static PyObject *__pyx_n_s_nodeElementOffsets;
static PyObject *__pyx_n_s_nodeElementsArray;
static PyObject *__pyx_n_s_nodeNumbering_subdomain2global;
static PyObject *__pyx_n_s_nodeOffsets_subdomain_owned;
static PyObject *__pyx_n_s_nodeStarArray;
static PyObject *__pyx_n_s_nodeStarOffsets;
static PyObject *__pyx_n_s_node_guess;
static PyObject *__pyx_n_s_nodes_t;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_s_normal;
static PyObject *__pyx_kp_s_not_a_valid_choice;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_onElement;
static PyObject *__pyx_n_s_op;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_kp_s_p_home_jcollins_proteus_proteus;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_parse;
static PyObject *__pyx_n_s_patchBoundaryNodes;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pivot;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_kp_s_pos_body;
static PyObject *__pyx_kp_s_pos_csv;
static PyObject *__pyx_kp_s_posdt_csv;
static PyObject *__pyx_kp_s_posdtdt_csv;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_positions;
static PyObject *__pyx_n_s_poststep;
static PyObject *__pyx_n_s_prediction;
static PyObject *__pyx_n_s_prestep;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pris1;
static PyObject *__pyx_n_s_pris2;
static PyObject *__pyx_n_s_proteus;
static PyObject *__pyx_n_s_proteus_Archiver;
static PyObject *__pyx_n_s_proteus_dt;
static PyObject *__pyx_n_s_proteus_mprans;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_query;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rank;
static PyObject *__pyx_n_s_rank_guess;
static PyObject *__pyx_n_s_record;
static PyObject *__pyx_n_s_recordH5;
static PyObject *__pyx_n_s_recordValues;
static PyObject *__pyx_n_s_recordValues_locals_record;
static PyObject *__pyx_n_s_recordXML;
static PyObject *__pyx_n_s_record_2;
static PyObject *__pyx_n_s_record_body;
static PyObject *__pyx_n_s_record_file;
static PyObject *__pyx_n_b_record_moorings;
static PyObject *__pyx_n_s_referenceElement;
static PyObject *__pyx_n_s_rest_length;
static PyObject *__pyx_n_s_rho;
static PyObject *__pyx_n_s_rot;
static PyObject *__pyx_n_s_rotation3D;
static PyObject *__pyx_n_s_rotq;
static PyObject *__pyx_n_s_rotq_e0;
static PyObject *__pyx_n_s_rotq_e1;
static PyObject *__pyx_n_s_rotq_e2;
static PyObject *__pyx_n_s_rotq_e3;
static PyObject *__pyx_n_s_row;
static PyObject *__pyx_n_s_sampleRate;
static PyObject *__pyx_n_s_scheme;
static PyObject *__pyx_n_s_scipy;
static PyObject *__pyx_n_s_segment_nb;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setAddedMass;
static PyObject *__pyx_n_s_setCouplingScheme;
static PyObject *__pyx_n_s_setExternalForces;
static PyObject *__pyx_n_s_setName;
static PyObject *__pyx_n_s_setRotation;
static PyObject *__pyx_kp_s_set_element_type;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_spatial;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_st;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_startTime;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stepController;
static PyObject *__pyx_n_s_stiffness;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_storeValues;
static PyObject *__pyx_n_s_strain;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_kp_s_substeps;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sx;
static PyObject *__pyx_n_s_sx_t;
static PyObject *__pyx_n_s_sy;
static PyObject *__pyx_n_s_sy_t;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_system;
static PyObject *__pyx_n_s_sz;
static PyObject *__pyx_n_s_sz_t;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_t_2;
static PyObject *__pyx_n_s_t_ch;
static PyObject *__pyx_kp_s_t_csv;
static PyObject *__pyx_n_s_t_max;
static PyObject *__pyx_n_s_t_model_last;
static PyObject *__pyx_n_s_t_sim;
static PyObject *__pyx_n_s_tangential;
static PyObject *__pyx_n_s_tangents;
static PyObject *__pyx_kp_s_tens_csv;
static PyObject *__pyx_n_s_tensions_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_tolist;
static PyObject *__pyx_n_s_tompi4py;
static PyObject *__pyx_n_s_tstype;
static PyObject *__pyx_n_s_u;
static PyObject *__pyx_kp_s_u_csv;
static PyObject *__pyx_n_s_u_grad;
static PyObject *__pyx_kp_s_udt_csv;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_updateForces;
static PyObject *__pyx_n_s_ux;
static PyObject *__pyx_n_s_ux_t;
static PyObject *__pyx_n_s_uy;
static PyObject *__pyx_n_s_uy_t;
static PyObject *__pyx_n_s_uz;
static PyObject *__pyx_n_s_uz_t;
static PyObject *__pyx_n_s_vel;
static PyObject *__pyx_n_s_velocity;
static PyObject *__pyx_n_s_velocity_t;
static PyObject *__pyx_n_s_verbose;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_kp_s_was_already_attached;
static PyObject *__pyx_kp_s_with_dt;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_writer;
static PyObject *__pyx_n_s_writerow;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_kp_s_x_2;
static PyObject *__pyx_kp_s_x_and_t_should_have_the_same_len;
static PyObject *__pyx_kp_s_x_body;
static PyObject *__pyx_kp_s_x_new_rot;
static PyObject *__pyx_kp_s_x_new_trarot;
static PyObject *__pyx_kp_s_x_old;
static PyObject *__pyx_n_s_xi;
static PyObject *__pyx_kp_s_xmf;
static PyObject *__pyx_n_s_xml_etree_ElementTree;
static PyObject *__pyx_kp_s_xml_version_1_0_DOCTYPE_Xdmf_SY;
static PyObject *__pyx_kp_s_xmlns_xi;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_kp_s_y_and_t_should_have_the_same_len;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_kp_s_z_and_t_should_have_the_same_len;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system, PyObject *__pyx_v_shape, CYTHON_UNUSED PyObject *__pyx_v_nd, CYTHON_UNUSED PyObject *__pyx_v_sampleRate); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2attachShape(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_shape); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4SetBodyFixed(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, bool __pyx_v_state); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6setWidth2D(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_width); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8set_indices(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_i_start, PyObject *__pyx_v_i_end); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10attachAuxiliaryVariables(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_avDict); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12setInertiaXX(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_inertia); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14setInitialRot(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_rot); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16hxyz(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t, PyObject *__pyx_v_debug); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_18hx(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_20hy(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22hz(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_24hx_translation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, CYTHON_UNUSED PyArrayObject *__pyx_v_x, CYTHON_UNUSED double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26hy_translation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, CYTHON_UNUSED PyArrayObject *__pyx_v_x, CYTHON_UNUSED double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_28hz_translation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, CYTHON_UNUSED PyArrayObject *__pyx_v_x, CYTHON_UNUSED double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_30hx_rotation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_32hy_rotation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_34hz_rotation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_36addSpring(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, double __pyx_v_stiffness, double __pyx_v_damping, PyArrayObject *__pyx_v_fairlead, PyArrayObject *__pyx_v_anchor, double __pyx_v_rest_length); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_38SetPosition(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_40SetPosition(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_42setRotation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_quaternion); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_44setConstraints(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_free_x, PyArrayObject *__pyx_v_free_r); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_46SetMass(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, double __pyx_v_mass); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_48setAddedMass(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, __Pyx_memviewslice __pyx_v_added_mass); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_50getPressureForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_52getShearForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_54getMoments(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_56SetPos(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, __Pyx_memviewslice __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_58SetRot(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, __Pyx_memviewslice __pyx_v_rot); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_60getRotationMatrix(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_62prestep(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_64setExternalForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_forces, PyArrayObject *__pyx_v_moments); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_66poststep(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_68prediction(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_70calculate_init(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_72calculate(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_74setPrescribedMotionCustom(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, __Pyx_memviewslice __pyx_v_t, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y, __Pyx_memviewslice __pyx_v_z, __Pyx_memviewslice __pyx_v_ang, __Pyx_memviewslice __pyx_v_ang2, __Pyx_memviewslice __pyx_v_ang3, double __pyx_v_t_max); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_76setPrescribedMotionSine(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, double __pyx_v_a, double __pyx_v_f); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_78setPrescribedMotionPoly(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, double __pyx_v_coeff1); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_80setPrescribedMotion(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_function); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_82storeValues(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_84getValues(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_86setRecordValues(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_filename, PyObject *__pyx_v_all_values, PyObject *__pyx_v_pos, PyObject *__pyx_v_rot, CYTHON_UNUSED PyObject *__pyx_v_ang_disp, PyObject *__pyx_v_F, PyObject *__pyx_v_M, PyObject *__pyx_v_inertia, PyObject *__pyx_v_vel, PyObject *__pyx_v_acc, PyObject *__pyx_v_ang_vel, PyObject *__pyx_v_ang_acc, PyObject *__pyx_v_h_predict); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_88_recordValues(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_90addPrismaticLinksWithSpring(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_pris1, PyArrayObject *__pyx_v_pris2, double __pyx_v_stiffness, double __pyx_v_damping, double __pyx_v_rest_length); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_92addPrismaticLinkX(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, __Pyx_memviewslice __pyx_v_pris1); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_94setName(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, std::string __pyx_v_name); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_file___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_file_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_file_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5model___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5model_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5model_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5Shape___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5Shape_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5Shape_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2nd___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2nd_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_7i_start___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_7i_start_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5i_end___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5i_end_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2dt___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2dt_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8width_2D___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8width_2D_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_dict___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_dict_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_dict_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6ChBody___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6ChBody_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6ChBody_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8position___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8position_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8position_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13position_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13position_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13position_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1F___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1F_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1F_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1M___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1M_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1M_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_prot___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_prot_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_prot_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_prot___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_prot_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_prot_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9F_applied___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9F_applied_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9F_applied_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9M_applied___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9M_applied_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9M_applied_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5F_Aij___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5M_Aij___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12acceleration___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12acceleration_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12acceleration_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8velocity___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8velocity_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8velocity_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13velocity_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11barycenter0___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13rotation_init___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotm___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotm_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotm_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotm_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotq___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotq_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotq_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotq_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9adams_vel___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4name___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4name_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9predicted___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9predicted_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10dt_predict___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10dt_predict_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9h_predict___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9h_predict_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9h_predict_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_3Aij___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_3Aij_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_3Aij_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyArrayObject *__pyx_v_gravity, int __pyx_v_nd, PyObject *__pyx_v_dt_init, PyObject *__pyx_v_sampleRate); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_2GetChTime(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_4setCouplingScheme(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, std::string __pyx_v_scheme, std::string __pyx_v_prediction); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6attachModel(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_model, CYTHON_UNUSED PyObject *__pyx_v_ar); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_8attachAuxiliaryVariables(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_avDict); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10setMinimumSubsteps(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, int __pyx_v_nb); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_12step(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_14calculate(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_proteus_dt); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_16addBodyEasyBox(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox *__pyx_v_body); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_18calculate_init(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_20setTimestepperType(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, std::string __pyx_v_tstype, bool __pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_22setTimeStep(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_24setGravity(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyArrayObject *__pyx_v_gravity); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_26addSubcomponent(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_subcomponent); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_28findElementContainingCoordsKD(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_coords); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_30findElementContainingCoordsDist(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_coords, PyObject *__pyx_v_node_guess, PyObject *__pyx_v_eN_guess, PyObject *__pyx_v_rank_guess); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_32getFluidVelocityLocalCoords(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_xi, PyObject *__pyx_v_element, PyObject *__pyx_v_rank); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_34getFluidVelocityGradientLocalCoords(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_xi, PyObject *__pyx_v_element, PyObject *__pyx_v_rank); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_36setCollisionEnvelopeMargin(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, double __pyx_v_envelope, double __pyx_v_margin); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_5model___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_5model_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_5model_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7dt_init___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7dt_init_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11dist_search___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11dist_search_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10first_step___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10first_step_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6scheme___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6scheme_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10prediction___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10prediction_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7step_nb___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7step_nb_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10step_start___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10step_start_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11next_sample___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11next_sample_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13record_values___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13record_values_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6tCount___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6tCount_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_4Mesh___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_Mesh *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_4Mesh_2setAutomaticGravity(struct __pyx_obj_3mbd_11ChRigidBody_Mesh *__pyx_v_self, bool __pyx_v_val); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_SurfaceBoxNodesCloud *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system, struct __pyx_obj_3mbd_11ChRigidBody_Mesh *__pyx_v_mesh, PyArrayObject *__pyx_v_position, PyArrayObject *__pyx_v_dimensions); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud_2setNodesSize(struct __pyx_obj_3mbd_11ChRigidBody_SurfaceBoxNodesCloud *__pyx_v_self, double __pyx_v_size); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system, struct __pyx_obj_3mbd_11ChRigidBody_Mesh *__pyx_v_mesh, __Pyx_memviewslice __pyx_v_length, PyArrayObject *__pyx_v_nb_elems, __Pyx_memviewslice __pyx_v_d, __Pyx_memviewslice __pyx_v_rho, __Pyx_memviewslice __pyx_v_E, std::string __pyx_v_beam_type); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_2setName(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, std::string __pyx_v_name); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4recordStrainEta(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, __Pyx_memviewslice __pyx_v_eta); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_6_recordH5(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8_recordXML(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_record_file, PyObject *__pyx_v_row, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10_recordValues(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12getTensionBack(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14getTensionFront(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_16calculate_init(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_18prestep(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20poststep(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22setApplyDrag(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, CYTHON_UNUSED bool __pyx_v_boolval); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24setApplyAddedMass(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, CYTHON_UNUSED bool __pyx_v_boolval); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_26setApplyBuoyancy(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, CYTHON_UNUSED bool __pyx_v_boolval); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_28setNodesPositionFunction(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_function_position, PyObject *__pyx_v_function_tangent); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_30setFluidVelocityFunction(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_function); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_32fixFrontNode(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, bool __pyx_v_fixed); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_34fixBackNode(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, bool __pyx_v_fixed); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_36attachBackNodeToBody(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_38attachFrontNodeToBody(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_40getTensionElement(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, int __pyx_v_i, PyObject *__pyx_v_eta); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_42getNodesTension(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_eta); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_44setDragCoefficients(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, double __pyx_v_tangential, double __pyx_v_normal, int __pyx_v_segment_nb); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_46setAddedMassCoefficients(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, double __pyx_v_tangential, double __pyx_v_normal, int __pyx_v_segment_nb); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_48setNodesPosition(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, __Pyx_memviewslice __pyx_v_positions, PyObject *__pyx_v_tangents); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_50buildNodes(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_52getNodesPosition(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_54getNodesVelocity(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_56getNodesAcceleration(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_58getDragForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_60getAddedMassForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_62setIyy(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, double __pyx_v_Iyy, int __pyx_v_cable_nb); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_64getNodesD(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_66setContactMaterial(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *__pyx_v_mat); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_68setExternalForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_fluid_velocity_array, PyObject *__pyx_v_fluid_density_array, PyObject *__pyx_v_fluid_acceleration_array); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_70updateForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_72setFluidDensityAtNodes(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyArrayObject *__pyx_v_density_array); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_74setFluidVelocityAtNodes(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyArrayObject *__pyx_v_velocity_array); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_76setFluidAccelerationAtNodes(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyArrayObject *__pyx_v_acceleration_array); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11record_file___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_5model___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_5model_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_5model_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_2nd___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_2nd_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10body_front___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9body_back___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10front_body___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10front_body_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9back_body___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9back_body_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4name___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4name_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11initialized___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11initialized_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_getLocalNearestNode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coords, PyObject *__pyx_v_kdtree); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_2getLocalElement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_femSpace, PyObject *__pyx_v_coords, PyObject *__pyx_v_node); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self, PyObject *__pyx_v_system); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_2attachModel(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self, PyObject *__pyx_v_model, CYTHON_UNUSED PyObject *__pyx_v_ar); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_4attachAuxiliaryVariables(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_avDict); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_6calculate_init(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_8calculate(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_5model___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_5model_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_5model_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_4attachNodeToNode(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_cable1, int __pyx_v_node1, struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_cable2, int __pyx_v_node2); /* proto */
static PyObject *__pyx_pf_3mbd_11ChRigidBody_6linkBodies(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body1, struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body2, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys *__pyx_v_coordsys, double __pyx_v_limit_X, double __pyx_v_limit_Y, double __pyx_v_limit_Z, double __pyx_v_limit_Rx, double __pyx_v_limit_Ry, double __pyx_v_limit_Rz); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_ProtChBody(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_ProtChSystem(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_Mesh(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_SurfaceBoxNodesCloud(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_ProtChMoorings(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_ProtChAddedMass(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3mbd_11ChRigidBody___pyx_scope_struct____cinit__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_1_;
static PyObject *__pyx_float_2_;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_neg_1;
static __Pyx_memviewslice __pyx_k__72;
static __Pyx_memviewslice __pyx_k__73;
static __Pyx_memviewslice __pyx_k__74;
static __Pyx_memviewslice __pyx_k__75;
static __Pyx_memviewslice __pyx_k__76;
static __Pyx_memviewslice __pyx_k__77;
static std::string __pyx_k__84;
static std::string __pyx_k__92;
static __Pyx_memviewslice __pyx_k__138;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__30;
static PyObject *__pyx_slice__38;
static PyObject *__pyx_slice__39;
static PyObject *__pyx_slice__40;
static PyObject *__pyx_slice__41;
static PyObject *__pyx_slice__44;
static PyObject *__pyx_slice__45;
static PyObject *__pyx_slice__46;
static PyObject *__pyx_slice__49;
static PyObject *__pyx_slice__51;
static PyObject *__pyx_slice__53;
static PyObject *__pyx_slice__55;
static PyObject *__pyx_slice__57;
static PyObject *__pyx_slice__59;
static PyObject *__pyx_slice__62;
static PyObject *__pyx_slice__65;
static PyObject *__pyx_slice__66;
static PyObject *__pyx_slice__67;
static PyObject *__pyx_slice__68;
static PyObject *__pyx_slice__93;
static PyObject *__pyx_slice__95;
static PyObject *__pyx_slice__97;
static PyObject *__pyx_slice__99;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_slice__101;
static PyObject *__pyx_slice__103;
static PyObject *__pyx_slice__105;
static PyObject *__pyx_slice__107;
static PyObject *__pyx_slice__109;
static PyObject *__pyx_slice__111;
static PyObject *__pyx_slice__113;
static PyObject *__pyx_slice__115;
static PyObject *__pyx_slice__117;
static PyObject *__pyx_slice__119;
static PyObject *__pyx_slice__121;
static PyObject *__pyx_slice__139;
static PyObject *__pyx_slice__144;
static PyObject *__pyx_slice__145;
static PyObject *__pyx_slice__146;
static PyObject *__pyx_slice__147;
static PyObject *__pyx_slice__148;
static PyObject *__pyx_slice__168;
static PyObject *__pyx_slice__169;
static PyObject *__pyx_slice__170;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__177;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__179;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__181;
static PyObject *__pyx_codeobj__126;
static PyObject *__pyx_codeobj__174;
static PyObject *__pyx_codeobj__176;

/* "mbd/ChRigidBody.pyx":267
 *       bool applyAddedMass  # will apply added mass if True (default)
 * 
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   ProtChSystem system,
 *                   shape=None,
 */

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system = 0;
  PyObject *__pyx_v_shape = 0;
  CYTHON_UNUSED PyObject *__pyx_v_nd = 0;
  CYTHON_UNUSED PyObject *__pyx_v_sampleRate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_system,&__pyx_n_s_shape,&__pyx_n_s_nd,&__pyx_n_s_sampleRate,0};
    PyObject* values[4] = {0,0,0,0};

    /* "mbd/ChRigidBody.pyx":269
 *     def __cinit__(self,
 *                   ProtChSystem system,
 *                   shape=None,             # <<<<<<<<<<<<<<
 *                   nd=None, sampleRate=0):
 *         self.ProtChSystem = system
 */
    values[1] = ((PyObject *)Py_None);

    /* "mbd/ChRigidBody.pyx":270
 *                   ProtChSystem system,
 *                   shape=None,
 *                   nd=None, sampleRate=0):             # <<<<<<<<<<<<<<
 *         self.ProtChSystem = system
 *         self.thisptr = newRigidBody(system.thisptr)
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_system)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nd);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sampleRate);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 267, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_system = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)values[0]);
    __pyx_v_shape = values[1];
    __pyx_v_nd = values[2];
    __pyx_v_sampleRate = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 267, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_system), __pyx_ptype_3mbd_11ChRigidBody_ProtChSystem, 1, "system", 0))) __PYX_ERR(0, 268, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody___cinit__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_system, __pyx_v_shape, __pyx_v_nd, __pyx_v_sampleRate);

  /* "mbd/ChRigidBody.pyx":267
 *       bool applyAddedMass  # will apply added mass if True (default)
 * 
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   ProtChSystem system,
 *                   shape=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system, PyObject *__pyx_v_shape, CYTHON_UNUSED PyObject *__pyx_v_nd, CYTHON_UNUSED PyObject *__pyx_v_sampleRate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::shared_ptr<ChBody>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mbd/ChRigidBody.pyx":271
 *                   shape=None,
 *                   nd=None, sampleRate=0):
 *         self.ProtChSystem = system             # <<<<<<<<<<<<<<
 *         self.thisptr = newRigidBody(system.thisptr)
 *         self.ChBody = pych.ChBodyAddedMass()
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_system));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_system));
  __Pyx_GOTREF(__pyx_v_self->ProtChSystem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_v_self->ProtChSystem = __pyx_v_system;

  /* "mbd/ChRigidBody.pyx":272
 *                   nd=None, sampleRate=0):
 *         self.ProtChSystem = system
 *         self.thisptr = newRigidBody(system.thisptr)             # <<<<<<<<<<<<<<
 *         self.ChBody = pych.ChBodyAddedMass()
 *         self.thisptr.body = self.ChBody.sharedptr_chbody  # give pointer to cpp class
 */
  __pyx_v_self->thisptr = newRigidBody(__pyx_v_system->thisptr);

  /* "mbd/ChRigidBody.pyx":273
 *         self.ProtChSystem = system
 *         self.thisptr = newRigidBody(system.thisptr)
 *         self.ChBody = pych.ChBodyAddedMass()             # <<<<<<<<<<<<<<
 *         self.thisptr.body = self.ChBody.sharedptr_chbody  # give pointer to cpp class
 *         self.ProtChSystem.thisptr.system.AddBody(self.ChBody.sharedptr_chbody)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ChBody);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ChBody));
  __pyx_v_self->ChBody = ((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":274
 *         self.thisptr = newRigidBody(system.thisptr)
 *         self.ChBody = pych.ChBodyAddedMass()
 *         self.thisptr.body = self.ChBody.sharedptr_chbody  # give pointer to cpp class             # <<<<<<<<<<<<<<
 *         self.ProtChSystem.thisptr.system.AddBody(self.ChBody.sharedptr_chbody)
 *         self.setRotation(np.array([1.,0.,0.,0.]))  # initialise rotation (nan otherwise)
 */
  __pyx_t_2 = __pyx_v_self->ChBody->__pyx_base.sharedptr_chbody;
  __pyx_v_self->thisptr->body = ((std::shared_ptr<ChBody> )__pyx_t_2);

  /* "mbd/ChRigidBody.pyx":275
 *         self.ChBody = pych.ChBodyAddedMass()
 *         self.thisptr.body = self.ChBody.sharedptr_chbody  # give pointer to cpp class
 *         self.ProtChSystem.thisptr.system.AddBody(self.ChBody.sharedptr_chbody)             # <<<<<<<<<<<<<<
 *         self.setRotation(np.array([1.,0.,0.,0.]))  # initialise rotation (nan otherwise)
 *         self.attachShape(shape)  # attach shape (if any)
 */
  __pyx_v_self->ProtChSystem->thisptr->system.AddBody(((std::shared_ptr<ChBody> )__pyx_v_self->ChBody->__pyx_base.sharedptr_chbody));

  /* "mbd/ChRigidBody.pyx":276
 *         self.thisptr.body = self.ChBody.sharedptr_chbody  # give pointer to cpp class
 *         self.ProtChSystem.thisptr.system.AddBody(self.ChBody.sharedptr_chbody)
 *         self.setRotation(np.array([1.,0.,0.,0.]))  # initialise rotation (nan otherwise)             # <<<<<<<<<<<<<<
 *         self.attachShape(shape)  # attach shape (if any)
 *         self.ProtChSystem.addSubcomponent(self)  # add body to system (for pre and post steps)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setRotation); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_1_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_5, 3, __pyx_float_0_);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":277
 *         self.ProtChSystem.thisptr.system.AddBody(self.ChBody.sharedptr_chbody)
 *         self.setRotation(np.array([1.,0.,0.,0.]))  # initialise rotation (nan otherwise)
 *         self.attachShape(shape)  # attach shape (if any)             # <<<<<<<<<<<<<<
 *         self.ProtChSystem.addSubcomponent(self)  # add body to system (for pre and post steps)
 *         self.record_dict = OrderedDict()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_attachShape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_shape};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_shape};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_shape);
      __Pyx_GIVEREF(__pyx_v_shape);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_shape);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":278
 *         self.setRotation(np.array([1.,0.,0.,0.]))  # initialise rotation (nan otherwise)
 *         self.attachShape(shape)  # attach shape (if any)
 *         self.ProtChSystem.addSubcomponent(self)  # add body to system (for pre and post steps)             # <<<<<<<<<<<<<<
 *         self.record_dict = OrderedDict()
 *         self.F_prot = np.zeros(3)  # initialise empty Proteus force
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->ProtChSystem), __pyx_n_s_addSubcomponent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, ((PyObject *)__pyx_v_self));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":279
 *         self.attachShape(shape)  # attach shape (if any)
 *         self.ProtChSystem.addSubcomponent(self)  # add body to system (for pre and post steps)
 *         self.record_dict = OrderedDict()             # <<<<<<<<<<<<<<
 *         self.F_prot = np.zeros(3)  # initialise empty Proteus force
 *         self.M_prot = np.zeros(3)  # initialise empty Proteus moment
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->record_dict);
  __Pyx_DECREF(__pyx_v_self->record_dict);
  __pyx_v_self->record_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":280
 *         self.ProtChSystem.addSubcomponent(self)  # add body to system (for pre and post steps)
 *         self.record_dict = OrderedDict()
 *         self.F_prot = np.zeros(3)  # initialise empty Proteus force             # <<<<<<<<<<<<<<
 *         self.M_prot = np.zeros(3)  # initialise empty Proteus moment
 *         self.F_applied = np.zeros(3)  # initialise empty Applied force
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_prot);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_prot));
  __pyx_v_self->F_prot = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":281
 *         self.record_dict = OrderedDict()
 *         self.F_prot = np.zeros(3)  # initialise empty Proteus force
 *         self.M_prot = np.zeros(3)  # initialise empty Proteus moment             # <<<<<<<<<<<<<<
 *         self.F_applied = np.zeros(3)  # initialise empty Applied force
 *         self.M_applied = np.zeros(3)  # initialise empty Applied moment
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_prot);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_prot));
  __pyx_v_self->M_prot = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":282
 *         self.F_prot = np.zeros(3)  # initialise empty Proteus force
 *         self.M_prot = np.zeros(3)  # initialise empty Proteus moment
 *         self.F_applied = np.zeros(3)  # initialise empty Applied force             # <<<<<<<<<<<<<<
 *         self.M_applied = np.zeros(3)  # initialise empty Applied moment
 *         self.F_Aij = np.zeros(3)  # initialise empty added mass force
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_applied);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_applied));
  __pyx_v_self->F_applied = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":283
 *         self.M_prot = np.zeros(3)  # initialise empty Proteus moment
 *         self.F_applied = np.zeros(3)  # initialise empty Applied force
 *         self.M_applied = np.zeros(3)  # initialise empty Applied moment             # <<<<<<<<<<<<<<
 *         self.F_Aij = np.zeros(3)  # initialise empty added mass force
 *         self.M_Aij = np.zeros(3)  # initialise empty added mass moment
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_applied);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_applied));
  __pyx_v_self->M_applied = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":284
 *         self.F_applied = np.zeros(3)  # initialise empty Applied force
 *         self.M_applied = np.zeros(3)  # initialise empty Applied moment
 *         self.F_Aij = np.zeros(3)  # initialise empty added mass force             # <<<<<<<<<<<<<<
 *         self.M_Aij = np.zeros(3)  # initialise empty added mass moment
 *         self.prescribed_motion_function = None
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_Aij);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_Aij));
  __pyx_v_self->F_Aij = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":285
 *         self.M_applied = np.zeros(3)  # initialise empty Applied moment
 *         self.F_Aij = np.zeros(3)  # initialise empty added mass force
 *         self.M_Aij = np.zeros(3)  # initialise empty added mass moment             # <<<<<<<<<<<<<<
 *         self.prescribed_motion_function = None
 *         self.acceleration = np.zeros(3)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_Aij);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_Aij));
  __pyx_v_self->M_Aij = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":286
 *         self.F_Aij = np.zeros(3)  # initialise empty added mass force
 *         self.M_Aij = np.zeros(3)  # initialise empty added mass moment
 *         self.prescribed_motion_function = None             # <<<<<<<<<<<<<<
 *         self.acceleration = np.zeros(3)
 *         self.acceleration_last = np.zeros(3)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->prescribed_motion_function);
  __Pyx_DECREF(__pyx_v_self->prescribed_motion_function);
  __pyx_v_self->prescribed_motion_function = Py_None;

  /* "mbd/ChRigidBody.pyx":287
 *         self.M_Aij = np.zeros(3)  # initialise empty added mass moment
 *         self.prescribed_motion_function = None
 *         self.acceleration = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.acceleration_last = np.zeros(3)
 *         self.velocity = np.zeros(3)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->acceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->acceleration));
  __pyx_v_self->acceleration = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":288
 *         self.prescribed_motion_function = None
 *         self.acceleration = np.zeros(3)
 *         self.acceleration_last = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.velocity = np.zeros(3)
 *         self.velocity_last = np.zeros(3)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->acceleration_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->acceleration_last));
  __pyx_v_self->acceleration_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":289
 *         self.acceleration = np.zeros(3)
 *         self.acceleration_last = np.zeros(3)
 *         self.velocity = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.velocity_last = np.zeros(3)
 *         self.ang_velocity = np.zeros(3)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->velocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->velocity));
  __pyx_v_self->velocity = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":290
 *         self.acceleration_last = np.zeros(3)
 *         self.velocity = np.zeros(3)
 *         self.velocity_last = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.ang_velocity = np.zeros(3)
 *         self.position_last = self.position
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->velocity_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->velocity_last));
  __pyx_v_self->velocity_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":291
 *         self.velocity = np.zeros(3)
 *         self.velocity_last = np.zeros(3)
 *         self.ang_velocity = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.position_last = self.position
 *         self.ang_vel_norm = 0.  # used for mesh disp prediction
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ang_velocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_velocity));
  __pyx_v_self->ang_velocity = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":292
 *         self.velocity_last = np.zeros(3)
 *         self.ang_velocity = np.zeros(3)
 *         self.position_last = self.position             # <<<<<<<<<<<<<<
 *         self.ang_vel_norm = 0.  # used for mesh disp prediction
 *         self.ang_vel_norm_last = 0.  # used for mesh disp prediction
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->position);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->position_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->position_last));
  __pyx_v_self->position_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":293
 *         self.ang_velocity = np.zeros(3)
 *         self.position_last = self.position
 *         self.ang_vel_norm = 0.  # used for mesh disp prediction             # <<<<<<<<<<<<<<
 *         self.ang_vel_norm_last = 0.  # used for mesh disp prediction
 *         self.h_predict = np.zeros(3)
 */
  __pyx_v_self->ang_vel_norm = 0.;

  /* "mbd/ChRigidBody.pyx":294
 *         self.position_last = self.position
 *         self.ang_vel_norm = 0.  # used for mesh disp prediction
 *         self.ang_vel_norm_last = 0.  # used for mesh disp prediction             # <<<<<<<<<<<<<<
 *         self.h_predict = np.zeros(3)
 *         self.h_ang_predict = 0.
 */
  __pyx_v_self->ang_vel_norm_last = 0.;

  /* "mbd/ChRigidBody.pyx":295
 *         self.ang_vel_norm = 0.  # used for mesh disp prediction
 *         self.ang_vel_norm_last = 0.  # used for mesh disp prediction
 *         self.h_predict = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.h_ang_predict = 0.
 *         self.h_ang_vel_predict = np.zeros(3)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->h_predict);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_predict));
  __pyx_v_self->h_predict = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":296
 *         self.ang_vel_norm_last = 0.  # used for mesh disp prediction
 *         self.h_predict = np.zeros(3)
 *         self.h_ang_predict = 0.             # <<<<<<<<<<<<<<
 *         self.h_ang_vel_predict = np.zeros(3)
 *         self.h_predict_last = np.zeros(3)
 */
  __pyx_v_self->h_ang_predict = 0.;

  /* "mbd/ChRigidBody.pyx":297
 *         self.h_predict = np.zeros(3)
 *         self.h_ang_predict = 0.
 *         self.h_ang_vel_predict = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.h_predict_last = np.zeros(3)
 *         self.h_ang_predict_last = 0.
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->h_ang_vel_predict);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_ang_vel_predict));
  __pyx_v_self->h_ang_vel_predict = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":298
 *         self.h_ang_predict = 0.
 *         self.h_ang_vel_predict = np.zeros(3)
 *         self.h_predict_last = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.h_ang_predict_last = 0.
 *         self.h_ang_vel_predict_last = np.zeros(3)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->h_predict_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_predict_last));
  __pyx_v_self->h_predict_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":299
 *         self.h_ang_vel_predict = np.zeros(3)
 *         self.h_predict_last = np.zeros(3)
 *         self.h_ang_predict_last = 0.             # <<<<<<<<<<<<<<
 *         self.h_ang_vel_predict_last = np.zeros(3)
 *         self.predicted = False
 */
  __pyx_v_self->h_ang_predict_last = 0.;

  /* "mbd/ChRigidBody.pyx":300
 *         self.h_predict_last = np.zeros(3)
 *         self.h_ang_predict_last = 0.
 *         self.h_ang_vel_predict_last = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.predicted = False
 *         self.adams_vel = np.zeros((5, 3))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->h_ang_vel_predict_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_ang_vel_predict_last));
  __pyx_v_self->h_ang_vel_predict_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":301
 *         self.h_ang_predict_last = 0.
 *         self.h_ang_vel_predict_last = np.zeros(3)
 *         self.predicted = False             # <<<<<<<<<<<<<<
 *         self.adams_vel = np.zeros((5, 3))
 *         self.ChBody.SetBodyFixed(False)
 */
  __pyx_v_self->predicted = 0;

  /* "mbd/ChRigidBody.pyx":302
 *         self.h_ang_vel_predict_last = np.zeros(3)
 *         self.predicted = False
 *         self.adams_vel = np.zeros((5, 3))             # <<<<<<<<<<<<<<
 *         self.ChBody.SetBodyFixed(False)
 *         self.Aij = np.zeros((6, 6))  # added mass array
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->adams_vel);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->adams_vel));
  __pyx_v_self->adams_vel = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":303
 *         self.predicted = False
 *         self.adams_vel = np.zeros((5, 3))
 *         self.ChBody.SetBodyFixed(False)             # <<<<<<<<<<<<<<
 *         self.Aij = np.zeros((6, 6))  # added mass array
 *         self.applyAddedMass = True  # will apply added mass in Chrono calculations if True
 */
  ((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.SetBodyFixed(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody *)__pyx_v_self->ChBody), 0, 0);

  /* "mbd/ChRigidBody.pyx":304
 *         self.adams_vel = np.zeros((5, 3))
 *         self.ChBody.SetBodyFixed(False)
 *         self.Aij = np.zeros((6, 6))  # added mass array             # <<<<<<<<<<<<<<
 *         self.applyAddedMass = True  # will apply added mass in Chrono calculations if True
 *         # if self.nd is None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Aij);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Aij));
  __pyx_v_self->Aij = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":305
 *         self.ChBody.SetBodyFixed(False)
 *         self.Aij = np.zeros((6, 6))  # added mass array
 *         self.applyAddedMass = True  # will apply added mass in Chrono calculations if True             # <<<<<<<<<<<<<<
 *         # if self.nd is None:
 *         #     assert nd is not None, "must set nd if SpatialTools.Shape is not passed"
 */
  __pyx_v_self->applyAddedMass = 1;

  /* "mbd/ChRigidBody.pyx":267
 *       bool applyAddedMass  # will apply added mass if True (default)
 * 
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   ProtChSystem system,
 *                   shape=None,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":310
 *         #     self.nd = nd
 * 
 *     def attachShape(self, shape):             # <<<<<<<<<<<<<<
 *         """Attach proteus.SpatialTools shape to body.
 *         Used for automatic calculation of external forces from Proteus.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3attachShape(PyObject *__pyx_v_self, PyObject *__pyx_v_shape); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_2attachShape[] = "Attach proteus.SpatialTools shape to body.\n        Used for automatic calculation of external forces from Proteus.\n        Called automatically when creating a body and passing a shape\n        instance.\n\n        Parameters\n        ----------\n        shape: SpatialTools.Shape\n            instance of shape from proteus.SpatialTools or\n            proteus.mprans.SpatialTools\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3attachShape(PyObject *__pyx_v_self, PyObject *__pyx_v_shape) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachShape (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2attachShape(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_shape));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2attachShape(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_shape) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("attachShape", 0);

  /* "mbd/ChRigidBody.pyx":322
 *             proteus.mprans.SpatialTools
 *         """
 *         if shape is not None:             # <<<<<<<<<<<<<<
 *             assert self.Shape is None, 'Shape '+self.Shape.name+' was already attached'
 *             self.Shape = shape
 */
  __pyx_t_1 = (__pyx_v_shape != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":323
 *         """
 *         if shape is not None:
 *             assert self.Shape is None, 'Shape '+self.Shape.name+' was already attached'             # <<<<<<<<<<<<<<
 *             self.Shape = shape
 *             if 'ChRigidBody' not in shape.auxiliaryVariables:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = (__pyx_v_self->Shape == Py_None);
      if (unlikely(!(__pyx_t_2 != 0))) {
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->Shape, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Shape, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 323, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_was_already_attached); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_Pack(1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 323, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        PyErr_SetObject(PyExc_AssertionError, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 323, __pyx_L1_error)
      }
    }
    #endif

    /* "mbd/ChRigidBody.pyx":324
 *         if shape is not None:
 *             assert self.Shape is None, 'Shape '+self.Shape.name+' was already attached'
 *             self.Shape = shape             # <<<<<<<<<<<<<<
 *             if 'ChRigidBody' not in shape.auxiliaryVariables:
 *                 shape.auxiliaryVariables['ChRigidBody'] = self
 */
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    __Pyx_GOTREF(__pyx_v_self->Shape);
    __Pyx_DECREF(__pyx_v_self->Shape);
    __pyx_v_self->Shape = __pyx_v_shape;

    /* "mbd/ChRigidBody.pyx":325
 *             assert self.Shape is None, 'Shape '+self.Shape.name+' was already attached'
 *             self.Shape = shape
 *             if 'ChRigidBody' not in shape.auxiliaryVariables:             # <<<<<<<<<<<<<<
 *                 shape.auxiliaryVariables['ChRigidBody'] = self
 *                 self.setName(shape.name)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_shape, __pyx_n_s_auxiliaryVariables); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_ChRigidBody, __pyx_t_4, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "mbd/ChRigidBody.pyx":326
 *             self.Shape = shape
 *             if 'ChRigidBody' not in shape.auxiliaryVariables:
 *                 shape.auxiliaryVariables['ChRigidBody'] = self             # <<<<<<<<<<<<<<
 *                 self.setName(shape.name)
 *             self.nd = shape.Domain.nd
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_shape, __pyx_n_s_auxiliaryVariables); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(PyObject_SetItem(__pyx_t_4, __pyx_n_s_ChRigidBody, ((PyObject *)__pyx_v_self)) < 0)) __PYX_ERR(0, 326, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":327
 *             if 'ChRigidBody' not in shape.auxiliaryVariables:
 *                 shape.auxiliaryVariables['ChRigidBody'] = self
 *                 self.setName(shape.name)             # <<<<<<<<<<<<<<
 *             self.nd = shape.Domain.nd
 *             self.SetPosition(shape.barycenter)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setName); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_shape, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":325
 *             assert self.Shape is None, 'Shape '+self.Shape.name+' was already attached'
 *             self.Shape = shape
 *             if 'ChRigidBody' not in shape.auxiliaryVariables:             # <<<<<<<<<<<<<<
 *                 shape.auxiliaryVariables['ChRigidBody'] = self
 *                 self.setName(shape.name)
 */
    }

    /* "mbd/ChRigidBody.pyx":328
 *                 shape.auxiliaryVariables['ChRigidBody'] = self
 *                 self.setName(shape.name)
 *             self.nd = shape.Domain.nd             # <<<<<<<<<<<<<<
 *             self.SetPosition(shape.barycenter)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_shape, __pyx_n_s_Domain); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_nd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->nd = __pyx_t_8;

    /* "mbd/ChRigidBody.pyx":329
 *                 self.setName(shape.name)
 *             self.nd = shape.Domain.nd
 *             self.SetPosition(shape.barycenter)             # <<<<<<<<<<<<<<
 * 
 *     def SetBodyFixed(self, bool state):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_SetPosition); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_shape, __pyx_n_s_barycenter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":322
 *             proteus.mprans.SpatialTools
 *         """
 *         if shape is not None:             # <<<<<<<<<<<<<<
 *             assert self.Shape is None, 'Shape '+self.Shape.name+' was already attached'
 *             self.Shape = shape
 */
  }

  /* "mbd/ChRigidBody.pyx":310
 *         #     self.nd = nd
 * 
 *     def attachShape(self, shape):             # <<<<<<<<<<<<<<
 *         """Attach proteus.SpatialTools shape to body.
 *         Used for automatic calculation of external forces from Proteus.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.attachShape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":331
 *             self.SetPosition(shape.barycenter)
 * 
 *     def SetBodyFixed(self, bool state):             # <<<<<<<<<<<<<<
 *         """Fix body in space
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5SetBodyFixed(PyObject *__pyx_v_self, PyObject *__pyx_arg_state); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_4SetBodyFixed[] = "Fix body in space\n\n        Parameters\n        ----------\n        state: bool\n            body fixed if True, body free if False\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5SetBodyFixed(PyObject *__pyx_v_self, PyObject *__pyx_arg_state) {
  bool __pyx_v_state;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetBodyFixed (wrapper)", 0);
  assert(__pyx_arg_state); {
    __pyx_v_state = __Pyx_PyObject_IsTrue(__pyx_arg_state); if (unlikely((__pyx_v_state == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 331, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.SetBodyFixed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4SetBodyFixed(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((bool)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4SetBodyFixed(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, bool __pyx_v_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetBodyFixed", 0);

  /* "mbd/ChRigidBody.pyx":339
 *             body fixed if True, body free if False
 *         """
 *         deref(self.thisptr.body).SetBodyFixed(state)             # <<<<<<<<<<<<<<
 * 
 *     def setWidth2D(self, width):
 */
  try {
    (*__pyx_v_self->thisptr->body).SetBodyFixed(__pyx_v_state);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 339, __pyx_L1_error)
  }

  /* "mbd/ChRigidBody.pyx":331
 *             self.SetPosition(shape.barycenter)
 * 
 *     def SetBodyFixed(self, bool state):             # <<<<<<<<<<<<<<
 *         """Fix body in space
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.SetBodyFixed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":341
 *         deref(self.thisptr.body).SetBodyFixed(state)
 * 
 *     def setWidth2D(self, width):             # <<<<<<<<<<<<<<
 *         """Sets width of 2D body (for forces and moments calculation)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_7setWidth2D(PyObject *__pyx_v_self, PyObject *__pyx_v_width); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_6setWidth2D[] = "Sets width of 2D body (for forces and moments calculation)\n\n        Parameters\n        ----------\n        width: float\n            width of the body\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_7setWidth2D(PyObject *__pyx_v_self, PyObject *__pyx_v_width) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setWidth2D (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6setWidth2D(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6setWidth2D(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("setWidth2D", 0);

  /* "mbd/ChRigidBody.pyx":349
 *             width of the body
 *         """
 *         self.width_2D = width             # <<<<<<<<<<<<<<
 * 
 *     def set_indices(self, i_start, i_end):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_width); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_v_self->width_2D = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":341
 *         deref(self.thisptr.body).SetBodyFixed(state)
 * 
 *     def setWidth2D(self, width):             # <<<<<<<<<<<<<<
 *         """Sets width of 2D body (for forces and moments calculation)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setWidth2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":351
 *         self.width_2D = width
 * 
 *     def set_indices(self, i_start, i_end):             # <<<<<<<<<<<<<<
 *         """Sets the flags of the boundaries of the body
 *         numbers must be gloabal (from domain.segmentFlags or
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9set_indices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_8set_indices[] = "Sets the flags of the boundaries of the body\n        numbers must be gloabal (from domain.segmentFlags or\n        domain.facetFlags) and a range from i_start to i_end.\n\n        Parameters\n        ----------\n        i_start: int\n            first global flag of body boundaries\n        i_end: int\n            last global flag (+1) of body boundaries\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9set_indices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_i_start = 0;
  PyObject *__pyx_v_i_end = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_indices (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i_start,&__pyx_n_s_i_end,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i_start)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i_end)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_indices", 1, 2, 2, 1); __PYX_ERR(0, 351, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_indices") < 0)) __PYX_ERR(0, 351, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_i_start = values[0];
    __pyx_v_i_end = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_indices", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 351, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.set_indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8set_indices(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_i_start, __pyx_v_i_end);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8set_indices(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_i_start, PyObject *__pyx_v_i_end) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_indices", 0);

  /* "mbd/ChRigidBody.pyx":363
 *             last global flag (+1) of body boundaries
 *         """
 *         self.i_start = i_start             # <<<<<<<<<<<<<<
 *         self.i_end = i_end
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_i_start); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L1_error)
  __pyx_v_self->i_start = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":364
 *         """
 *         self.i_start = i_start
 *         self.i_end = i_end             # <<<<<<<<<<<<<<
 * 
 *     def attachAuxiliaryVariables(self,avDict):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_i_end); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 364, __pyx_L1_error)
  __pyx_v_self->i_end = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":351
 *         self.width_2D = width
 * 
 *     def set_indices(self, i_start, i_end):             # <<<<<<<<<<<<<<
 *         """Sets the flags of the boundaries of the body
 *         numbers must be gloabal (from domain.segmentFlags or
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.set_indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":366
 *         self.i_end = i_end
 * 
 *     def attachAuxiliaryVariables(self,avDict):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11attachAuxiliaryVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_avDict); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11attachAuxiliaryVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_avDict) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachAuxiliaryVariables (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10attachAuxiliaryVariables(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_avDict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10attachAuxiliaryVariables(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_avDict) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachAuxiliaryVariables", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":369
 *         pass
 * 
 *     def setInertiaXX(self, np.ndarray inertia):             # <<<<<<<<<<<<<<
 *         self.thisptr.setInertiaXX(<double*> inertia.data)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13setInertiaXX(PyObject *__pyx_v_self, PyObject *__pyx_v_inertia); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13setInertiaXX(PyObject *__pyx_v_self, PyObject *__pyx_v_inertia) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setInertiaXX (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inertia), __pyx_ptype_5numpy_ndarray, 1, "inertia", 0))) __PYX_ERR(0, 369, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12setInertiaXX(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyArrayObject *)__pyx_v_inertia));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12setInertiaXX(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_inertia) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setInertiaXX", 0);

  /* "mbd/ChRigidBody.pyx":370
 * 
 *     def setInertiaXX(self, np.ndarray inertia):
 *         self.thisptr.setInertiaXX(<double*> inertia.data)             # <<<<<<<<<<<<<<
 * 
 *     def setInitialRot(self, rot):
 */
  __pyx_v_self->thisptr->setInertiaXX(((double *)__pyx_v_inertia->data));

  /* "mbd/ChRigidBody.pyx":369
 *         pass
 * 
 *     def setInertiaXX(self, np.ndarray inertia):             # <<<<<<<<<<<<<<
 *         self.thisptr.setInertiaXX(<double*> inertia.data)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":372
 *         self.thisptr.setInertiaXX(<double*> inertia.data)
 * 
 *     def setInitialRot(self, rot):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray zeros = np.zeros(3)
 *         self.rotation_init = rot
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_15setInitialRot(PyObject *__pyx_v_self, PyObject *__pyx_v_rot); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_15setInitialRot(PyObject *__pyx_v_self, PyObject *__pyx_v_rot) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setInitialRot (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14setInitialRot(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_rot));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14setInitialRot(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_rot) {
  PyArrayObject *__pyx_v_zeros = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("setInitialRot", 0);

  /* "mbd/ChRigidBody.pyx":373
 * 
 *     def setInitialRot(self, rot):
 *         cdef np.ndarray zeros = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.rotation_init = rot
 *         self.thisptr.prestep(<double*> zeros.data,
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 373, __pyx_L1_error)
  __pyx_v_zeros = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":374
 *     def setInitialRot(self, rot):
 *         cdef np.ndarray zeros = np.zeros(3)
 *         self.rotation_init = rot             # <<<<<<<<<<<<<<
 *         self.thisptr.prestep(<double*> zeros.data,
 *                              <double*> zeros.data)
 */
  if (!(likely(((__pyx_v_rot) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rot, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 374, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_rot;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rotation_init);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotation_init));
  __pyx_v_self->rotation_init = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":375
 *         cdef np.ndarray zeros = np.zeros(3)
 *         self.rotation_init = rot
 *         self.thisptr.prestep(<double*> zeros.data,             # <<<<<<<<<<<<<<
 *                              <double*> zeros.data)
 *         if self.rotation_init is not None:
 */
  __pyx_v_self->thisptr->prestep(((double *)__pyx_v_zeros->data), ((double *)__pyx_v_zeros->data));

  /* "mbd/ChRigidBody.pyx":377
 *         self.thisptr.prestep(<double*> zeros.data,
 *                              <double*> zeros.data)
 *         if self.rotation_init is not None:             # <<<<<<<<<<<<<<
 *             Profiling.logEvent("$$$$$ SETTING ROT")
 *             self.thisptr.setRotation(<double*> self.rotation_init.data)
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_self->rotation_init) != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "mbd/ChRigidBody.pyx":378
 *                              <double*> zeros.data)
 *         if self.rotation_init is not None:
 *             Profiling.logEvent("$$$$$ SETTING ROT")             # <<<<<<<<<<<<<<
 *             self.thisptr.setRotation(<double*> self.rotation_init.data)
 *         self.thisptr.poststep()
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":379
 *         if self.rotation_init is not None:
 *             Profiling.logEvent("$$$$$ SETTING ROT")
 *             self.thisptr.setRotation(<double*> self.rotation_init.data)             # <<<<<<<<<<<<<<
 *         self.thisptr.poststep()
 * 
 */
    __pyx_v_self->thisptr->setRotation(((double *)__pyx_v_self->rotation_init->data));

    /* "mbd/ChRigidBody.pyx":377
 *         self.thisptr.prestep(<double*> zeros.data,
 *                              <double*> zeros.data)
 *         if self.rotation_init is not None:             # <<<<<<<<<<<<<<
 *             Profiling.logEvent("$$$$$ SETTING ROT")
 *             self.thisptr.setRotation(<double*> self.rotation_init.data)
 */
  }

  /* "mbd/ChRigidBody.pyx":380
 *             Profiling.logEvent("$$$$$ SETTING ROT")
 *             self.thisptr.setRotation(<double*> self.rotation_init.data)
 *         self.thisptr.poststep()             # <<<<<<<<<<<<<<
 * 
 *     def hxyz(self, np.ndarray x, double t, debug=False):
 */
  __pyx_v_self->thisptr->poststep();

  /* "mbd/ChRigidBody.pyx":372
 *         self.thisptr.setInertiaXX(<double*> inertia.data)
 * 
 *     def setInitialRot(self, rot):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray zeros = np.zeros(3)
 *         self.rotation_init = rot
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setInitialRot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_zeros);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":382
 *         self.thisptr.poststep()
 * 
 *     def hxyz(self, np.ndarray x, double t, debug=False):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray h
 *         cdef np.ndarray xx
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17hxyz(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17hxyz(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_x = 0;
  double __pyx_v_t;
  PyObject *__pyx_v_debug = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hxyz (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,&__pyx_n_s_debug,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hxyz", 0, 2, 3, 1); __PYX_ERR(0, 382, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_debug);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hxyz") < 0)) __PYX_ERR(0, 382, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = ((PyArrayObject *)values[0]);
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L3_error)
    __pyx_v_debug = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hxyz", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 382, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hxyz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16hxyz(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_x, __pyx_v_t, __pyx_v_debug);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16hxyz(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t, PyObject *__pyx_v_debug) {
  PyArrayObject *__pyx_v_h = 0;
  PyArrayObject *__pyx_v_xx = 0;
  double __pyx_v_ang;
  PyArrayObject *__pyx_v_d_rot = 0;
  PyArrayObject *__pyx_v_d_rot_last = 0;
  PyArrayObject *__pyx_v_h_body = 0;
  ChVector<double>  __pyx_v_h_body_vec;
  double __pyx_v_ang_last;
  CYTHON_UNUSED PyObject *__pyx_v_comm = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  double __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("hxyz", 0);

  /* "mbd/ChRigidBody.pyx":390
 *         cdef np.ndarray h_body  # displacement from body
 *         cdef ch.ChVector h_body_vec
 *         h = np.zeros(3)             # <<<<<<<<<<<<<<
 *         if self.predicted is False:
 *             self.prediction()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 390, __pyx_L1_error)
  __pyx_v_h = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":391
 *         cdef ch.ChVector h_body_vec
 *         h = np.zeros(3)
 *         if self.predicted is False:             # <<<<<<<<<<<<<<
 *             self.prediction()
 *         # if self.ProtChSystem.thisptr.system.GetChTime() > 0.0003:
 */
  __pyx_t_3 = ((__pyx_v_self->predicted == 0) != 0);
  if (__pyx_t_3) {

    /* "mbd/ChRigidBody.pyx":392
 *         h = np.zeros(3)
 *         if self.predicted is False:
 *             self.prediction()             # <<<<<<<<<<<<<<
 *         # if self.ProtChSystem.thisptr.system.GetChTime() > 0.0003:
 *         # if self.ProtChSystem.step_nb > self.ProtChSystem.step_start:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_prediction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":391
 *         cdef ch.ChVector h_body_vec
 *         h = np.zeros(3)
 *         if self.predicted is False:             # <<<<<<<<<<<<<<
 *             self.prediction()
 *         # if self.ProtChSystem.thisptr.system.GetChTime() > 0.0003:
 */
  }

  /* "mbd/ChRigidBody.pyx":396
 *         # if self.ProtChSystem.step_nb > self.ProtChSystem.step_start:
 *             # self.ChBody.SetBodyFixed(False)
 *         if self.ProtChSystem.scheme == "CSS":             # <<<<<<<<<<<<<<
 *             h_body_vec = self.thisptr.hxyz(<double*> x.data, t)
 *             h_body = pych.ChVector_to_npArray(h_body_vec)
 */
  __pyx_t_3 = ((__pyx_v_self->ProtChSystem->scheme == ((char *)"CSS")) != 0);
  if (__pyx_t_3) {

    /* "mbd/ChRigidBody.pyx":397
 *             # self.ChBody.SetBodyFixed(False)
 *         if self.ProtChSystem.scheme == "CSS":
 *             h_body_vec = self.thisptr.hxyz(<double*> x.data, t)             # <<<<<<<<<<<<<<
 *             h_body = pych.ChVector_to_npArray(h_body_vec)
 *             h += h_body
 */
    __pyx_v_h_body_vec = __pyx_v_self->thisptr->hxyz(((double *)__pyx_v_x->data), __pyx_v_t);

    /* "mbd/ChRigidBody.pyx":398
 *         if self.ProtChSystem.scheme == "CSS":
 *             h_body_vec = self.thisptr.hxyz(<double*> x.data, t)
 *             h_body = pych.ChVector_to_npArray(h_body_vec)             # <<<<<<<<<<<<<<
 *             h += h_body
 *         elif self.ProtChSystem.scheme == "ISS":
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_7proteus_3mbd_12pyChronoCore_ChVector_to_npArray(((ChVector<double>  &)__pyx_v_h_body_vec))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_h_body = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":399
 *             h_body_vec = self.thisptr.hxyz(<double*> x.data, t)
 *             h_body = pych.ChVector_to_npArray(h_body_vec)
 *             h += h_body             # <<<<<<<<<<<<<<
 *         elif self.ProtChSystem.scheme == "ISS":
 *             # remove previous prediction
 */
    __pyx_t_1 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_h), ((PyObject *)__pyx_v_h_body)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":396
 *         # if self.ProtChSystem.step_nb > self.ProtChSystem.step_start:
 *             # self.ChBody.SetBodyFixed(False)
 *         if self.ProtChSystem.scheme == "CSS":             # <<<<<<<<<<<<<<
 *             h_body_vec = self.thisptr.hxyz(<double*> x.data, t)
 *             h_body = pych.ChVector_to_npArray(h_body_vec)
 */
    goto __pyx_L4;
  }

  /* "mbd/ChRigidBody.pyx":400
 *             h_body = pych.ChVector_to_npArray(h_body_vec)
 *             h += h_body
 *         elif self.ProtChSystem.scheme == "ISS":             # <<<<<<<<<<<<<<
 *             # remove previous prediction
 *             # translate back first
 */
  __pyx_t_3 = ((__pyx_v_self->ProtChSystem->scheme == ((char *)"ISS")) != 0);
  if (__pyx_t_3) {

    /* "mbd/ChRigidBody.pyx":403
 *             # remove previous prediction
 *             # translate back first
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("$$$$$$$$$$$$$$$$$$")
 *                 print("x: ", x)
 */
    __pyx_t_3 = (__pyx_v_debug == Py_True);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":404
 *             # translate back first
 *             if debug is True:
 *                 print("$$$$$$$$$$$$$$$$$$")             # <<<<<<<<<<<<<<
 *                 print("x: ", x)
 *             # d_tra_last = -self.velocity_last*dt_half_last
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s__23) < 0) __PYX_ERR(0, 404, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":405
 *             if debug is True:
 *                 print("$$$$$$$$$$$$$$$$$$")
 *                 print("x: ", x)             # <<<<<<<<<<<<<<
 *             # d_tra_last = -self.velocity_last*dt_half_last
 *             # h += d_tra_last
 */
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_s_x_2);
      __Pyx_GIVEREF(__pyx_kp_s_x_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_x_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_x));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
      PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_x));
      if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":403
 *             # remove previous prediction
 *             # translate back first
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("$$$$$$$$$$$$$$$$$$")
 *                 print("x: ", x)
 */
    }

    /* "mbd/ChRigidBody.pyx":408
 *             # d_tra_last = -self.velocity_last*dt_half_last
 *             # h += d_tra_last
 *             h += -self.h_predict_last             # <<<<<<<<<<<<<<
 *             if debug is True:
 *                 print("h_predict_last: ", self.h_predict_last)
 */
    __pyx_t_1 = PyNumber_Negative(((PyObject *)__pyx_v_self->h_predict_last)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_h), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":409
 *             # h += d_tra_last
 *             h += -self.h_predict_last
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("h_predict_last: ", self.h_predict_last)
 *                 print("h_predict: ", self.h_predict)
 */
    __pyx_t_5 = (__pyx_v_debug == Py_True);
    __pyx_t_3 = (__pyx_t_5 != 0);
    if (__pyx_t_3) {

      /* "mbd/ChRigidBody.pyx":410
 *             h += -self.h_predict_last
 *             if debug is True:
 *                 print("h_predict_last: ", self.h_predict_last)             # <<<<<<<<<<<<<<
 *                 print("h_predict: ", self.h_predict)
 *                 print("h_ang_predict_last: ", self.h_ang_predict_last)
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_h_predict_last);
      __Pyx_GIVEREF(__pyx_kp_s_h_predict_last);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_h_predict_last);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->h_predict_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->h_predict_last));
      PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->h_predict_last));
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 410, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":411
 *             if debug is True:
 *                 print("h_predict_last: ", self.h_predict_last)
 *                 print("h_predict: ", self.h_predict)             # <<<<<<<<<<<<<<
 *                 print("h_ang_predict_last: ", self.h_ang_predict_last)
 *                 print("h_ang_predict: ", self.h_ang_predict)
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_h_predict);
      __Pyx_GIVEREF(__pyx_kp_s_h_predict);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_h_predict);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->h_predict));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->h_predict));
      PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->h_predict));
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":412
 *                 print("h_predict_last: ", self.h_predict_last)
 *                 print("h_predict: ", self.h_predict)
 *                 print("h_ang_predict_last: ", self.h_ang_predict_last)             # <<<<<<<<<<<<<<
 *                 print("h_ang_predict: ", self.h_ang_predict)
 *                 print("h_ang_vel_predict_last: ", self.h_ang_vel_predict_last)
 */
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->h_ang_predict_last); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_s_h_ang_predict_last);
      __Pyx_GIVEREF(__pyx_kp_s_h_ang_predict_last);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_h_ang_predict_last);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":413
 *                 print("h_predict: ", self.h_predict)
 *                 print("h_ang_predict_last: ", self.h_ang_predict_last)
 *                 print("h_ang_predict: ", self.h_ang_predict)             # <<<<<<<<<<<<<<
 *                 print("h_ang_vel_predict_last: ", self.h_ang_vel_predict_last)
 *                 print("h_ang_vel_predict: ", self.h_ang_vel_predict)
 */
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->h_ang_predict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_h_ang_predict);
      __Pyx_GIVEREF(__pyx_kp_s_h_ang_predict);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_h_ang_predict);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":414
 *                 print("h_ang_predict_last: ", self.h_ang_predict_last)
 *                 print("h_ang_predict: ", self.h_ang_predict)
 *                 print("h_ang_vel_predict_last: ", self.h_ang_vel_predict_last)             # <<<<<<<<<<<<<<
 *                 print("h_ang_vel_predict: ", self.h_ang_vel_predict)
 *             # rotate back
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_h_ang_vel_predict_last);
      __Pyx_GIVEREF(__pyx_kp_s_h_ang_vel_predict_last);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_h_ang_vel_predict_last);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->h_ang_vel_predict_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->h_ang_vel_predict_last));
      PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->h_ang_vel_predict_last));
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":415
 *                 print("h_ang_predict: ", self.h_ang_predict)
 *                 print("h_ang_vel_predict_last: ", self.h_ang_vel_predict_last)
 *                 print("h_ang_vel_predict: ", self.h_ang_vel_predict)             # <<<<<<<<<<<<<<
 *             # rotate back
 *             # ang_last = -self.ang_vel_norm_last*dt_half_last
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_h_ang_vel_predict);
      __Pyx_GIVEREF(__pyx_kp_s_h_ang_vel_predict);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_h_ang_vel_predict);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->h_ang_vel_predict));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->h_ang_vel_predict));
      PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->h_ang_vel_predict));
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":409
 *             # h += d_tra_last
 *             h += -self.h_predict_last
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("h_predict_last: ", self.h_predict_last)
 *                 print("h_predict: ", self.h_predict)
 */
    }

    /* "mbd/ChRigidBody.pyx":418
 *             # rotate back
 *             # ang_last = -self.ang_vel_norm_last*dt_half_last
 *             ang_last = -self.h_ang_predict_last             # <<<<<<<<<<<<<<
 *             if ang > 0:
 *                 d_rot_last = (st.rotation3D(points=x+h,  # (translated back)
 */
    __pyx_v_ang_last = (-__pyx_v_self->h_ang_predict_last);

    /* "mbd/ChRigidBody.pyx":419
 *             # ang_last = -self.ang_vel_norm_last*dt_half_last
 *             ang_last = -self.h_ang_predict_last
 *             if ang > 0:             # <<<<<<<<<<<<<<
 *                 d_rot_last = (st.rotation3D(points=x+h,  # (translated back)
 *                                             rot=ang_last,
 */
    __pyx_t_3 = ((__pyx_v_ang > 0.0) != 0);
    if (__pyx_t_3) {

      /* "mbd/ChRigidBody.pyx":420
 *             ang_last = -self.h_ang_predict_last
 *             if ang > 0:
 *                 d_rot_last = (st.rotation3D(points=x+h,  # (translated back)             # <<<<<<<<<<<<<<
 *                                             rot=ang_last,
 *                                             axis=self.h_ang_vel_predict_last,
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_rotation3D); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_h)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_points, __pyx_t_4) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":421
 *             if ang > 0:
 *                 d_rot_last = (st.rotation3D(points=x+h,  # (translated back)
 *                                             rot=ang_last,             # <<<<<<<<<<<<<<
 *                                             axis=self.h_ang_vel_predict_last,
 *                                             pivot=self.position_last)
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ang_last); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rot, __pyx_t_4) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":422
 *                 d_rot_last = (st.rotation3D(points=x+h,  # (translated back)
 *                                             rot=ang_last,
 *                                             axis=self.h_ang_vel_predict_last,             # <<<<<<<<<<<<<<
 *                                             pivot=self.position_last)
 *                             -x+h)
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_axis, ((PyObject *)__pyx_v_self->h_ang_vel_predict_last)) < 0) __PYX_ERR(0, 420, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":423
 *                                             rot=ang_last,
 *                                             axis=self.h_ang_vel_predict_last,
 *                                             pivot=self.position_last)             # <<<<<<<<<<<<<<
 *                             -x+h)
 *                 h += d_rot_last
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_pivot, ((PyObject *)__pyx_v_self->position_last)) < 0) __PYX_ERR(0, 420, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":420
 *             ang_last = -self.h_ang_predict_last
 *             if ang > 0:
 *                 d_rot_last = (st.rotation3D(points=x+h,  # (translated back)             # <<<<<<<<<<<<<<
 *                                             rot=ang_last,
 *                                             axis=self.h_ang_vel_predict_last,
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":424
 *                                             axis=self.h_ang_vel_predict_last,
 *                                             pivot=self.position_last)
 *                             -x+h)             # <<<<<<<<<<<<<<
 *                 h += d_rot_last
 *             # add rigid body displacement
 */
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, ((PyObject *)__pyx_v_x)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_2, ((PyObject *)__pyx_v_h)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 424, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 424, __pyx_L1_error)
      __pyx_v_d_rot_last = ((PyArrayObject *)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":425
 *                                             pivot=self.position_last)
 *                             -x+h)
 *                 h += d_rot_last             # <<<<<<<<<<<<<<
 *             # add rigid body displacement
 *             xx = x+h # previous position of body
 */
      __pyx_t_4 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_h), ((PyObject *)__pyx_v_d_rot_last)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":419
 *             # ang_last = -self.ang_vel_norm_last*dt_half_last
 *             ang_last = -self.h_ang_predict_last
 *             if ang > 0:             # <<<<<<<<<<<<<<
 *                 d_rot_last = (st.rotation3D(points=x+h,  # (translated back)
 *                                             rot=ang_last,
 */
    }

    /* "mbd/ChRigidBody.pyx":427
 *                 h += d_rot_last
 *             # add rigid body displacement
 *             xx = x+h # previous position of body             # <<<<<<<<<<<<<<
 *             if debug is True:
 *                 print("x_old: ", x+h)
 */
    __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_h)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 427, __pyx_L1_error)
    __pyx_v_xx = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":428
 *             # add rigid body displacement
 *             xx = x+h # previous position of body
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("x_old: ", x+h)
 *                 print("F_applied: ", self.F_applied)
 */
    __pyx_t_3 = (__pyx_v_debug == Py_True);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":429
 *             xx = x+h # previous position of body
 *             if debug is True:
 *                 print("x_old: ", x+h)             # <<<<<<<<<<<<<<
 *                 print("F_applied: ", self.F_applied)
 *             h_body_vec = self.thisptr.hxyz(<double*> xx.data, t)
 */
      __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_h)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_x_old);
      __Pyx_GIVEREF(__pyx_kp_s_x_old);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_x_old);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":430
 *             if debug is True:
 *                 print("x_old: ", x+h)
 *                 print("F_applied: ", self.F_applied)             # <<<<<<<<<<<<<<
 *             h_body_vec = self.thisptr.hxyz(<double*> xx.data, t)
 *             h_body = pych.ChVector_to_npArray(h_body_vec)
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_F_applied);
      __Pyx_GIVEREF(__pyx_kp_s_F_applied);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_F_applied);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->F_applied));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->F_applied));
      PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->F_applied));
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":428
 *             # add rigid body displacement
 *             xx = x+h # previous position of body
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("x_old: ", x+h)
 *                 print("F_applied: ", self.F_applied)
 */
    }

    /* "mbd/ChRigidBody.pyx":431
 *                 print("x_old: ", x+h)
 *                 print("F_applied: ", self.F_applied)
 *             h_body_vec = self.thisptr.hxyz(<double*> xx.data, t)             # <<<<<<<<<<<<<<
 *             h_body = pych.ChVector_to_npArray(h_body_vec)
 *             h += h_body
 */
    __pyx_v_h_body_vec = __pyx_v_self->thisptr->hxyz(((double *)__pyx_v_xx->data), __pyx_v_t);

    /* "mbd/ChRigidBody.pyx":432
 *                 print("F_applied: ", self.F_applied)
 *             h_body_vec = self.thisptr.hxyz(<double*> xx.data, t)
 *             h_body = pych.ChVector_to_npArray(h_body_vec)             # <<<<<<<<<<<<<<
 *             h += h_body
 *             # add current prediction
 */
    __pyx_t_2 = ((PyObject *)__pyx_f_7proteus_3mbd_12pyChronoCore_ChVector_to_npArray(((ChVector<double>  &)__pyx_v_h_body_vec))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_h_body = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":433
 *             h_body_vec = self.thisptr.hxyz(<double*> xx.data, t)
 *             h_body = pych.ChVector_to_npArray(h_body_vec)
 *             h += h_body             # <<<<<<<<<<<<<<
 *             # add current prediction
 *             # rotate first
 */
    __pyx_t_2 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_h), ((PyObject *)__pyx_v_h_body)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":437
 *             # rotate first
 *             # ang = self.ang_vel_norm*dt_half
 *             ang = self.h_ang_predict             # <<<<<<<<<<<<<<
 *             if debug is True:
 *                 print("x_body: ", x+h)
 */
    __pyx_t_6 = __pyx_v_self->h_ang_predict;
    __pyx_v_ang = __pyx_t_6;

    /* "mbd/ChRigidBody.pyx":438
 *             # ang = self.ang_vel_norm*dt_half
 *             ang = self.h_ang_predict
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("x_body: ", x+h)
 *                 print("pos_body: ", self.ChBody.GetPos())
 */
    __pyx_t_5 = (__pyx_v_debug == Py_True);
    __pyx_t_3 = (__pyx_t_5 != 0);
    if (__pyx_t_3) {

      /* "mbd/ChRigidBody.pyx":439
 *             ang = self.h_ang_predict
 *             if debug is True:
 *                 print("x_body: ", x+h)             # <<<<<<<<<<<<<<
 *                 print("pos_body: ", self.ChBody.GetPos())
 *             if ang > 0:
 */
      __pyx_t_2 = PyNumber_Add(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_h)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_kp_s_x_body);
      __Pyx_GIVEREF(__pyx_kp_s_x_body);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_x_body);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":440
 *             if debug is True:
 *                 print("x_body: ", x+h)
 *                 print("pos_body: ", self.ChBody.GetPos())             # <<<<<<<<<<<<<<
 *             if ang > 0:
 *                 d_rot = (st.rotation3D(points=x+h,
 */
      __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.GetPos(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_pos_body);
      __Pyx_GIVEREF(__pyx_kp_s_pos_body);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_pos_body);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":438
 *             # ang = self.ang_vel_norm*dt_half
 *             ang = self.h_ang_predict
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("x_body: ", x+h)
 *                 print("pos_body: ", self.ChBody.GetPos())
 */
    }

    /* "mbd/ChRigidBody.pyx":441
 *                 print("x_body: ", x+h)
 *                 print("pos_body: ", self.ChBody.GetPos())
 *             if ang > 0:             # <<<<<<<<<<<<<<
 *                 d_rot = (st.rotation3D(points=x+h,
 *                                     rot=ang,
 */
    __pyx_t_3 = ((__pyx_v_ang > 0.0) != 0);
    if (__pyx_t_3) {

      /* "mbd/ChRigidBody.pyx":442
 *                 print("pos_body: ", self.ChBody.GetPos())
 *             if ang > 0:
 *                 d_rot = (st.rotation3D(points=x+h,             # <<<<<<<<<<<<<<
 *                                     rot=ang,
 *                                     axis=self.h_ang_vel_predict,
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_rotation3D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_h)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_points, __pyx_t_1) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":443
 *             if ang > 0:
 *                 d_rot = (st.rotation3D(points=x+h,
 *                                     rot=ang,             # <<<<<<<<<<<<<<
 *                                     axis=self.h_ang_vel_predict,
 *                                     pivot=self.position)
 */
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_ang); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rot, __pyx_t_1) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":444
 *                 d_rot = (st.rotation3D(points=x+h,
 *                                     rot=ang,
 *                                     axis=self.h_ang_vel_predict,             # <<<<<<<<<<<<<<
 *                                     pivot=self.position)
 *                         -x+h)
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_axis, ((PyObject *)__pyx_v_self->h_ang_vel_predict)) < 0) __PYX_ERR(0, 442, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":445
 *                                     rot=ang,
 *                                     axis=self.h_ang_vel_predict,
 *                                     pivot=self.position)             # <<<<<<<<<<<<<<
 *                         -x+h)
 *                 h += d_rot
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_pivot, ((PyObject *)__pyx_v_self->position)) < 0) __PYX_ERR(0, 442, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":442
 *                 print("pos_body: ", self.ChBody.GetPos())
 *             if ang > 0:
 *                 d_rot = (st.rotation3D(points=x+h,             # <<<<<<<<<<<<<<
 *                                     rot=ang,
 *                                     axis=self.h_ang_vel_predict,
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":446
 *                                     axis=self.h_ang_vel_predict,
 *                                     pivot=self.position)
 *                         -x+h)             # <<<<<<<<<<<<<<
 *                 h += d_rot
 *             if debug is True:
 */
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, ((PyObject *)__pyx_v_x)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_2, ((PyObject *)__pyx_v_h)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 446, __pyx_L1_error)
      __pyx_v_d_rot = ((PyArrayObject *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":447
 *                                     pivot=self.position)
 *                         -x+h)
 *                 h += d_rot             # <<<<<<<<<<<<<<
 *             if debug is True:
 *                 print("x_new_rot: ", x+h)
 */
      __pyx_t_1 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_h), ((PyObject *)__pyx_v_d_rot)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 447, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":441
 *                 print("x_body: ", x+h)
 *                 print("pos_body: ", self.ChBody.GetPos())
 *             if ang > 0:             # <<<<<<<<<<<<<<
 *                 d_rot = (st.rotation3D(points=x+h,
 *                                     rot=ang,
 */
    }

    /* "mbd/ChRigidBody.pyx":448
 *                         -x+h)
 *                 h += d_rot
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("x_new_rot: ", x+h)
 *             # translate
 */
    __pyx_t_3 = (__pyx_v_debug == Py_True);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":449
 *                 h += d_rot
 *             if debug is True:
 *                 print("x_new_rot: ", x+h)             # <<<<<<<<<<<<<<
 *             # translate
 *             # d_tra = self.velocity*dt_half
 */
      __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_h)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_x_new_rot);
      __Pyx_GIVEREF(__pyx_kp_s_x_new_rot);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_x_new_rot);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":448
 *                         -x+h)
 *                 h += d_rot
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("x_new_rot: ", x+h)
 *             # translate
 */
    }

    /* "mbd/ChRigidBody.pyx":453
 *             # d_tra = self.velocity*dt_half
 *             # h += d_tra
 *             h += self.h_predict             # <<<<<<<<<<<<<<
 *             if debug is True:
 *                 print("x_new_trarot: ", x+h)
 */
    __pyx_t_2 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_h), ((PyObject *)__pyx_v_self->h_predict)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":454
 *             # h += d_tra
 *             h += self.h_predict
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("x_new_trarot: ", x+h)
 *         comm = Comm.get().comm.tompi4py()
 */
    __pyx_t_5 = (__pyx_v_debug == Py_True);
    __pyx_t_3 = (__pyx_t_5 != 0);
    if (__pyx_t_3) {

      /* "mbd/ChRigidBody.pyx":455
 *             h += self.h_predict
 *             if debug is True:
 *                 print("x_new_trarot: ", x+h)             # <<<<<<<<<<<<<<
 *         comm = Comm.get().comm.tompi4py()
 *         # print(comm.rank, h, x, t)
 */
      __pyx_t_2 = PyNumber_Add(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_h)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_s_x_new_trarot);
      __Pyx_GIVEREF(__pyx_kp_s_x_new_trarot);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_x_new_trarot);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":454
 *             # h += d_tra
 *             h += self.h_predict
 *             if debug is True:             # <<<<<<<<<<<<<<
 *                 print("x_new_trarot: ", x+h)
 *         comm = Comm.get().comm.tompi4py()
 */
    }

    /* "mbd/ChRigidBody.pyx":400
 *             h_body = pych.ChVector_to_npArray(h_body_vec)
 *             h += h_body
 *         elif self.ProtChSystem.scheme == "ISS":             # <<<<<<<<<<<<<<
 *             # remove previous prediction
 *             # translate back first
 */
  }
  __pyx_L4:;

  /* "mbd/ChRigidBody.pyx":456
 *             if debug is True:
 *                 print("x_new_trarot: ", x+h)
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         # print(comm.rank, h, x, t)
 *         return h
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_comm); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_comm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":458
 *         comm = Comm.get().comm.tompi4py()
 *         # print(comm.rank, h, x, t)
 *         return h             # <<<<<<<<<<<<<<
 * 
 *     def hx(self, np.ndarray x, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":382
 *         self.thisptr.poststep()
 * 
 *     def hxyz(self, np.ndarray x, double t, debug=False):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray h
 *         cdef np.ndarray xx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hxyz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XDECREF((PyObject *)__pyx_v_xx);
  __Pyx_XDECREF((PyObject *)__pyx_v_d_rot);
  __Pyx_XDECREF((PyObject *)__pyx_v_d_rot_last);
  __Pyx_XDECREF((PyObject *)__pyx_v_h_body);
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":460
 *         return h
 * 
 *     def hx(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (x component)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_19hx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_18hx[] = "BC function for mesh nodes displacement (x component)\n\n        Parameters\n        ----------\n        x: array_like\n            coordinates of the node before displacement\n        t: double\n            simulation time\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_19hx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_x = 0;
  double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hx", 1, 2, 2, 1); __PYX_ERR(0, 460, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hx") < 0)) __PYX_ERR(0, 460, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((PyArrayObject *)values[0]);
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 460, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hx", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 460, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_18hx(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_18hx(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("hx", 0);

  /* "mbd/ChRigidBody.pyx":470
 *             simulation time
 *         """
 *         return self.hxyz(x, t)[0]             # <<<<<<<<<<<<<<
 * 
 *     def hy(self, np.ndarray x, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hxyz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":460
 *         return h
 * 
 *     def hx(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (x component)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":472
 *         return self.hxyz(x, t)[0]
 * 
 *     def hy(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (y component)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21hy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_20hy[] = "BC function for mesh nodes displacement (y component)\n\n        Parameters\n        ----------\n        x: array_like\n            coordinates of the node before displacement\n        t: double\n            simulation time\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21hy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_x = 0;
  double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hy", 1, 2, 2, 1); __PYX_ERR(0, 472, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hy") < 0)) __PYX_ERR(0, 472, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((PyArrayObject *)values[0]);
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 472, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 472, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_20hy(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_20hy(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("hy", 0);

  /* "mbd/ChRigidBody.pyx":482
 *             simulation time
 *         """
 *         return self.hxyz(x, t)[1]             # <<<<<<<<<<<<<<
 * 
 *     def hz(self, np.ndarray x, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hxyz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":472
 *         return self.hxyz(x, t)[0]
 * 
 *     def hy(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (y component)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":484
 *         return self.hxyz(x, t)[1]
 * 
 *     def hz(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (z component)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_23hz(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_22hz[] = "BC function for mesh nodes displacement (z component)\n\n        Parameters\n        ----------\n        x: array_like\n            coordinates of the node before displacement\n        t: double\n            simulation time\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_23hz(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_x = 0;
  double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hz (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hz", 1, 2, 2, 1); __PYX_ERR(0, 484, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hz") < 0)) __PYX_ERR(0, 484, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((PyArrayObject *)values[0]);
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 484, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hz", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 484, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 484, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22hz(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22hz(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("hz", 0);

  /* "mbd/ChRigidBody.pyx":494
 *             simulation time
 *         """
 *         return self.hxyz(x, t)[2]             # <<<<<<<<<<<<<<
 * 
 *     def hx_translation(self, np.ndarray x, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hxyz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":484
 *         return self.hxyz(x, t)[1]
 * 
 *     def hz(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (z component)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":496
 *         return self.hxyz(x, t)[2]
 * 
 *     def hx_translation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (x component)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_25hx_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_24hx_translation[] = "BC function for mesh nodes displacement (x component)\n\n        Parameters\n        ----------\n        x: array_like\n            coordinates of the node before displacement\n        t: double\n            simulation time\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_25hx_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyArrayObject *__pyx_v_x = 0;
  CYTHON_UNUSED double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hx_translation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hx_translation", 1, 2, 2, 1); __PYX_ERR(0, 496, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hx_translation") < 0)) __PYX_ERR(0, 496, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((PyArrayObject *)values[0]);
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hx_translation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 496, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hx_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 496, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_24hx_translation(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_24hx_translation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, CYTHON_UNUSED PyArrayObject *__pyx_v_x, CYTHON_UNUSED double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("hx_translation", 0);

  /* "mbd/ChRigidBody.pyx":506
 *             simulation time
 *         """
 *         return (self.position-self.position_last)[0]             # <<<<<<<<<<<<<<
 * 
 *     def hy_translation(self, np.ndarray x, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Subtract(((PyObject *)__pyx_v_self->position), ((PyObject *)__pyx_v_self->position_last)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":496
 *         return self.hxyz(x, t)[2]
 * 
 *     def hx_translation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (x component)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hx_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":508
 *         return (self.position-self.position_last)[0]
 * 
 *     def hy_translation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (y component)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_27hy_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_26hy_translation[] = "BC function for mesh nodes displacement (y component)\n\n        Parameters\n        ----------\n        x: array_like\n            coordinates of the node before displacement\n        t: double\n            simulation time\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_27hy_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyArrayObject *__pyx_v_x = 0;
  CYTHON_UNUSED double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hy_translation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hy_translation", 1, 2, 2, 1); __PYX_ERR(0, 508, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hy_translation") < 0)) __PYX_ERR(0, 508, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((PyArrayObject *)values[0]);
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hy_translation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 508, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hy_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 508, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26hy_translation(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26hy_translation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, CYTHON_UNUSED PyArrayObject *__pyx_v_x, CYTHON_UNUSED double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("hy_translation", 0);

  /* "mbd/ChRigidBody.pyx":518
 *             simulation time
 *         """
 *         return (self.position-self.position_last)[1]             # <<<<<<<<<<<<<<
 * 
 *     def hz_translation(self, np.ndarray x, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Subtract(((PyObject *)__pyx_v_self->position), ((PyObject *)__pyx_v_self->position_last)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":508
 *         return (self.position-self.position_last)[0]
 * 
 *     def hy_translation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (y component)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hy_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":520
 *         return (self.position-self.position_last)[1]
 * 
 *     def hz_translation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (z component)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_29hz_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_28hz_translation[] = "BC function for mesh nodes displacement (z component)\n\n        Parameters\n        ----------\n        x: array_like\n            coordinates of the node before displacement\n        t: double\n            simulation time\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_29hz_translation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyArrayObject *__pyx_v_x = 0;
  CYTHON_UNUSED double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hz_translation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hz_translation", 1, 2, 2, 1); __PYX_ERR(0, 520, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hz_translation") < 0)) __PYX_ERR(0, 520, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((PyArrayObject *)values[0]);
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hz_translation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 520, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hz_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_28hz_translation(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_28hz_translation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, CYTHON_UNUSED PyArrayObject *__pyx_v_x, CYTHON_UNUSED double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("hz_translation", 0);

  /* "mbd/ChRigidBody.pyx":530
 *             simulation time
 *         """
 *         return (self.position-self.position_last)[2]             # <<<<<<<<<<<<<<
 * 
 *     def hx_rotation(self, np.ndarray x, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Subtract(((PyObject *)__pyx_v_self->position), ((PyObject *)__pyx_v_self->position_last)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":520
 *         return (self.position-self.position_last)[1]
 * 
 *     def hz_translation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (z component)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hz_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":532
 *         return (self.position-self.position_last)[2]
 * 
 *     def hx_rotation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (x component)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_31hx_rotation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_30hx_rotation[] = "BC function for mesh nodes displacement (x component)\n\n        Parameters\n        ----------\n        x: array_like\n            coordinates of the node before displacement\n        t: double\n            simulation time\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_31hx_rotation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_x = 0;
  double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hx_rotation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hx_rotation", 1, 2, 2, 1); __PYX_ERR(0, 532, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hx_rotation") < 0)) __PYX_ERR(0, 532, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((PyArrayObject *)values[0]);
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hx_rotation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 532, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hx_rotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 532, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_30hx_rotation(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_30hx_rotation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("hx_rotation", 0);

  /* "mbd/ChRigidBody.pyx":542
 *             simulation time
 *         """
 *         return self.hxyz(x, t)[0]-(self.position-self.position_last)[0]             # <<<<<<<<<<<<<<
 * 
 *     def hy_rotation(self, np.ndarray x, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hxyz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(((PyObject *)__pyx_v_self->position), ((PyObject *)__pyx_v_self->position_last)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":532
 *         return (self.position-self.position_last)[2]
 * 
 *     def hx_rotation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (x component)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hx_rotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":544
 *         return self.hxyz(x, t)[0]-(self.position-self.position_last)[0]
 * 
 *     def hy_rotation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (y component)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_33hy_rotation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_32hy_rotation[] = "BC function for mesh nodes displacement (y component)\n\n        Parameters\n        ----------\n        x: array_like\n            coordinates of the node before displacement\n        t: double\n            simulation time\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_33hy_rotation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_x = 0;
  double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hy_rotation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hy_rotation", 1, 2, 2, 1); __PYX_ERR(0, 544, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hy_rotation") < 0)) __PYX_ERR(0, 544, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((PyArrayObject *)values[0]);
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hy_rotation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 544, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hy_rotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_32hy_rotation(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_32hy_rotation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("hy_rotation", 0);

  /* "mbd/ChRigidBody.pyx":554
 *             simulation time
 *         """
 *         return self.hxyz(x, t)[1]-(self.position-self.position_last)[1]             # <<<<<<<<<<<<<<
 * 
 *     def hz_rotation(self, np.ndarray x, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hxyz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(((PyObject *)__pyx_v_self->position), ((PyObject *)__pyx_v_self->position_last)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":544
 *         return self.hxyz(x, t)[0]-(self.position-self.position_last)[0]
 * 
 *     def hy_rotation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (y component)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hy_rotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":556
 *         return self.hxyz(x, t)[1]-(self.position-self.position_last)[1]
 * 
 *     def hz_rotation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (z component)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_35hz_rotation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_34hz_rotation[] = "BC function for mesh nodes displacement (z component)\n\n        Parameters\n        ----------\n        x: array_like\n            coordinates of the node before displacement\n        t: double\n            simulation time\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_35hz_rotation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_x = 0;
  double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hz_rotation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hz_rotation", 1, 2, 2, 1); __PYX_ERR(0, 556, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hz_rotation") < 0)) __PYX_ERR(0, 556, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((PyArrayObject *)values[0]);
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 556, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hz_rotation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 556, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hz_rotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 556, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_34hz_rotation(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_x, __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_34hz_rotation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_x, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("hz_rotation", 0);

  /* "mbd/ChRigidBody.pyx":566
 *             simulation time
 *         """
 *         return self.hxyz(x, t)[2]-(self.position-self.position_last)[2]             # <<<<<<<<<<<<<<
 * 
 *     def addSpring(self, double stiffness, double damping, np.ndarray fairlead,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hxyz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_x), __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(((PyObject *)__pyx_v_self->position), ((PyObject *)__pyx_v_self->position_last)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":556
 *         return self.hxyz(x, t)[1]-(self.position-self.position_last)[1]
 * 
 *     def hz_rotation(self, np.ndarray x, double t):             # <<<<<<<<<<<<<<
 *         """BC function for mesh nodes displacement (z component)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.hz_rotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":568
 *         return self.hxyz(x, t)[2]-(self.position-self.position_last)[2]
 * 
 *     def addSpring(self, double stiffness, double damping, np.ndarray fairlead,             # <<<<<<<<<<<<<<
 *                   np.ndarray anchor, double rest_length):
 *         self.thisptr.addSpring(stiffness, damping, <double*> fairlead.data,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_37addSpring(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_37addSpring(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_stiffness;
  double __pyx_v_damping;
  PyArrayObject *__pyx_v_fairlead = 0;
  PyArrayObject *__pyx_v_anchor = 0;
  double __pyx_v_rest_length;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addSpring (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stiffness,&__pyx_n_s_damping,&__pyx_n_s_fairlead,&__pyx_n_s_anchor,&__pyx_n_s_rest_length,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stiffness)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_damping)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addSpring", 1, 5, 5, 1); __PYX_ERR(0, 568, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fairlead)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addSpring", 1, 5, 5, 2); __PYX_ERR(0, 568, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_anchor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addSpring", 1, 5, 5, 3); __PYX_ERR(0, 568, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rest_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addSpring", 1, 5, 5, 4); __PYX_ERR(0, 568, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addSpring") < 0)) __PYX_ERR(0, 568, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_stiffness = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_stiffness == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 568, __pyx_L3_error)
    __pyx_v_damping = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_damping == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 568, __pyx_L3_error)
    __pyx_v_fairlead = ((PyArrayObject *)values[2]);
    __pyx_v_anchor = ((PyArrayObject *)values[3]);
    __pyx_v_rest_length = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_rest_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 569, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addSpring", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 568, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.addSpring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fairlead), __pyx_ptype_5numpy_ndarray, 1, "fairlead", 0))) __PYX_ERR(0, 568, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_anchor), __pyx_ptype_5numpy_ndarray, 1, "anchor", 0))) __PYX_ERR(0, 569, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_36addSpring(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_stiffness, __pyx_v_damping, __pyx_v_fairlead, __pyx_v_anchor, __pyx_v_rest_length);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_36addSpring(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, double __pyx_v_stiffness, double __pyx_v_damping, PyArrayObject *__pyx_v_fairlead, PyArrayObject *__pyx_v_anchor, double __pyx_v_rest_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addSpring", 0);

  /* "mbd/ChRigidBody.pyx":570
 *     def addSpring(self, double stiffness, double damping, np.ndarray fairlead,
 *                   np.ndarray anchor, double rest_length):
 *         self.thisptr.addSpring(stiffness, damping, <double*> fairlead.data,             # <<<<<<<<<<<<<<
 *                                <double*> anchor.data, rest_length)
 * 
 */
  __pyx_v_self->thisptr->addSpring(__pyx_v_stiffness, __pyx_v_damping, ((double *)__pyx_v_fairlead->data), ((double *)__pyx_v_anchor->data), __pyx_v_rest_length);

  /* "mbd/ChRigidBody.pyx":568
 *         return self.hxyz(x, t)[2]-(self.position-self.position_last)[2]
 * 
 *     def addSpring(self, double stiffness, double damping, np.ndarray fairlead,             # <<<<<<<<<<<<<<
 *                   np.ndarray anchor, double rest_length):
 *         self.thisptr.addSpring(stiffness, damping, <double*> fairlead.data,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":573
 *                                <double*> anchor.data, rest_length)
 * 
 *     def SetPosition(self, np.ndarray position):             # <<<<<<<<<<<<<<
 *         """Sets position of body manually
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_39SetPosition(PyObject *__pyx_v_self, PyObject *__pyx_v_position); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_38SetPosition[] = "Sets position of body manually\n\n        Parameters\n        ----------\n        position: array_like\n            new position of body (must be array of length 3)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_39SetPosition(PyObject *__pyx_v_self, PyObject *__pyx_v_position) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetPosition (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_position), __pyx_ptype_5numpy_ndarray, 1, "position", 0))) __PYX_ERR(0, 573, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_38SetPosition(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyArrayObject *)__pyx_v_position));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_38SetPosition(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_position) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetPosition", 0);

  /* "mbd/ChRigidBody.pyx":581
 *             new position of body (must be array of length 3)
 *         """
 *         self.position = position             # <<<<<<<<<<<<<<
 *         self.thisptr.setPosition(<double*> position.data)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_position));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_position));
  __Pyx_GOTREF(__pyx_v_self->position);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->position));
  __pyx_v_self->position = __pyx_v_position;

  /* "mbd/ChRigidBody.pyx":582
 *         """
 *         self.position = position
 *         self.thisptr.setPosition(<double*> position.data)             # <<<<<<<<<<<<<<
 * 
 *     def SetPosition(self, np.ndarray position):
 */
  __pyx_v_self->thisptr->setPosition(((double *)__pyx_v_position->data));

  /* "mbd/ChRigidBody.pyx":573
 *                                <double*> anchor.data, rest_length)
 * 
 *     def SetPosition(self, np.ndarray position):             # <<<<<<<<<<<<<<
 *         """Sets position of body manually
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":584
 *         self.thisptr.setPosition(<double*> position.data)
 * 
 *     def SetPosition(self, np.ndarray position):             # <<<<<<<<<<<<<<
 *         """Sets position of body manually
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_41SetPosition(PyObject *__pyx_v_self, PyObject *__pyx_v_position); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_40SetPosition[] = "Sets position of body manually\n\n        Parameters\n        ----------\n        position: array_like\n            new position of body (must be array of length 3)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_41SetPosition(PyObject *__pyx_v_self, PyObject *__pyx_v_position) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetPosition (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_position), __pyx_ptype_5numpy_ndarray, 1, "position", 0))) __PYX_ERR(0, 584, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_40SetPosition(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyArrayObject *)__pyx_v_position));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_40SetPosition(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_position) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetPosition", 0);

  /* "mbd/ChRigidBody.pyx":592
 *             new position of body (must be array of length 3)
 *         """
 *         self.thisptr.setPosition(<double*> position.data)             # <<<<<<<<<<<<<<
 * 
 *     def setRotation(self, np.ndarray quaternion):
 */
  __pyx_v_self->thisptr->setPosition(((double *)__pyx_v_position->data));

  /* "mbd/ChRigidBody.pyx":584
 *         self.thisptr.setPosition(<double*> position.data)
 * 
 *     def SetPosition(self, np.ndarray position):             # <<<<<<<<<<<<<<
 *         """Sets position of body manually
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":594
 *         self.thisptr.setPosition(<double*> position.data)
 * 
 *     def setRotation(self, np.ndarray quaternion):             # <<<<<<<<<<<<<<
 *         """Sets rotation of body manually
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_43setRotation(PyObject *__pyx_v_self, PyObject *__pyx_v_quaternion); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_42setRotation[] = "Sets rotation of body manually\n\n        Parameters\n        ----------\n        rotation: array_like\n            new rotation of body (quaternion: must be array of length 4)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_43setRotation(PyObject *__pyx_v_self, PyObject *__pyx_v_quaternion) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRotation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quaternion), __pyx_ptype_5numpy_ndarray, 1, "quaternion", 0))) __PYX_ERR(0, 594, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_42setRotation(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyArrayObject *)__pyx_v_quaternion));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_42setRotation(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_quaternion) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRotation", 0);

  /* "mbd/ChRigidBody.pyx":602
 *             new rotation of body (quaternion: must be array of length 4)
 *         """
 *         self.thisptr.setRotation(<double*> quaternion.data)             # <<<<<<<<<<<<<<
 * 
 *     def setConstraints(self, np.ndarray free_x, np.ndarray free_r):
 */
  __pyx_v_self->thisptr->setRotation(((double *)__pyx_v_quaternion->data));

  /* "mbd/ChRigidBody.pyx":594
 *         self.thisptr.setPosition(<double*> position.data)
 * 
 *     def setRotation(self, np.ndarray quaternion):             # <<<<<<<<<<<<<<
 *         """Sets rotation of body manually
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":604
 *         self.thisptr.setRotation(<double*> quaternion.data)
 * 
 *     def setConstraints(self, np.ndarray free_x, np.ndarray free_r):             # <<<<<<<<<<<<<<
 *         """Sets constraints on the body
 *         (!) Only acts on Proteus and gravity forces
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_45setConstraints(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_44setConstraints[] = "Sets constraints on the body\n        (!) Only acts on Proteus and gravity forces\n\n        Parameters\n        ----------\n        free_x: array_like\n            Translational constraints.\n        free_r: array_like\n            Rotational constraints.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_45setConstraints(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_free_x = 0;
  PyArrayObject *__pyx_v_free_r = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setConstraints (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_free_x,&__pyx_n_s_free_r,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_free_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_free_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConstraints", 1, 2, 2, 1); __PYX_ERR(0, 604, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setConstraints") < 0)) __PYX_ERR(0, 604, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_free_x = ((PyArrayObject *)values[0]);
    __pyx_v_free_r = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConstraints", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 604, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setConstraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_free_x), __pyx_ptype_5numpy_ndarray, 1, "free_x", 0))) __PYX_ERR(0, 604, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_free_r), __pyx_ptype_5numpy_ndarray, 1, "free_r", 0))) __PYX_ERR(0, 604, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_44setConstraints(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_free_x, __pyx_v_free_r);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_44setConstraints(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_free_x, PyArrayObject *__pyx_v_free_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setConstraints", 0);

  /* "mbd/ChRigidBody.pyx":615
 *             Rotational constraints.
 *         """
 *         self.thisptr.setConstraints(<double*> free_x.data, <double*> free_r.data)             # <<<<<<<<<<<<<<
 * 
 *     def SetMass(self, double mass):
 */
  __pyx_v_self->thisptr->setConstraints(((double *)__pyx_v_free_x->data), ((double *)__pyx_v_free_r->data));

  /* "mbd/ChRigidBody.pyx":604
 *         self.thisptr.setRotation(<double*> quaternion.data)
 * 
 *     def setConstraints(self, np.ndarray free_x, np.ndarray free_r):             # <<<<<<<<<<<<<<
 *         """Sets constraints on the body
 *         (!) Only acts on Proteus and gravity forces
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":617
 *         self.thisptr.setConstraints(<double*> free_x.data, <double*> free_r.data)
 * 
 *     def SetMass(self, double mass):             # <<<<<<<<<<<<<<
 *         """Sets mass of body.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_47SetMass(PyObject *__pyx_v_self, PyObject *__pyx_arg_mass); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_46SetMass[] = "Sets mass of body.\n\n        Parameters\n        ----------\n        mass: double\n            mass of the body\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_47SetMass(PyObject *__pyx_v_self, PyObject *__pyx_arg_mass) {
  double __pyx_v_mass;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetMass (wrapper)", 0);
  assert(__pyx_arg_mass); {
    __pyx_v_mass = __pyx_PyFloat_AsDouble(__pyx_arg_mass); if (unlikely((__pyx_v_mass == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.SetMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_46SetMass(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((double)__pyx_v_mass));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_46SetMass(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, double __pyx_v_mass) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetMass", 0);

  /* "mbd/ChRigidBody.pyx":625
 *             mass of the body
 *         """
 *         deref(self.thisptr.body).SetMass(mass)             # <<<<<<<<<<<<<<
 * 
 *     def setAddedMass(self, double[:,:] added_mass):
 */
  (*__pyx_v_self->thisptr->body).SetMass(__pyx_v_mass);

  /* "mbd/ChRigidBody.pyx":617
 *         self.thisptr.setConstraints(<double*> free_x.data, <double*> free_r.data)
 * 
 *     def SetMass(self, double mass):             # <<<<<<<<<<<<<<
 *         """Sets mass of body.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":627
 *         deref(self.thisptr.body).SetMass(mass)
 * 
 *     def setAddedMass(self, double[:,:] added_mass):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the added mass matrix of the body
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_49setAddedMass(PyObject *__pyx_v_self, PyObject *__pyx_arg_added_mass); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_48setAddedMass[] = "\n        Sets the added mass matrix of the body\n\n        Parameters\n        ----------\n        added_mass: array_like\n            Added mass matrix (must be 6x6 array!)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_49setAddedMass(PyObject *__pyx_v_self, PyObject *__pyx_arg_added_mass) {
  __Pyx_memviewslice __pyx_v_added_mass = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAddedMass (wrapper)", 0);
  assert(__pyx_arg_added_mass); {
    __pyx_v_added_mass = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_arg_added_mass); if (unlikely(!__pyx_v_added_mass.memview)) __PYX_ERR(0, 627, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setAddedMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_48setAddedMass(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_added_mass);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_48setAddedMass(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, __Pyx_memviewslice __pyx_v_added_mass) {
  double __pyx_v_mass;
  PyArrayObject *__pyx_v_iner = 0;
  PyArrayObject *__pyx_v_MM = 0;
  PyArrayObject *__pyx_v_AM = 0;
  PyArrayObject *__pyx_v_FM = 0;
  ChMatrixDynamic<double>  __pyx_v_chFM;
  ChMatrixDynamic<double>  __pyx_v_inv_chFM;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_inv_FM = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  double __pyx_t_13;
  __Pyx_RefNannySetupContext("setAddedMass", 0);

  /* "mbd/ChRigidBody.pyx":637
 *         """
 * 
 *         assert added_mass.shape[0] == 6, 'Added mass matrix must be 6x6 (np)'             # <<<<<<<<<<<<<<
 *         assert added_mass.shape[1] == 6, 'Added mass matrix must be 6x6 (np)'
 *         cdef double mass = self.ChBody.GetMass()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_added_mass.shape[0]) == 6) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Added_mass_matrix_must_be_6x6_np);
      __PYX_ERR(0, 637, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":638
 * 
 *         assert added_mass.shape[0] == 6, 'Added mass matrix must be 6x6 (np)'
 *         assert added_mass.shape[1] == 6, 'Added mass matrix must be 6x6 (np)'             # <<<<<<<<<<<<<<
 *         cdef double mass = self.ChBody.GetMass()
 *         cdef np.ndarray iner = self.ChBody.GetInertia()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_added_mass.shape[1]) == 6) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Added_mass_matrix_must_be_6x6_np);
      __PYX_ERR(0, 638, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":639
 *         assert added_mass.shape[0] == 6, 'Added mass matrix must be 6x6 (np)'
 *         assert added_mass.shape[1] == 6, 'Added mass matrix must be 6x6 (np)'
 *         cdef double mass = self.ChBody.GetMass()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray iner = self.ChBody.GetInertia()
 *         cdef np.ndarray MM = np.zeros((6,6))  # mass matrix
 */
  __pyx_v_mass = ((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.GetMass(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody *)__pyx_v_self->ChBody), 0);

  /* "mbd/ChRigidBody.pyx":640
 *         assert added_mass.shape[1] == 6, 'Added mass matrix must be 6x6 (np)'
 *         cdef double mass = self.ChBody.GetMass()
 *         cdef np.ndarray iner = self.ChBody.GetInertia()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray MM = np.zeros((6,6))  # mass matrix
 *         cdef np.ndarray AM = np.zeros((6,6))  # added mass matrix
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.GetInertia(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_iner = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":641
 *         cdef double mass = self.ChBody.GetMass()
 *         cdef np.ndarray iner = self.ChBody.GetInertia()
 *         cdef np.ndarray MM = np.zeros((6,6))  # mass matrix             # <<<<<<<<<<<<<<
 *         cdef np.ndarray AM = np.zeros((6,6))  # added mass matrix
 *         cdef np.ndarray FM = np.zeros((6,6))  # full mass matrix
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 641, __pyx_L1_error)
  __pyx_v_MM = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":642
 *         cdef np.ndarray iner = self.ChBody.GetInertia()
 *         cdef np.ndarray MM = np.zeros((6,6))  # mass matrix
 *         cdef np.ndarray AM = np.zeros((6,6))  # added mass matrix             # <<<<<<<<<<<<<<
 *         cdef np.ndarray FM = np.zeros((6,6))  # full mass matrix
 *         cdef ch.ChMatrixDynamic chFM = ch.ChMatrixDynamic[double](6, 6)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 642, __pyx_L1_error)
  __pyx_v_AM = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":643
 *         cdef np.ndarray MM = np.zeros((6,6))  # mass matrix
 *         cdef np.ndarray AM = np.zeros((6,6))  # added mass matrix
 *         cdef np.ndarray FM = np.zeros((6,6))  # full mass matrix             # <<<<<<<<<<<<<<
 *         cdef ch.ChMatrixDynamic chFM = ch.ChMatrixDynamic[double](6, 6)
 *         cdef ch.ChMatrixDynamic inv_chFM = ch.ChMatrixDynamic[double](6, 6)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 643, __pyx_L1_error)
  __pyx_v_FM = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":644
 *         cdef np.ndarray AM = np.zeros((6,6))  # added mass matrix
 *         cdef np.ndarray FM = np.zeros((6,6))  # full mass matrix
 *         cdef ch.ChMatrixDynamic chFM = ch.ChMatrixDynamic[double](6, 6)             # <<<<<<<<<<<<<<
 *         cdef ch.ChMatrixDynamic inv_chFM = ch.ChMatrixDynamic[double](6, 6)
 *         # added mass matrix
 */
  __pyx_v_chFM = ChMatrixDynamic<double> (6, 6);

  /* "mbd/ChRigidBody.pyx":645
 *         cdef np.ndarray FM = np.zeros((6,6))  # full mass matrix
 *         cdef ch.ChMatrixDynamic chFM = ch.ChMatrixDynamic[double](6, 6)
 *         cdef ch.ChMatrixDynamic inv_chFM = ch.ChMatrixDynamic[double](6, 6)             # <<<<<<<<<<<<<<
 *         # added mass matrix
 *         AM += added_mass
 */
  __pyx_v_inv_chFM = ChMatrixDynamic<double> (6, 6);

  /* "mbd/ChRigidBody.pyx":647
 *         cdef ch.ChMatrixDynamic inv_chFM = ch.ChMatrixDynamic[double](6, 6)
 *         # added mass matrix
 *         AM += added_mass             # <<<<<<<<<<<<<<
 *         self.Aij[:] = AM
 *         # mass matrix
 */
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_added_mass, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_AM), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_AM, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":648
 *         # added mass matrix
 *         AM += added_mass
 *         self.Aij[:] = AM             # <<<<<<<<<<<<<<
 *         # mass matrix
 *         MM[0,0] = mass
 */
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->Aij), ((PyObject *)__pyx_v_AM), 0, 0, NULL, NULL, &__pyx_slice__30, 0, 0, 1) < 0) __PYX_ERR(0, 648, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":650
 *         self.Aij[:] = AM
 *         # mass matrix
 *         MM[0,0] = mass             # <<<<<<<<<<<<<<
 *         MM[1,1] = mass
 *         MM[2,2] = mass
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_mass); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_MM), __pyx_tuple__31, __pyx_t_2) < 0)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":651
 *         # mass matrix
 *         MM[0,0] = mass
 *         MM[1,1] = mass             # <<<<<<<<<<<<<<
 *         MM[2,2] = mass
 *         for i in range(3):
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_mass); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_MM), __pyx_tuple__32, __pyx_t_2) < 0)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":652
 *         MM[0,0] = mass
 *         MM[1,1] = mass
 *         MM[2,2] = mass             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_mass); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_MM), __pyx_tuple__33, __pyx_t_2) < 0)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":653
 *         MM[1,1] = mass
 *         MM[2,2] = mass
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 MM[i+3, j+3] = iner[i, j]
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 653, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 653, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 653, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 653, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":654
 *         MM[2,2] = mass
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 MM[i+3, j+3] = iner[i, j]
 *         # full mass
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 654, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 654, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 654, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 654, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 654, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 654, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 654, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":655
 *         for i in range(3):
 *             for j in range(3):
 *                 MM[i+3, j+3] = iner[i, j]             # <<<<<<<<<<<<<<
 *         # full mass
 *         FM += AM
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_j);
      __pyx_t_8 = PyObject_GetItem(((PyObject *)__pyx_v_iner), __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_j, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_2 = 0;
      __pyx_t_9 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_MM), __pyx_t_10, __pyx_t_8) < 0)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "mbd/ChRigidBody.pyx":654
 *         MM[2,2] = mass
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 MM[i+3, j+3] = iner[i, j]
 *         # full mass
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":653
 *         MM[1,1] = mass
 *         MM[2,2] = mass
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 MM[i+3, j+3] = iner[i, j]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":657
 *                 MM[i+3, j+3] = iner[i, j]
 *         # full mass
 *         FM += AM             # <<<<<<<<<<<<<<
 *         FM += MM
 *         Profiling.logEvent('Mass Matrix:\n'+str(MM))
 */
  __pyx_t_1 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_FM), ((PyObject *)__pyx_v_AM)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_FM, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":658
 *         # full mass
 *         FM += AM
 *         FM += MM             # <<<<<<<<<<<<<<
 *         Profiling.logEvent('Mass Matrix:\n'+str(MM))
 *         Profiling.logEvent('Added Mass Matrix:\n'+str(AM))
 */
  __pyx_t_1 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_FM), ((PyObject *)__pyx_v_MM)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_FM, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":659
 *         FM += AM
 *         FM += MM
 *         Profiling.logEvent('Mass Matrix:\n'+str(MM))             # <<<<<<<<<<<<<<
 *         Profiling.logEvent('Added Mass Matrix:\n'+str(AM))
 *         Profiling.logEvent('Full Mass Matrix:\n'+str(FM))
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_MM));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_MM));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_MM));
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Mass_Matrix, __pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_10) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":660
 *         FM += MM
 *         Profiling.logEvent('Mass Matrix:\n'+str(MM))
 *         Profiling.logEvent('Added Mass Matrix:\n'+str(AM))             # <<<<<<<<<<<<<<
 *         Profiling.logEvent('Full Mass Matrix:\n'+str(FM))
 *         # inverse of full mass matrix
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(((PyObject *)__pyx_v_AM));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_AM));
  PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_AM));
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Added_Mass_Matrix, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":661
 *         Profiling.logEvent('Mass Matrix:\n'+str(MM))
 *         Profiling.logEvent('Added Mass Matrix:\n'+str(AM))
 *         Profiling.logEvent('Full Mass Matrix:\n'+str(FM))             # <<<<<<<<<<<<<<
 *         # inverse of full mass matrix
 *         inv_FM = np.linalg.inv(FM)
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(((PyObject *)__pyx_v_FM));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_FM));
  PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_v_FM));
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyNumber_Add(__pyx_kp_s_Full_Mass_Matrix, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 661, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 661, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 661, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 661, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":663
 *         Profiling.logEvent('Full Mass Matrix:\n'+str(FM))
 *         # inverse of full mass matrix
 *         inv_FM = np.linalg.inv(FM)             # <<<<<<<<<<<<<<
 *         #set it to chrono variable
 *         for i in range(6):
 */
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_linalg); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_inv); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_10, ((PyObject *)__pyx_v_FM)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_FM)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_FM)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 663, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_FM));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_FM));
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, ((PyObject *)__pyx_v_FM));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_inv_FM = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":665
 *         inv_FM = np.linalg.inv(FM)
 *         #set it to chrono variable
 *         for i in range(6):             # <<<<<<<<<<<<<<
 *             for j in range(6):
 *                 chFM.SetElement(i, j, FM[i, j])
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_10 = __pyx_t_1; __Pyx_INCREF(__pyx_t_10); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_4 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 665, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_10))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 665, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 665, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_10);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 665, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":666
 *         #set it to chrono variable
 *         for i in range(6):
 *             for j in range(6):             # <<<<<<<<<<<<<<
 *                 chFM.SetElement(i, j, FM[i, j])
 *                 inv_chFM.SetElement(i, j, inv_FM[i, j])
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_9 = __pyx_t_1; __Pyx_INCREF(__pyx_t_9); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 666, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_9))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 666, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 666, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_9);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 666, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":667
 *         for i in range(6):
 *             for j in range(6):
 *                 chFM.SetElement(i, j, FM[i, j])             # <<<<<<<<<<<<<<
 *                 inv_chFM.SetElement(i, j, inv_FM[i, j])
 *         self.ChBody.SetMfullmass(chFM)
 */
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 667, __pyx_L1_error)
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 667, __pyx_L1_error)
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_j);
      __pyx_t_5 = PyObject_GetItem(((PyObject *)__pyx_v_FM), __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 667, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 667, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_chFM.SetElement(__pyx_t_11, __pyx_t_12, __pyx_t_13);

      /* "mbd/ChRigidBody.pyx":668
 *             for j in range(6):
 *                 chFM.SetElement(i, j, FM[i, j])
 *                 inv_chFM.SetElement(i, j, inv_FM[i, j])             # <<<<<<<<<<<<<<
 *         self.ChBody.SetMfullmass(chFM)
 *         self.ChBody.SetInvMfullmass(inv_chFM)
 */
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 668, __pyx_L1_error)
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 668, __pyx_L1_error)
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_j);
      __pyx_t_1 = PyObject_GetItem(__pyx_v_inv_FM, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 668, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_inv_chFM.SetElement(__pyx_t_12, __pyx_t_11, __pyx_t_13);

      /* "mbd/ChRigidBody.pyx":666
 *         #set it to chrono variable
 *         for i in range(6):
 *             for j in range(6):             # <<<<<<<<<<<<<<
 *                 chFM.SetElement(i, j, FM[i, j])
 *                 inv_chFM.SetElement(i, j, inv_FM[i, j])
 */
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "mbd/ChRigidBody.pyx":665
 *         inv_FM = np.linalg.inv(FM)
 *         #set it to chrono variable
 *         for i in range(6):             # <<<<<<<<<<<<<<
 *             for j in range(6):
 *                 chFM.SetElement(i, j, FM[i, j])
 */
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "mbd/ChRigidBody.pyx":669
 *                 chFM.SetElement(i, j, FM[i, j])
 *                 inv_chFM.SetElement(i, j, inv_FM[i, j])
 *         self.ChBody.SetMfullmass(chFM)             # <<<<<<<<<<<<<<
 *         self.ChBody.SetInvMfullmass(inv_chFM)
 * 
 */
  ((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->SetMfullmass(__pyx_v_self->ChBody, ((ChMatrixDynamic<double> )__pyx_v_chFM));

  /* "mbd/ChRigidBody.pyx":670
 *                 inv_chFM.SetElement(i, j, inv_FM[i, j])
 *         self.ChBody.SetMfullmass(chFM)
 *         self.ChBody.SetInvMfullmass(inv_chFM)             # <<<<<<<<<<<<<<
 * 
 *     def getPressureForces(self):
 */
  ((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->SetInvMfullmass(__pyx_v_self->ChBody, ((ChMatrixDynamic<double> )__pyx_v_inv_chFM));

  /* "mbd/ChRigidBody.pyx":627
 *         deref(self.thisptr.body).SetMass(mass)
 * 
 *     def setAddedMass(self, double[:,:] added_mass):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the added mass matrix of the body
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setAddedMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_added_mass, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_iner);
  __Pyx_XDECREF((PyObject *)__pyx_v_MM);
  __Pyx_XDECREF((PyObject *)__pyx_v_AM);
  __Pyx_XDECREF((PyObject *)__pyx_v_FM);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_inv_FM);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":672
 *         self.ChBody.SetInvMfullmass(inv_chFM)
 * 
 *     def getPressureForces(self):             # <<<<<<<<<<<<<<
 *         """Gives pressure forces from fluid (Proteus) acting on body.
 *         (!) Only works during proteus simulation
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_51getPressureForces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_50getPressureForces[] = "Gives pressure forces from fluid (Proteus) acting on body.\n        (!) Only works during proteus simulation\n\n        Returns\n        -------\n        F_p: array_like\n            pressure forces (x, y, z) as provided by Proteus\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_51getPressureForces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPressureForces (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_50getPressureForces(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_50getPressureForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_v_i0;
  int __pyx_v_i1;
  PyObject *__pyx_v_F_p = NULL;
  PyObject *__pyx_v_F_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("getPressureForces", 0);

  /* "mbd/ChRigidBody.pyx":681
 *             pressure forces (x, y, z) as provided by Proteus
 *         """
 *         i0, i1 = self.i_start, self.i_end             # <<<<<<<<<<<<<<
 *         F_p = self.ProtChSystem.model.levelModelList[-1].coefficients.netForces_p[i0:i1, :]
 *         F_t = np.sum(F_p, axis=0)
 */
  __pyx_t_1 = __pyx_v_self->i_start;
  __pyx_t_2 = __pyx_v_self->i_end;
  __pyx_v_i0 = __pyx_t_1;
  __pyx_v_i1 = __pyx_t_2;

  /* "mbd/ChRigidBody.pyx":682
 *         """
 *         i0, i1 = self.i_start, self.i_end
 *         F_p = self.ProtChSystem.model.levelModelList[-1].coefficients.netForces_p[i0:i1, :]             # <<<<<<<<<<<<<<
 *         F_t = np.sum(F_p, axis=0)
 *         return F_t
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->ProtChSystem->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_coefficients); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_netForces_p); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_i0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_i1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PySlice_New(__pyx_t_3, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_slice__38);
  __Pyx_GIVEREF(__pyx_slice__38);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_slice__38);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_GetItem(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_F_p = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "mbd/ChRigidBody.pyx":683
 *         i0, i1 = self.i_start, self.i_end
 *         F_p = self.ProtChSystem.model.levelModelList[-1].coefficients.netForces_p[i0:i1, :]
 *         F_t = np.sum(F_p, axis=0)             # <<<<<<<<<<<<<<
 *         return F_t
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_sum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_F_p);
  __Pyx_GIVEREF(__pyx_v_F_p);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_F_p);
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 683, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_F_t = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":684
 *         F_p = self.ProtChSystem.model.levelModelList[-1].coefficients.netForces_p[i0:i1, :]
 *         F_t = np.sum(F_p, axis=0)
 *         return F_t             # <<<<<<<<<<<<<<
 * 
 *     def getShearForces(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_F_t);
  __pyx_r = __pyx_v_F_t;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":672
 *         self.ChBody.SetInvMfullmass(inv_chFM)
 * 
 *     def getPressureForces(self):             # <<<<<<<<<<<<<<
 *         """Gives pressure forces from fluid (Proteus) acting on body.
 *         (!) Only works during proteus simulation
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.getPressureForces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_F_p);
  __Pyx_XDECREF(__pyx_v_F_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":686
 *         return F_t
 * 
 *     def getShearForces(self):             # <<<<<<<<<<<<<<
 *         """Gives shear forces from fluid (Proteus) acting on body
 *         (!) Only works during proteus simulation
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_53getShearForces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_52getShearForces[] = "Gives shear forces from fluid (Proteus) acting on body\n        (!) Only works during proteus simulation\n\n        Returns\n        -------\n        F_v: array_like\n            shear forces (x, y, z) as provided by Proteus\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_53getShearForces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getShearForces (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_52getShearForces(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_52getShearForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_v_i0;
  int __pyx_v_i1;
  PyObject *__pyx_v_F_v = NULL;
  PyObject *__pyx_v_F_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("getShearForces", 0);

  /* "mbd/ChRigidBody.pyx":695
 *             shear forces (x, y, z) as provided by Proteus
 *         """
 *         i0, i1 = self.i_start, self.i_end             # <<<<<<<<<<<<<<
 *         F_v = self.ProtChSystem.model.levelModelList[-1].coefficients.netForces_v[i0:i1, :]
 *         F_t = np.sum(F_v, axis=0)
 */
  __pyx_t_1 = __pyx_v_self->i_start;
  __pyx_t_2 = __pyx_v_self->i_end;
  __pyx_v_i0 = __pyx_t_1;
  __pyx_v_i1 = __pyx_t_2;

  /* "mbd/ChRigidBody.pyx":696
 *         """
 *         i0, i1 = self.i_start, self.i_end
 *         F_v = self.ProtChSystem.model.levelModelList[-1].coefficients.netForces_v[i0:i1, :]             # <<<<<<<<<<<<<<
 *         F_t = np.sum(F_v, axis=0)
 *         return F_t
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->ProtChSystem->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_coefficients); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_netForces_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_i0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_i1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PySlice_New(__pyx_t_3, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_slice__39);
  __Pyx_GIVEREF(__pyx_slice__39);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_slice__39);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_GetItem(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_F_v = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "mbd/ChRigidBody.pyx":697
 *         i0, i1 = self.i_start, self.i_end
 *         F_v = self.ProtChSystem.model.levelModelList[-1].coefficients.netForces_v[i0:i1, :]
 *         F_t = np.sum(F_v, axis=0)             # <<<<<<<<<<<<<<
 *         return F_t
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_sum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_F_v);
  __Pyx_GIVEREF(__pyx_v_F_v);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_F_v);
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 697, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_F_t = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":698
 *         F_v = self.ProtChSystem.model.levelModelList[-1].coefficients.netForces_v[i0:i1, :]
 *         F_t = np.sum(F_v, axis=0)
 *         return F_t             # <<<<<<<<<<<<<<
 * 
 *     def getMoments(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_F_t);
  __pyx_r = __pyx_v_F_t;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":686
 *         return F_t
 * 
 *     def getShearForces(self):             # <<<<<<<<<<<<<<
 *         """Gives shear forces from fluid (Proteus) acting on body
 *         (!) Only works during proteus simulation
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.getShearForces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_F_v);
  __Pyx_XDECREF(__pyx_v_F_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":700
 *         return F_t
 * 
 *     def getMoments(self):             # <<<<<<<<<<<<<<
 *         """Gives moments from fluid (Proteus) acting on body
 *         (!) Only works during proteus simulation
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_55getMoments(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_54getMoments[] = "Gives moments from fluid (Proteus) acting on body\n        (!) Only works during proteus simulation\n\n        Returns\n        -------\n        M: array_like\n            moments (x, y, z) as provided by Proteus\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_55getMoments(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMoments (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_54getMoments(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_54getMoments(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_v_i0;
  int __pyx_v_i1;
  PyObject *__pyx_v_M = NULL;
  PyObject *__pyx_v_M_t = NULL;
  PyObject *__pyx_v_Fx = NULL;
  PyObject *__pyx_v_Fy = NULL;
  PyObject *__pyx_v_Fz = NULL;
  PyObject *__pyx_v_rx = NULL;
  PyObject *__pyx_v_ry = NULL;
  PyObject *__pyx_v_rz = NULL;
  PyObject *__pyx_v_Mp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("getMoments", 0);

  /* "mbd/ChRigidBody.pyx":709
 *             moments (x, y, z) as provided by Proteus
 *         """
 *         i0, i1 = self.i_start, self.i_end             # <<<<<<<<<<<<<<
 *         M = self.ProtChSystem.model.levelModelList[-1].coefficients.netMoments[i0:i1, :]
 *         M_t = np.sum(M, axis=0)
 */
  __pyx_t_1 = __pyx_v_self->i_start;
  __pyx_t_2 = __pyx_v_self->i_end;
  __pyx_v_i0 = __pyx_t_1;
  __pyx_v_i1 = __pyx_t_2;

  /* "mbd/ChRigidBody.pyx":710
 *         """
 *         i0, i1 = self.i_start, self.i_end
 *         M = self.ProtChSystem.model.levelModelList[-1].coefficients.netMoments[i0:i1, :]             # <<<<<<<<<<<<<<
 *         M_t = np.sum(M, axis=0)
 *         # !!!!!!!!!!!! UPDATE BARYCENTER !!!!!!!!!!!!
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->ProtChSystem->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_coefficients); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_netMoments); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_i0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_i1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PySlice_New(__pyx_t_3, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_slice__40);
  __Pyx_GIVEREF(__pyx_slice__40);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_slice__40);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_GetItem(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_M = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "mbd/ChRigidBody.pyx":711
 *         i0, i1 = self.i_start, self.i_end
 *         M = self.ProtChSystem.model.levelModelList[-1].coefficients.netMoments[i0:i1, :]
 *         M_t = np.sum(M, axis=0)             # <<<<<<<<<<<<<<
 *         # !!!!!!!!!!!! UPDATE BARYCENTER !!!!!!!!!!!!
 *         Fx, Fy, Fz = self.F_prot
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_sum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_M);
  __Pyx_GIVEREF(__pyx_v_M);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_M);
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 711, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_M_t = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":713
 *         M_t = np.sum(M, axis=0)
 *         # !!!!!!!!!!!! UPDATE BARYCENTER !!!!!!!!!!!!
 *         Fx, Fy, Fz = self.F_prot             # <<<<<<<<<<<<<<
 *         rx, ry, rz = self.barycenter0-self.ChBody.GetPos()
 *         Mp = np.array([ry*Fz-rz*Fy, -(rx*Fz-rz*Fx), (rx*Fy-ry*Fx)])
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->F_prot);
  __Pyx_INCREF(__pyx_t_3);
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 713, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    index = 2; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 3) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 713, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_Fx = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_Fy = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_Fz = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":714
 *         # !!!!!!!!!!!! UPDATE BARYCENTER !!!!!!!!!!!!
 *         Fx, Fy, Fz = self.F_prot
 *         rx, ry, rz = self.barycenter0-self.ChBody.GetPos()             # <<<<<<<<<<<<<<
 *         Mp = np.array([ry*Fz-rz*Fy, -(rx*Fz-rz*Fx), (rx*Fy-ry*Fx)])
 *         M_t += Mp
 */
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.GetPos(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Subtract(((PyObject *)__pyx_v_self->barycenter0), __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
    PyObject* sequence = __pyx_t_5;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 714, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_7 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    index = 2; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 3) < 0) __PYX_ERR(0, 714, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 714, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_rx = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_ry = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_rz = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":715
 *         Fx, Fy, Fz = self.F_prot
 *         rx, ry, rz = self.barycenter0-self.ChBody.GetPos()
 *         Mp = np.array([ry*Fz-rz*Fy, -(rx*Fz-rz*Fx), (rx*Fy-ry*Fx)])             # <<<<<<<<<<<<<<
 *         M_t += Mp
 *         return M_t
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_ry, __pyx_v_Fz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_rz, __pyx_v_Fy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyNumber_Subtract(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_rx, __pyx_v_Fz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_rz, __pyx_v_Fx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = PyNumber_Subtract(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Negative(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyNumber_Multiply(__pyx_v_rx, __pyx_v_Fy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_ry, __pyx_v_Fx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = PyNumber_Subtract(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_10);
  __pyx_t_7 = 0;
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_10) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 715, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_3};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_3};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_Mp = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":716
 *         rx, ry, rz = self.barycenter0-self.ChBody.GetPos()
 *         Mp = np.array([ry*Fz-rz*Fy, -(rx*Fz-rz*Fx), (rx*Fy-ry*Fx)])
 *         M_t += Mp             # <<<<<<<<<<<<<<
 *         return M_t
 * 
 */
  __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_M_t, __pyx_v_Mp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF_SET(__pyx_v_M_t, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":717
 *         Mp = np.array([ry*Fz-rz*Fy, -(rx*Fz-rz*Fx), (rx*Fy-ry*Fx)])
 *         M_t += Mp
 *         return M_t             # <<<<<<<<<<<<<<
 * 
 *     def SetPos(self, double[:] pos):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_M_t);
  __pyx_r = __pyx_v_M_t;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":700
 *         return F_t
 * 
 *     def getMoments(self):             # <<<<<<<<<<<<<<
 *         """Gives moments from fluid (Proteus) acting on body
 *         (!) Only works during proteus simulation
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.getMoments", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_M);
  __Pyx_XDECREF(__pyx_v_M_t);
  __Pyx_XDECREF(__pyx_v_Fx);
  __Pyx_XDECREF(__pyx_v_Fy);
  __Pyx_XDECREF(__pyx_v_Fz);
  __Pyx_XDECREF(__pyx_v_rx);
  __Pyx_XDECREF(__pyx_v_ry);
  __Pyx_XDECREF(__pyx_v_rz);
  __Pyx_XDECREF(__pyx_v_Mp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":719
 *         return M_t
 * 
 *     def SetPos(self, double[:] pos):             # <<<<<<<<<<<<<<
 *         """Sets current position of body
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_57SetPos(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_56SetPos[] = "Sets current position of body\n\n        Parameters\n        ----------\n        pos: array_like\n            position of body (array of length 3)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_57SetPos(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos) {
  __Pyx_memviewslice __pyx_v_pos = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetPos (wrapper)", 0);
  assert(__pyx_arg_pos); {
    __pyx_v_pos = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_arg_pos); if (unlikely(!__pyx_v_pos.memview)) __PYX_ERR(0, 719, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.SetPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_56SetPos(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_pos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_56SetPos(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, __Pyx_memviewslice __pyx_v_pos) {
  ChVector<double>  __pyx_v_pos_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("SetPos", 0);

  /* "mbd/ChRigidBody.pyx":727
 *             position of body (array of length 3)
 *         """
 *         assert len(pos) == 3, 'Position aray must be of length 3'             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector pos_vec
 *         pos_vec = ch.ChVector[double](pos[0], pos[1], pos[2])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_pos, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!((__pyx_t_2 == 3) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Position_aray_must_be_of_length);
      __PYX_ERR(0, 727, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":729
 *         assert len(pos) == 3, 'Position aray must be of length 3'
 *         cdef ch.ChVector pos_vec
 *         pos_vec = ch.ChVector[double](pos[0], pos[1], pos[2])             # <<<<<<<<<<<<<<
 *         deref(self.thisptr.body).SetPos(pos_vec)
 * 
 */
  __pyx_t_3 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_v_pos.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_v_pos.shape[0])) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(0, 729, __pyx_L1_error)
  }
  __pyx_t_5 = 1;
  __pyx_t_4 = -1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_v_pos.shape[0];
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_5 >= __pyx_v_pos.shape[0])) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(0, 729, __pyx_L1_error)
  }
  __pyx_t_6 = 2;
  __pyx_t_4 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_pos.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_pos.shape[0])) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(0, 729, __pyx_L1_error)
  }
  __pyx_v_pos_vec = ((ChVector<double> )ChVector<double> ((*((double *) ( /* dim=0 */ (__pyx_v_pos.data + __pyx_t_3 * __pyx_v_pos.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_pos.data + __pyx_t_5 * __pyx_v_pos.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_pos.data + __pyx_t_6 * __pyx_v_pos.strides[0]) )))));

  /* "mbd/ChRigidBody.pyx":730
 *         cdef ch.ChVector pos_vec
 *         pos_vec = ch.ChVector[double](pos[0], pos[1], pos[2])
 *         deref(self.thisptr.body).SetPos(pos_vec)             # <<<<<<<<<<<<<<
 * 
 *     def SetRot(self, double[:] rot):
 */
  try {
    (*__pyx_v_self->thisptr->body).SetPos(__pyx_v_pos_vec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 730, __pyx_L1_error)
  }

  /* "mbd/ChRigidBody.pyx":719
 *         return M_t
 * 
 *     def SetPos(self, double[:] pos):             # <<<<<<<<<<<<<<
 *         """Sets current position of body
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.SetPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_pos, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":732
 *         deref(self.thisptr.body).SetPos(pos_vec)
 * 
 *     def SetRot(self, double[:] rot):             # <<<<<<<<<<<<<<
 *         """Sets current rotation (quaternion) of body
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_59SetRot(PyObject *__pyx_v_self, PyObject *__pyx_arg_rot); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_58SetRot[] = "Sets current rotation (quaternion) of body\n\n        Parameters\n        ----------\n        rot: array_like\n           rotation of body (array of length 4)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_59SetRot(PyObject *__pyx_v_self, PyObject *__pyx_arg_rot) {
  __Pyx_memviewslice __pyx_v_rot = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetRot (wrapper)", 0);
  assert(__pyx_arg_rot); {
    __pyx_v_rot = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_arg_rot); if (unlikely(!__pyx_v_rot.memview)) __PYX_ERR(0, 732, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.SetRot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_58SetRot(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_rot);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_58SetRot(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, __Pyx_memviewslice __pyx_v_rot) {
  ChQuaternion<double>  __pyx_v_rot_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("SetRot", 0);

  /* "mbd/ChRigidBody.pyx":740
 *            rotation of body (array of length 4)
 *         """
 *         assert len(rot) == 4, 'Position aray must be of length 4'             # <<<<<<<<<<<<<<
 *         cdef ch.ChQuaternion rot_vec
 *         rot_vec = ch.ChQuaternion[double](rot[0], rot[1], rot[2], rot[3])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_rot, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!((__pyx_t_2 == 4) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Position_aray_must_be_of_length_2);
      __PYX_ERR(0, 740, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":742
 *         assert len(rot) == 4, 'Position aray must be of length 4'
 *         cdef ch.ChQuaternion rot_vec
 *         rot_vec = ch.ChQuaternion[double](rot[0], rot[1], rot[2], rot[3])             # <<<<<<<<<<<<<<
 *         deref(self.thisptr.body).SetRot(rot_vec)
 * 
 */
  __pyx_t_3 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_v_rot.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_v_rot.shape[0])) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(0, 742, __pyx_L1_error)
  }
  __pyx_t_5 = 1;
  __pyx_t_4 = -1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_v_rot.shape[0];
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_5 >= __pyx_v_rot.shape[0])) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(0, 742, __pyx_L1_error)
  }
  __pyx_t_6 = 2;
  __pyx_t_4 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_rot.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_rot.shape[0])) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(0, 742, __pyx_L1_error)
  }
  __pyx_t_7 = 3;
  __pyx_t_4 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_rot.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_rot.shape[0])) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(0, 742, __pyx_L1_error)
  }
  __pyx_v_rot_vec = ((ChQuaternion<double> )ChQuaternion<double> ((*((double *) ( /* dim=0 */ (__pyx_v_rot.data + __pyx_t_3 * __pyx_v_rot.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_rot.data + __pyx_t_5 * __pyx_v_rot.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_rot.data + __pyx_t_6 * __pyx_v_rot.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_rot.data + __pyx_t_7 * __pyx_v_rot.strides[0]) )))));

  /* "mbd/ChRigidBody.pyx":743
 *         cdef ch.ChQuaternion rot_vec
 *         rot_vec = ch.ChQuaternion[double](rot[0], rot[1], rot[2], rot[3])
 *         deref(self.thisptr.body).SetRot(rot_vec)             # <<<<<<<<<<<<<<
 * 
 *     def getRotationMatrix(self):
 */
  try {
    (*__pyx_v_self->thisptr->body).SetRot(__pyx_v_rot_vec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 743, __pyx_L1_error)
  }

  /* "mbd/ChRigidBody.pyx":732
 *         deref(self.thisptr.body).SetPos(pos_vec)
 * 
 *     def SetRot(self, double[:] rot):             # <<<<<<<<<<<<<<
 *         """Sets current rotation (quaternion) of body
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.SetRot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_rot, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":745
 *         deref(self.thisptr.body).SetRot(rot_vec)
 * 
 *     def getRotationMatrix(self):             # <<<<<<<<<<<<<<
 *         """Gives current rotation (matrix) of body
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_61getRotationMatrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_60getRotationMatrix[] = "Gives current rotation (matrix) of body\n\n        Returns\n        -------\n        rot: array_like\n            current rotation (matrix) of body\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_61getRotationMatrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRotationMatrix (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_60getRotationMatrix(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_60getRotationMatrix(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  double __pyx_v_x0;
  double __pyx_v_x1;
  double __pyx_v_x2;
  double __pyx_v_y0;
  double __pyx_v_y1;
  double __pyx_v_y2;
  double __pyx_v_z0;
  double __pyx_v_z1;
  double __pyx_v_z2;
  PyObject *__pyx_v_rot = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("getRotationMatrix", 0);

  /* "mbd/ChRigidBody.pyx":753
 *             current rotation (matrix) of body
 *         """
 *         x0 = self.thisptr.rotm.Get_A_Xaxis().x()             # <<<<<<<<<<<<<<
 *         x1 = self.thisptr.rotm.Get_A_Xaxis().y()
 *         x2 = self.thisptr.rotm.Get_A_Xaxis().z()
 */
  __pyx_v_x0 = __pyx_v_self->thisptr->rotm.Get_A_Xaxis().x();

  /* "mbd/ChRigidBody.pyx":754
 *         """
 *         x0 = self.thisptr.rotm.Get_A_Xaxis().x()
 *         x1 = self.thisptr.rotm.Get_A_Xaxis().y()             # <<<<<<<<<<<<<<
 *         x2 = self.thisptr.rotm.Get_A_Xaxis().z()
 *         y0 = self.thisptr.rotm.Get_A_Yaxis().x()
 */
  __pyx_v_x1 = __pyx_v_self->thisptr->rotm.Get_A_Xaxis().y();

  /* "mbd/ChRigidBody.pyx":755
 *         x0 = self.thisptr.rotm.Get_A_Xaxis().x()
 *         x1 = self.thisptr.rotm.Get_A_Xaxis().y()
 *         x2 = self.thisptr.rotm.Get_A_Xaxis().z()             # <<<<<<<<<<<<<<
 *         y0 = self.thisptr.rotm.Get_A_Yaxis().x()
 *         y1 = self.thisptr.rotm.Get_A_Yaxis().y()
 */
  __pyx_v_x2 = __pyx_v_self->thisptr->rotm.Get_A_Xaxis().z();

  /* "mbd/ChRigidBody.pyx":756
 *         x1 = self.thisptr.rotm.Get_A_Xaxis().y()
 *         x2 = self.thisptr.rotm.Get_A_Xaxis().z()
 *         y0 = self.thisptr.rotm.Get_A_Yaxis().x()             # <<<<<<<<<<<<<<
 *         y1 = self.thisptr.rotm.Get_A_Yaxis().y()
 *         y2 = self.thisptr.rotm.Get_A_Yaxis().z()
 */
  __pyx_v_y0 = __pyx_v_self->thisptr->rotm.Get_A_Yaxis().x();

  /* "mbd/ChRigidBody.pyx":757
 *         x2 = self.thisptr.rotm.Get_A_Xaxis().z()
 *         y0 = self.thisptr.rotm.Get_A_Yaxis().x()
 *         y1 = self.thisptr.rotm.Get_A_Yaxis().y()             # <<<<<<<<<<<<<<
 *         y2 = self.thisptr.rotm.Get_A_Yaxis().z()
 *         z0 = self.thisptr.rotm.Get_A_Zaxis().x()
 */
  __pyx_v_y1 = __pyx_v_self->thisptr->rotm.Get_A_Yaxis().y();

  /* "mbd/ChRigidBody.pyx":758
 *         y0 = self.thisptr.rotm.Get_A_Yaxis().x()
 *         y1 = self.thisptr.rotm.Get_A_Yaxis().y()
 *         y2 = self.thisptr.rotm.Get_A_Yaxis().z()             # <<<<<<<<<<<<<<
 *         z0 = self.thisptr.rotm.Get_A_Zaxis().x()
 *         z1 = self.thisptr.rotm.Get_A_Zaxis().y()
 */
  __pyx_v_y2 = __pyx_v_self->thisptr->rotm.Get_A_Yaxis().z();

  /* "mbd/ChRigidBody.pyx":759
 *         y1 = self.thisptr.rotm.Get_A_Yaxis().y()
 *         y2 = self.thisptr.rotm.Get_A_Yaxis().z()
 *         z0 = self.thisptr.rotm.Get_A_Zaxis().x()             # <<<<<<<<<<<<<<
 *         z1 = self.thisptr.rotm.Get_A_Zaxis().y()
 *         z2 = self.thisptr.rotm.Get_A_Zaxis().z()
 */
  __pyx_v_z0 = __pyx_v_self->thisptr->rotm.Get_A_Zaxis().x();

  /* "mbd/ChRigidBody.pyx":760
 *         y2 = self.thisptr.rotm.Get_A_Yaxis().z()
 *         z0 = self.thisptr.rotm.Get_A_Zaxis().x()
 *         z1 = self.thisptr.rotm.Get_A_Zaxis().y()             # <<<<<<<<<<<<<<
 *         z2 = self.thisptr.rotm.Get_A_Zaxis().z()
 *         rot = np.array([x0, x1, x2],
 */
  __pyx_v_z1 = __pyx_v_self->thisptr->rotm.Get_A_Zaxis().y();

  /* "mbd/ChRigidBody.pyx":761
 *         z0 = self.thisptr.rotm.Get_A_Zaxis().x()
 *         z1 = self.thisptr.rotm.Get_A_Zaxis().y()
 *         z2 = self.thisptr.rotm.Get_A_Zaxis().z()             # <<<<<<<<<<<<<<
 *         rot = np.array([x0, x1, x2],
 *                        [y0, y1, y2],
 */
  __pyx_v_z2 = __pyx_v_self->thisptr->rotm.Get_A_Zaxis().z();

  /* "mbd/ChRigidBody.pyx":762
 *         z1 = self.thisptr.rotm.Get_A_Zaxis().y()
 *         z2 = self.thisptr.rotm.Get_A_Zaxis().z()
 *         rot = np.array([x0, x1, x2],             # <<<<<<<<<<<<<<
 *                        [y0, y1, y2],
 *                        [z0, z1, z2])
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":763
 *         z2 = self.thisptr.rotm.Get_A_Zaxis().z()
 *         rot = np.array([x0, x1, x2],
 *                        [y0, y1, y2],             # <<<<<<<<<<<<<<
 *                        [z0, z1, z2])
 *         return rot
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_2);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":764
 *         rot = np.array([x0, x1, x2],
 *                        [y0, y1, y2],
 *                        [z0, z1, z2])             # <<<<<<<<<<<<<<
 *         return rot
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_9, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_9, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_9, __pyx_t_8);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_rot = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":765
 *                        [y0, y1, y2],
 *                        [z0, z1, z2])
 *         return rot             # <<<<<<<<<<<<<<
 * 
 *     def prestep(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_rot);
  __pyx_r = __pyx_v_rot;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":745
 *         deref(self.thisptr.body).SetRot(rot_vec)
 * 
 *     def getRotationMatrix(self):             # <<<<<<<<<<<<<<
 *         """Gives current rotation (matrix) of body
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.getRotationMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rot);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":767
 *         return rot
 * 
 *     def prestep(self):             # <<<<<<<<<<<<<<
 *         """Called before Chrono system step.
 *         Sets external forces automatically from Proteus solution.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_63prestep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_62prestep[] = "Called before Chrono system step.\n        Sets external forces automatically from Proteus solution.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_63prestep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prestep (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_62prestep(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_62prestep(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_v_am = NULL;
  int __pyx_v_i;
  PyObject *__pyx_v_Aij = NULL;
  PyObject *__pyx_v_aa = NULL;
  PyObject *__pyx_v_Aija = NULL;
  PyObject *__pyx_v_F_bar = NULL;
  PyObject *__pyx_v_M_bar = NULL;
  long __pyx_v_F_solid_type;
  PyObject *__pyx_v_F_body = NULL;
  PyObject *__pyx_v_M_body = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("prestep", 0);

  /* "mbd/ChRigidBody.pyx":771
 *         Sets external forces automatically from Proteus solution.
 *         """
 *         self.storeValues()             # <<<<<<<<<<<<<<
 *         # if self.ProtChSystem.thisptr.system.GetChTime() > 0.0003 or self.ProtChSystem.model is None:  # CHANGE
 *         #     # if self.ProtChSystem.step_nb > self.ProtChSystem.step_start:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_storeValues); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":775
 *         #     # if self.ProtChSystem.step_nb > self.ProtChSystem.step_start:
 *         #     self.ChBody.SetBodyFixed(False)
 *         if self.ProtChSystem.model is not None:             # <<<<<<<<<<<<<<
 *             if self.ProtChSystem.model_addedmass is not None:
 *                 # getting added mass matrix
 */
  __pyx_t_4 = (__pyx_v_self->ProtChSystem->model != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "mbd/ChRigidBody.pyx":776
 *         #     self.ChBody.SetBodyFixed(False)
 *         if self.ProtChSystem.model is not None:
 *             if self.ProtChSystem.model_addedmass is not None:             # <<<<<<<<<<<<<<
 *                 # getting added mass matrix
 *                 self.Aij[:] = 0
 */
    __pyx_t_5 = (__pyx_v_self->ProtChSystem->model_addedmass != Py_None);
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {

      /* "mbd/ChRigidBody.pyx":778
 *             if self.ProtChSystem.model_addedmass is not None:
 *                 # getting added mass matrix
 *                 self.Aij[:] = 0             # <<<<<<<<<<<<<<
 *                 am = self.ProtChSystem.model_addedmass.levelModelList[-1]
 *                 for i in range(self.i_start, self.i_end):
 */
      if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->Aij), __pyx_int_0, 0, 0, NULL, NULL, &__pyx_slice__41, 0, 0, 1) < 0) __PYX_ERR(0, 778, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":779
 *                 # getting added mass matrix
 *                 self.Aij[:] = 0
 *                 am = self.ProtChSystem.model_addedmass.levelModelList[-1]             # <<<<<<<<<<<<<<
 *                 for i in range(self.i_start, self.i_end):
 *                     self.Aij += am.Aij[i]
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->ProtChSystem->model_addedmass, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_am = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":780
 *                 self.Aij[:] = 0
 *                 am = self.ProtChSystem.model_addedmass.levelModelList[-1]
 *                 for i in range(self.i_start, self.i_end):             # <<<<<<<<<<<<<<
 *                     self.Aij += am.Aij[i]
 *                 if self.width_2D:
 */
      __pyx_t_6 = __pyx_v_self->i_end;
      for (__pyx_t_7 = __pyx_v_self->i_start; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "mbd/ChRigidBody.pyx":781
 *                 am = self.ProtChSystem.model_addedmass.levelModelList[-1]
 *                 for i in range(self.i_start, self.i_end):
 *                     self.Aij += am.Aij[i]             # <<<<<<<<<<<<<<
 *                 if self.width_2D:
 *                     self.Aij *= self.width_2D
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_am, __pyx_n_s_Aij); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_self->Aij), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 781, __pyx_L1_error)
        __Pyx_GIVEREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_v_self->Aij);
        __Pyx_DECREF(((PyObject *)__pyx_v_self->Aij));
        __pyx_v_self->Aij = ((PyArrayObject *)__pyx_t_2);
        __pyx_t_2 = 0;
      }

      /* "mbd/ChRigidBody.pyx":782
 *                 for i in range(self.i_start, self.i_end):
 *                     self.Aij += am.Aij[i]
 *                 if self.width_2D:             # <<<<<<<<<<<<<<
 *                     self.Aij *= self.width_2D
 *         # setting added mass
 */
      __pyx_t_4 = (__pyx_v_self->width_2D != 0);
      if (__pyx_t_4) {

        /* "mbd/ChRigidBody.pyx":783
 *                     self.Aij += am.Aij[i]
 *                 if self.width_2D:
 *                     self.Aij *= self.width_2D             # <<<<<<<<<<<<<<
 *         # setting added mass
 *         if self.applyAddedMass is True:
 */
        __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->width_2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_self->Aij), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 783, __pyx_L1_error)
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_v_self->Aij);
        __Pyx_DECREF(((PyObject *)__pyx_v_self->Aij));
        __pyx_v_self->Aij = ((PyArrayObject *)__pyx_t_1);
        __pyx_t_1 = 0;

        /* "mbd/ChRigidBody.pyx":782
 *                 for i in range(self.i_start, self.i_end):
 *                     self.Aij += am.Aij[i]
 *                 if self.width_2D:             # <<<<<<<<<<<<<<
 *                     self.Aij *= self.width_2D
 *         # setting added mass
 */
      }

      /* "mbd/ChRigidBody.pyx":776
 *         #     self.ChBody.SetBodyFixed(False)
 *         if self.ProtChSystem.model is not None:
 *             if self.ProtChSystem.model_addedmass is not None:             # <<<<<<<<<<<<<<
 *                 # getting added mass matrix
 *                 self.Aij[:] = 0
 */
    }

    /* "mbd/ChRigidBody.pyx":775
 *         #     # if self.ProtChSystem.step_nb > self.ProtChSystem.step_start:
 *         #     self.ChBody.SetBodyFixed(False)
 *         if self.ProtChSystem.model is not None:             # <<<<<<<<<<<<<<
 *             if self.ProtChSystem.model_addedmass is not None:
 *                 # getting added mass matrix
 */
  }

  /* "mbd/ChRigidBody.pyx":785
 *                     self.Aij *= self.width_2D
 *         # setting added mass
 *         if self.applyAddedMass is True:             # <<<<<<<<<<<<<<
 *             Aij = np.zeros((6,6))
 *             Aij[:] = self.Aij[:]
 */
  __pyx_t_4 = ((__pyx_v_self->applyAddedMass == 1) != 0);
  if (__pyx_t_4) {

    /* "mbd/ChRigidBody.pyx":786
 *         # setting added mass
 *         if self.applyAddedMass is True:
 *             Aij = np.zeros((6,6))             # <<<<<<<<<<<<<<
 *             Aij[:] = self.Aij[:]
 *             Aij[0, 1:] *= self.thisptr.free_x.x()
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_Aij = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":787
 *         if self.applyAddedMass is True:
 *             Aij = np.zeros((6,6))
 *             Aij[:] = self.Aij[:]             # <<<<<<<<<<<<<<
 *             Aij[0, 1:] *= self.thisptr.free_x.x()
 *             Aij[1, 0] *= self.thisptr.free_x.y()
 */
    __pyx_t_1 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->Aij), 0, 0, NULL, NULL, &__pyx_slice__44, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_PyObject_SetSlice(__pyx_v_Aij, __pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice__45, 0, 0, 1) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":788
 *             Aij = np.zeros((6,6))
 *             Aij[:] = self.Aij[:]
 *             Aij[0, 1:] *= self.thisptr.free_x.x()             # <<<<<<<<<<<<<<
 *             Aij[1, 0] *= self.thisptr.free_x.y()
 *             Aij[1, 2:] *= self.thisptr.free_x.y()
 */
    __Pyx_INCREF(__pyx_tuple__47);
    __pyx_t_8 = __pyx_tuple__47;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_Aij, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->free_x.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_Aij, __pyx_t_8, __pyx_t_3) < 0)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":789
 *             Aij[:] = self.Aij[:]
 *             Aij[0, 1:] *= self.thisptr.free_x.x()
 *             Aij[1, 0] *= self.thisptr.free_x.y()             # <<<<<<<<<<<<<<
 *             Aij[1, 2:] *= self.thisptr.free_x.y()
 *             Aij[2, :2] *= self.thisptr.free_x.z()
 */
    __Pyx_INCREF(__pyx_tuple__48);
    __pyx_t_8 = __pyx_tuple__48;
    __pyx_t_3 = PyObject_GetItem(__pyx_v_Aij, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->free_x.y()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_Aij, __pyx_t_8, __pyx_t_1) < 0)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":790
 *             Aij[0, 1:] *= self.thisptr.free_x.x()
 *             Aij[1, 0] *= self.thisptr.free_x.y()
 *             Aij[1, 2:] *= self.thisptr.free_x.y()             # <<<<<<<<<<<<<<
 *             Aij[2, :2] *= self.thisptr.free_x.z()
 *             Aij[2, 3:] *= self.thisptr.free_x.z()
 */
    __Pyx_INCREF(__pyx_tuple__50);
    __pyx_t_8 = __pyx_tuple__50;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_Aij, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->free_x.y()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 790, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_Aij, __pyx_t_8, __pyx_t_3) < 0)) __PYX_ERR(0, 790, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":791
 *             Aij[1, 0] *= self.thisptr.free_x.y()
 *             Aij[1, 2:] *= self.thisptr.free_x.y()
 *             Aij[2, :2] *= self.thisptr.free_x.z()             # <<<<<<<<<<<<<<
 *             Aij[2, 3:] *= self.thisptr.free_x.z()
 *             Aij[3, :3] *= self.thisptr.free_r.x()
 */
    __Pyx_INCREF(__pyx_tuple__52);
    __pyx_t_8 = __pyx_tuple__52;
    __pyx_t_3 = PyObject_GetItem(__pyx_v_Aij, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->free_x.z()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_Aij, __pyx_t_8, __pyx_t_1) < 0)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":792
 *             Aij[1, 2:] *= self.thisptr.free_x.y()
 *             Aij[2, :2] *= self.thisptr.free_x.z()
 *             Aij[2, 3:] *= self.thisptr.free_x.z()             # <<<<<<<<<<<<<<
 *             Aij[3, :3] *= self.thisptr.free_r.x()
 *             Aij[3, 4:] *= self.thisptr.free_r.x()
 */
    __Pyx_INCREF(__pyx_tuple__54);
    __pyx_t_8 = __pyx_tuple__54;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_Aij, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->free_x.z()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_Aij, __pyx_t_8, __pyx_t_3) < 0)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":793
 *             Aij[2, :2] *= self.thisptr.free_x.z()
 *             Aij[2, 3:] *= self.thisptr.free_x.z()
 *             Aij[3, :3] *= self.thisptr.free_r.x()             # <<<<<<<<<<<<<<
 *             Aij[3, 4:] *= self.thisptr.free_r.x()
 *             Aij[4, :4] *= self.thisptr.free_r.y()
 */
    __Pyx_INCREF(__pyx_tuple__56);
    __pyx_t_8 = __pyx_tuple__56;
    __pyx_t_3 = PyObject_GetItem(__pyx_v_Aij, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->free_r.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_Aij, __pyx_t_8, __pyx_t_1) < 0)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":794
 *             Aij[2, 3:] *= self.thisptr.free_x.z()
 *             Aij[3, :3] *= self.thisptr.free_r.x()
 *             Aij[3, 4:] *= self.thisptr.free_r.x()             # <<<<<<<<<<<<<<
 *             Aij[4, :4] *= self.thisptr.free_r.y()
 *             Aij[4, 5] *= self.thisptr.free_r.y()
 */
    __Pyx_INCREF(__pyx_tuple__58);
    __pyx_t_8 = __pyx_tuple__58;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_Aij, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->free_r.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_Aij, __pyx_t_8, __pyx_t_3) < 0)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":795
 *             Aij[3, :3] *= self.thisptr.free_r.x()
 *             Aij[3, 4:] *= self.thisptr.free_r.x()
 *             Aij[4, :4] *= self.thisptr.free_r.y()             # <<<<<<<<<<<<<<
 *             Aij[4, 5] *= self.thisptr.free_r.y()
 *             Aij[5, :5] *= self.thisptr.free_r.z()
 */
    __Pyx_INCREF(__pyx_tuple__60);
    __pyx_t_8 = __pyx_tuple__60;
    __pyx_t_3 = PyObject_GetItem(__pyx_v_Aij, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->free_r.y()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_Aij, __pyx_t_8, __pyx_t_1) < 0)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":796
 *             Aij[3, 4:] *= self.thisptr.free_r.x()
 *             Aij[4, :4] *= self.thisptr.free_r.y()
 *             Aij[4, 5] *= self.thisptr.free_r.y()             # <<<<<<<<<<<<<<
 *             Aij[5, :5] *= self.thisptr.free_r.z()
 *             self.setAddedMass(Aij)
 */
    __Pyx_INCREF(__pyx_tuple__61);
    __pyx_t_8 = __pyx_tuple__61;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_Aij, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->free_r.y()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_Aij, __pyx_t_8, __pyx_t_3) < 0)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":797
 *             Aij[4, :4] *= self.thisptr.free_r.y()
 *             Aij[4, 5] *= self.thisptr.free_r.y()
 *             Aij[5, :5] *= self.thisptr.free_r.z()             # <<<<<<<<<<<<<<
 *             self.setAddedMass(Aij)
 *             aa = np.zeros(6)
 */
    __Pyx_INCREF(__pyx_tuple__63);
    __pyx_t_8 = __pyx_tuple__63;
    __pyx_t_3 = PyObject_GetItem(__pyx_v_Aij, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->free_r.z()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_Aij, __pyx_t_8, __pyx_t_1) < 0)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":798
 *             Aij[4, 5] *= self.thisptr.free_r.y()
 *             Aij[5, :5] *= self.thisptr.free_r.z()
 *             self.setAddedMass(Aij)             # <<<<<<<<<<<<<<
 *             aa = np.zeros(6)
 *             aa[:3] = self.acceleration
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setAddedMass); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_Aij); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_Aij};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 798, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_Aij};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 798, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 798, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_v_Aij);
        __Pyx_GIVEREF(__pyx_v_Aij);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_Aij);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 798, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":799
 *             Aij[5, :5] *= self.thisptr.free_r.z()
 *             self.setAddedMass(Aij)
 *             aa = np.zeros(6)             # <<<<<<<<<<<<<<
 *             aa[:3] = self.acceleration
 *             aa[3:] = self.ang_acceleration
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_aa = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":800
 *             self.setAddedMass(Aij)
 *             aa = np.zeros(6)
 *             aa[:3] = self.acceleration             # <<<<<<<<<<<<<<
 *             aa[3:] = self.ang_acceleration
 *             Aija = np.dot(Aij, aa)
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->acceleration);
    __Pyx_INCREF(__pyx_t_1);
    if (__Pyx_PyObject_SetSlice(__pyx_v_aa, __pyx_t_1, 0, 3, NULL, NULL, &__pyx_slice__65, 0, 1, 1) < 0) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":801
 *             aa = np.zeros(6)
 *             aa[:3] = self.acceleration
 *             aa[3:] = self.ang_acceleration             # <<<<<<<<<<<<<<
 *             Aija = np.dot(Aij, aa)
 *         if self.ProtChSystem.model is not None:
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->ang_acceleration);
    __Pyx_INCREF(__pyx_t_1);
    if (__Pyx_PyObject_SetSlice(__pyx_v_aa, __pyx_t_1, 3, 0, NULL, NULL, &__pyx_slice__66, 1, 0, 1) < 0) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":802
 *             aa[:3] = self.acceleration
 *             aa[3:] = self.ang_acceleration
 *             Aija = np.dot(Aij, aa)             # <<<<<<<<<<<<<<
 *         if self.ProtChSystem.model is not None:
 *             self.F_prot = self.getPressureForces()+self.getShearForces()
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dot); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_Aij, __pyx_v_aa};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_Aij, __pyx_v_aa};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_Aij);
      __Pyx_GIVEREF(__pyx_v_Aij);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_Aij);
      __Pyx_INCREF(__pyx_v_aa);
      __Pyx_GIVEREF(__pyx_v_aa);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_aa);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_Aija = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":785
 *                     self.Aij *= self.width_2D
 *         # setting added mass
 *         if self.applyAddedMass is True:             # <<<<<<<<<<<<<<
 *             Aij = np.zeros((6,6))
 *             Aij[:] = self.Aij[:]
 */
  }

  /* "mbd/ChRigidBody.pyx":803
 *             aa[3:] = self.ang_acceleration
 *             Aija = np.dot(Aij, aa)
 *         if self.ProtChSystem.model is not None:             # <<<<<<<<<<<<<<
 *             self.F_prot = self.getPressureForces()+self.getShearForces()
 *             self.M_prot = self.getMoments()
 */
  __pyx_t_4 = (__pyx_v_self->ProtChSystem->model != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "mbd/ChRigidBody.pyx":804
 *             Aija = np.dot(Aij, aa)
 *         if self.ProtChSystem.model is not None:
 *             self.F_prot = self.getPressureForces()+self.getShearForces()             # <<<<<<<<<<<<<<
 *             self.M_prot = self.getMoments()
 *             if self.width_2D:
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPressureForces); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getShearForces); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 804, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->F_prot);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->F_prot));
    __pyx_v_self->F_prot = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":805
 *         if self.ProtChSystem.model is not None:
 *             self.F_prot = self.getPressureForces()+self.getShearForces()
 *             self.M_prot = self.getMoments()             # <<<<<<<<<<<<<<
 *             if self.width_2D:
 *                 self.F_prot *= self.width_2D
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getMoments); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 805, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 805, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 805, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->M_prot);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->M_prot));
    __pyx_v_self->M_prot = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":806
 *             self.F_prot = self.getPressureForces()+self.getShearForces()
 *             self.M_prot = self.getMoments()
 *             if self.width_2D:             # <<<<<<<<<<<<<<
 *                 self.F_prot *= self.width_2D
 *                 self.M_prot *= self.width_2D
 */
    __pyx_t_5 = (__pyx_v_self->width_2D != 0);
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":807
 *             self.M_prot = self.getMoments()
 *             if self.width_2D:
 *                 self.F_prot *= self.width_2D             # <<<<<<<<<<<<<<
 *                 self.M_prot *= self.width_2D
 *             if self.applyAddedMass is True:
 */
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->width_2D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_self->F_prot), __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 807, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_v_self->F_prot);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->F_prot));
      __pyx_v_self->F_prot = ((PyArrayObject *)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "mbd/ChRigidBody.pyx":808
 *             if self.width_2D:
 *                 self.F_prot *= self.width_2D
 *                 self.M_prot *= self.width_2D             # <<<<<<<<<<<<<<
 *             if self.applyAddedMass is True:
 *                 self.F_Aij = Aija[:3]
 */
      __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->width_2D); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_self->M_prot), __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->M_prot);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->M_prot));
      __pyx_v_self->M_prot = ((PyArrayObject *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":806
 *             self.F_prot = self.getPressureForces()+self.getShearForces()
 *             self.M_prot = self.getMoments()
 *             if self.width_2D:             # <<<<<<<<<<<<<<
 *                 self.F_prot *= self.width_2D
 *                 self.M_prot *= self.width_2D
 */
    }

    /* "mbd/ChRigidBody.pyx":809
 *                 self.F_prot *= self.width_2D
 *                 self.M_prot *= self.width_2D
 *             if self.applyAddedMass is True:             # <<<<<<<<<<<<<<
 *                 self.F_Aij = Aija[:3]
 *                 self.M_Aij = Aija[3:]
 */
    __pyx_t_5 = ((__pyx_v_self->applyAddedMass == 1) != 0);
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":810
 *                 self.M_prot *= self.width_2D
 *             if self.applyAddedMass is True:
 *                 self.F_Aij = Aija[:3]             # <<<<<<<<<<<<<<
 *                 self.M_Aij = Aija[3:]
 *                 self.F_prot += self.F_Aij
 */
      if (unlikely(!__pyx_v_Aija)) { __Pyx_RaiseUnboundLocalError("Aija"); __PYX_ERR(0, 810, __pyx_L1_error) }
      __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_Aija, 0, 3, NULL, NULL, &__pyx_slice__67, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->F_Aij);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->F_Aij));
      __pyx_v_self->F_Aij = ((PyArrayObject *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":811
 *             if self.applyAddedMass is True:
 *                 self.F_Aij = Aija[:3]
 *                 self.M_Aij = Aija[3:]             # <<<<<<<<<<<<<<
 *                 self.F_prot += self.F_Aij
 *                 self.M_prot += self.M_Aij
 */
      if (unlikely(!__pyx_v_Aija)) { __Pyx_RaiseUnboundLocalError("Aija"); __PYX_ERR(0, 811, __pyx_L1_error) }
      __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_Aija, 3, 0, NULL, NULL, &__pyx_slice__68, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->M_Aij);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->M_Aij));
      __pyx_v_self->M_Aij = ((PyArrayObject *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":812
 *                 self.F_Aij = Aija[:3]
 *                 self.M_Aij = Aija[3:]
 *                 self.F_prot += self.F_Aij             # <<<<<<<<<<<<<<
 *                 self.M_prot += self.M_Aij
 *             if self.ProtChSystem.first_step is True:
 */
      __pyx_t_3 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_self->F_prot), ((PyObject *)__pyx_v_self->F_Aij)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->F_prot);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->F_prot));
      __pyx_v_self->F_prot = ((PyArrayObject *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":813
 *                 self.M_Aij = Aija[3:]
 *                 self.F_prot += self.F_Aij
 *                 self.M_prot += self.M_Aij             # <<<<<<<<<<<<<<
 *             if self.ProtChSystem.first_step is True:
 *                 # just apply initial conditions for 1st time step
 */
      __pyx_t_3 = PyNumber_InPlaceAdd(((PyObject *)__pyx_v_self->M_prot), ((PyObject *)__pyx_v_self->M_Aij)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->M_prot);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->M_prot));
      __pyx_v_self->M_prot = ((PyArrayObject *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":809
 *                 self.F_prot *= self.width_2D
 *                 self.M_prot *= self.width_2D
 *             if self.applyAddedMass is True:             # <<<<<<<<<<<<<<
 *                 self.F_Aij = Aija[:3]
 *                 self.M_Aij = Aija[3:]
 */
    }

    /* "mbd/ChRigidBody.pyx":814
 *                 self.F_prot += self.F_Aij
 *                 self.M_prot += self.M_Aij
 *             if self.ProtChSystem.first_step is True:             # <<<<<<<<<<<<<<
 *                 # just apply initial conditions for 1st time step
 *                 F_bar = self.F_prot
 */
    __pyx_t_5 = ((__pyx_v_self->ProtChSystem->first_step == 1) != 0);
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":816
 *             if self.ProtChSystem.first_step is True:
 *                 # just apply initial conditions for 1st time step
 *                 F_bar = self.F_prot             # <<<<<<<<<<<<<<
 *                 M_bar = self.M_prot
 *             else:
 */
      __pyx_t_3 = ((PyObject *)__pyx_v_self->F_prot);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_F_bar = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":817
 *                 # just apply initial conditions for 1st time step
 *                 F_bar = self.F_prot
 *                 M_bar = self.M_prot             # <<<<<<<<<<<<<<
 *             else:
 *                 # actual force applied to body
 */
      __pyx_t_3 = ((PyObject *)__pyx_v_self->M_prot);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_M_bar = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":814
 *                 self.F_prot += self.F_Aij
 *                 self.M_prot += self.M_Aij
 *             if self.ProtChSystem.first_step is True:             # <<<<<<<<<<<<<<
 *                 # just apply initial conditions for 1st time step
 *                 F_bar = self.F_prot
 */
      goto __pyx_L12;
    }

    /* "mbd/ChRigidBody.pyx":820
 *             else:
 *                 # actual force applied to body
 *                 if self.ProtChSystem.prediction == "backwardEuler":             # <<<<<<<<<<<<<<
 *                     F_bar = self.F_prot
 *                     M_bar = self.M_prot
 */
    /*else*/ {
      __pyx_t_5 = ((__pyx_v_self->ProtChSystem->prediction == ((char *)"backwardEuler")) != 0);
      if (__pyx_t_5) {

        /* "mbd/ChRigidBody.pyx":821
 *                 # actual force applied to body
 *                 if self.ProtChSystem.prediction == "backwardEuler":
 *                     F_bar = self.F_prot             # <<<<<<<<<<<<<<
 *                     M_bar = self.M_prot
 *                 if self.ProtChSystem.prediction == "forwardEuler":
 */
        __pyx_t_3 = ((PyObject *)__pyx_v_self->F_prot);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_F_bar = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "mbd/ChRigidBody.pyx":822
 *                 if self.ProtChSystem.prediction == "backwardEuler":
 *                     F_bar = self.F_prot
 *                     M_bar = self.M_prot             # <<<<<<<<<<<<<<
 *                 if self.ProtChSystem.prediction == "forwardEuler":
 *                     F_bar = self.F_prot_last
 */
        __pyx_t_3 = ((PyObject *)__pyx_v_self->M_prot);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_M_bar = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "mbd/ChRigidBody.pyx":820
 *             else:
 *                 # actual force applied to body
 *                 if self.ProtChSystem.prediction == "backwardEuler":             # <<<<<<<<<<<<<<
 *                     F_bar = self.F_prot
 *                     M_bar = self.M_prot
 */
      }

      /* "mbd/ChRigidBody.pyx":823
 *                     F_bar = self.F_prot
 *                     M_bar = self.M_prot
 *                 if self.ProtChSystem.prediction == "forwardEuler":             # <<<<<<<<<<<<<<
 *                     F_bar = self.F_prot_last
 *                     M_bar = self.M_prot_last
 */
      __pyx_t_5 = ((__pyx_v_self->ProtChSystem->prediction == ((char *)"forwardEuler")) != 0);
      if (__pyx_t_5) {

        /* "mbd/ChRigidBody.pyx":824
 *                     M_bar = self.M_prot
 *                 if self.ProtChSystem.prediction == "forwardEuler":
 *                     F_bar = self.F_prot_last             # <<<<<<<<<<<<<<
 *                     M_bar = self.M_prot_last
 *                 if self.ProtChSystem.prediction == "implicitOrder2":
 */
        __pyx_t_3 = ((PyObject *)__pyx_v_self->F_prot_last);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_XDECREF_SET(__pyx_v_F_bar, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "mbd/ChRigidBody.pyx":825
 *                 if self.ProtChSystem.prediction == "forwardEuler":
 *                     F_bar = self.F_prot_last
 *                     M_bar = self.M_prot_last             # <<<<<<<<<<<<<<
 *                 if self.ProtChSystem.prediction == "implicitOrder2":
 *                     F_bar = (self.F_prot+self.F_prot_last)/2.
 */
        __pyx_t_3 = ((PyObject *)__pyx_v_self->M_prot_last);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_XDECREF_SET(__pyx_v_M_bar, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "mbd/ChRigidBody.pyx":823
 *                     F_bar = self.F_prot
 *                     M_bar = self.M_prot
 *                 if self.ProtChSystem.prediction == "forwardEuler":             # <<<<<<<<<<<<<<
 *                     F_bar = self.F_prot_last
 *                     M_bar = self.M_prot_last
 */
      }

      /* "mbd/ChRigidBody.pyx":826
 *                     F_bar = self.F_prot_last
 *                     M_bar = self.M_prot_last
 *                 if self.ProtChSystem.prediction == "implicitOrder2":             # <<<<<<<<<<<<<<
 *                     F_bar = (self.F_prot+self.F_prot_last)/2.
 *                     M_bar = (self.M_prot+self.M_prot_last)/2.
 */
      __pyx_t_5 = ((__pyx_v_self->ProtChSystem->prediction == ((char *)"implicitOrder2")) != 0);
      if (__pyx_t_5) {

        /* "mbd/ChRigidBody.pyx":827
 *                     M_bar = self.M_prot_last
 *                 if self.ProtChSystem.prediction == "implicitOrder2":
 *                     F_bar = (self.F_prot+self.F_prot_last)/2.             # <<<<<<<<<<<<<<
 *                     M_bar = (self.M_prot+self.M_prot_last)/2.
 *                     # self.F_applied = self.F_prot
 */
        __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_v_self->F_prot), ((PyObject *)__pyx_v_self->F_prot_last)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 827, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = __Pyx_PyFloat_DivideObjC(__pyx_t_3, __pyx_float_2_, 2., 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 827, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_F_bar, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "mbd/ChRigidBody.pyx":828
 *                 if self.ProtChSystem.prediction == "implicitOrder2":
 *                     F_bar = (self.F_prot+self.F_prot_last)/2.
 *                     M_bar = (self.M_prot+self.M_prot_last)/2.             # <<<<<<<<<<<<<<
 *                     # self.F_applied = self.F_prot
 *                     # self.M_applied = self.M_prot
 */
        __pyx_t_9 = PyNumber_Add(((PyObject *)__pyx_v_self->M_prot), ((PyObject *)__pyx_v_self->M_prot_last)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = __Pyx_PyFloat_DivideObjC(__pyx_t_9, __pyx_float_2_, 2., 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_M_bar, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "mbd/ChRigidBody.pyx":826
 *                     F_bar = self.F_prot_last
 *                     M_bar = self.M_prot_last
 *                 if self.ProtChSystem.prediction == "implicitOrder2":             # <<<<<<<<<<<<<<
 *                     F_bar = (self.F_prot+self.F_prot_last)/2.
 *                     M_bar = (self.M_prot+self.M_prot_last)/2.
 */
      }
    }
    __pyx_L12:;

    /* "mbd/ChRigidBody.pyx":833
 *                     # self.F_applied = 2*F_bar - self.F_applied_last
 *                     # self.M_applied = 2*M_bar - self.M_applied_last
 *             F_solid_type = 1             # <<<<<<<<<<<<<<
 *             if F_solid_type == 1:
 *                 F_body = F_bar
 */
    __pyx_v_F_solid_type = 1;

    /* "mbd/ChRigidBody.pyx":834
 *                     # self.M_applied = 2*M_bar - self.M_applied_last
 *             F_solid_type = 1
 *             if F_solid_type == 1:             # <<<<<<<<<<<<<<
 *                 F_body = F_bar
 *                 M_body = M_bar
 */
    switch (__pyx_v_F_solid_type) {
      case 1:

      /* "mbd/ChRigidBody.pyx":835
 *             F_solid_type = 1
 *             if F_solid_type == 1:
 *                 F_body = F_bar             # <<<<<<<<<<<<<<
 *                 M_body = M_bar
 *             elif F_solid_type == 2:
 */
      if (unlikely(!__pyx_v_F_bar)) { __Pyx_RaiseUnboundLocalError("F_bar"); __PYX_ERR(0, 835, __pyx_L1_error) }
      __Pyx_INCREF(__pyx_v_F_bar);
      __pyx_v_F_body = __pyx_v_F_bar;

      /* "mbd/ChRigidBody.pyx":836
 *             if F_solid_type == 1:
 *                 F_body = F_bar
 *                 M_body = M_bar             # <<<<<<<<<<<<<<
 *             elif F_solid_type == 2:
 *                 if np.linalg.norm(self.F_prot_last) == 0:  # first time step
 */
      if (unlikely(!__pyx_v_M_bar)) { __Pyx_RaiseUnboundLocalError("M_bar"); __PYX_ERR(0, 836, __pyx_L1_error) }
      __Pyx_INCREF(__pyx_v_M_bar);
      __pyx_v_M_body = __pyx_v_M_bar;

      /* "mbd/ChRigidBody.pyx":834
 *                     # self.M_applied = 2*M_bar - self.M_applied_last
 *             F_solid_type = 1
 *             if F_solid_type == 1:             # <<<<<<<<<<<<<<
 *                 F_body = F_bar
 *                 M_body = M_bar
 */
      break;

      /* "mbd/ChRigidBody.pyx":837
 *                 F_body = F_bar
 *                 M_body = M_bar
 *             elif F_solid_type == 2:             # <<<<<<<<<<<<<<
 *                 if np.linalg.norm(self.F_prot_last) == 0:  # first time step
 *                     F_body = F_bar
 */
      case 2:

      /* "mbd/ChRigidBody.pyx":838
 *                 M_body = M_bar
 *             elif F_solid_type == 2:
 *                 if np.linalg.norm(self.F_prot_last) == 0:  # first time step             # <<<<<<<<<<<<<<
 *                     F_body = F_bar
 *                     M_body = M_bar
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_linalg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_norm); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      if (!__pyx_t_1) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, ((PyObject *)__pyx_v_self->F_prot_last)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_1, ((PyObject *)__pyx_v_self->F_prot_last)};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_1, ((PyObject *)__pyx_v_self->F_prot_last)};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 838, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_self->F_prot_last));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_self->F_prot_last));
          PyTuple_SET_ITEM(__pyx_t_2, 0+1, ((PyObject *)__pyx_v_self->F_prot_last));
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_5) {

        /* "mbd/ChRigidBody.pyx":839
 *             elif F_solid_type == 2:
 *                 if np.linalg.norm(self.F_prot_last) == 0:  # first time step
 *                     F_body = F_bar             # <<<<<<<<<<<<<<
 *                     M_body = M_bar
 *                 else:
 */
        if (unlikely(!__pyx_v_F_bar)) { __Pyx_RaiseUnboundLocalError("F_bar"); __PYX_ERR(0, 839, __pyx_L1_error) }
        __Pyx_INCREF(__pyx_v_F_bar);
        __pyx_v_F_body = __pyx_v_F_bar;

        /* "mbd/ChRigidBody.pyx":840
 *                 if np.linalg.norm(self.F_prot_last) == 0:  # first time step
 *                     F_body = F_bar
 *                     M_body = M_bar             # <<<<<<<<<<<<<<
 *                 else:
 *                     F_body = 2*F_bar-self.F_applied_last
 */
        if (unlikely(!__pyx_v_M_bar)) { __Pyx_RaiseUnboundLocalError("M_bar"); __PYX_ERR(0, 840, __pyx_L1_error) }
        __Pyx_INCREF(__pyx_v_M_bar);
        __pyx_v_M_body = __pyx_v_M_bar;

        /* "mbd/ChRigidBody.pyx":838
 *                 M_body = M_bar
 *             elif F_solid_type == 2:
 *                 if np.linalg.norm(self.F_prot_last) == 0:  # first time step             # <<<<<<<<<<<<<<
 *                     F_body = F_bar
 *                     M_body = M_bar
 */
        goto __pyx_L16;
      }

      /* "mbd/ChRigidBody.pyx":842
 *                     M_body = M_bar
 *                 else:
 *                     F_body = 2*F_bar-self.F_applied_last             # <<<<<<<<<<<<<<
 *                     M_body = 2*M_bar-self.M_applied_last
 *             self.setExternalForces(F_body, M_body)
 */
      /*else*/ {
        if (unlikely(!__pyx_v_F_bar)) { __Pyx_RaiseUnboundLocalError("F_bar"); __PYX_ERR(0, 842, __pyx_L1_error) }
        __pyx_t_9 = PyNumber_Multiply(__pyx_int_2, __pyx_v_F_bar); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 842, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = PyNumber_Subtract(__pyx_t_9, ((PyObject *)__pyx_v_self->F_applied_last)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_v_F_body = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "mbd/ChRigidBody.pyx":843
 *                 else:
 *                     F_body = 2*F_bar-self.F_applied_last
 *                     M_body = 2*M_bar-self.M_applied_last             # <<<<<<<<<<<<<<
 *             self.setExternalForces(F_body, M_body)
 *         self.predicted = False
 */
        if (unlikely(!__pyx_v_M_bar)) { __Pyx_RaiseUnboundLocalError("M_bar"); __PYX_ERR(0, 843, __pyx_L1_error) }
        __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_v_M_bar); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 843, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = PyNumber_Subtract(__pyx_t_3, ((PyObject *)__pyx_v_self->M_applied_last)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 843, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_M_body = __pyx_t_9;
        __pyx_t_9 = 0;
      }
      __pyx_L16:;

      /* "mbd/ChRigidBody.pyx":837
 *                 F_body = F_bar
 *                 M_body = M_bar
 *             elif F_solid_type == 2:             # <<<<<<<<<<<<<<
 *                 if np.linalg.norm(self.F_prot_last) == 0:  # first time step
 *                     F_body = F_bar
 */
      break;
      default: break;
    }

    /* "mbd/ChRigidBody.pyx":844
 *                     F_body = 2*F_bar-self.F_applied_last
 *                     M_body = 2*M_bar-self.M_applied_last
 *             self.setExternalForces(F_body, M_body)             # <<<<<<<<<<<<<<
 *         self.predicted = False
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setExternalForces); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(!__pyx_v_F_body)) { __Pyx_RaiseUnboundLocalError("F_body"); __PYX_ERR(0, 844, __pyx_L1_error) }
    if (unlikely(!__pyx_v_M_body)) { __Pyx_RaiseUnboundLocalError("M_body"); __PYX_ERR(0, 844, __pyx_L1_error) }
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_F_body, __pyx_v_M_body};
      __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_F_body, __pyx_v_M_body};
      __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_F_body);
      __Pyx_GIVEREF(__pyx_v_F_body);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_6, __pyx_v_F_body);
      __Pyx_INCREF(__pyx_v_M_body);
      __Pyx_GIVEREF(__pyx_v_M_body);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_6, __pyx_v_M_body);
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "mbd/ChRigidBody.pyx":803
 *             aa[3:] = self.ang_acceleration
 *             Aija = np.dot(Aij, aa)
 *         if self.ProtChSystem.model is not None:             # <<<<<<<<<<<<<<
 *             self.F_prot = self.getPressureForces()+self.getShearForces()
 *             self.M_prot = self.getMoments()
 */
  }

  /* "mbd/ChRigidBody.pyx":845
 *                     M_body = 2*M_bar-self.M_applied_last
 *             self.setExternalForces(F_body, M_body)
 *         self.predicted = False             # <<<<<<<<<<<<<<
 * 
 *     def setExternalForces(self, np.ndarray forces, np.ndarray moments):
 */
  __pyx_v_self->predicted = 0;

  /* "mbd/ChRigidBody.pyx":767
 *         return rot
 * 
 *     def prestep(self):             # <<<<<<<<<<<<<<
 *         """Called before Chrono system step.
 *         Sets external forces automatically from Proteus solution.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.prestep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_am);
  __Pyx_XDECREF(__pyx_v_Aij);
  __Pyx_XDECREF(__pyx_v_aa);
  __Pyx_XDECREF(__pyx_v_Aija);
  __Pyx_XDECREF(__pyx_v_F_bar);
  __Pyx_XDECREF(__pyx_v_M_bar);
  __Pyx_XDECREF(__pyx_v_F_body);
  __Pyx_XDECREF(__pyx_v_M_body);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":847
 *         self.predicted = False
 * 
 *     def setExternalForces(self, np.ndarray forces, np.ndarray moments):             # <<<<<<<<<<<<<<
 *         """Sets external forces to body.
 *         Called during prestep or can be called manually. If called manually,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_65setExternalForces(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_64setExternalForces[] = "Sets external forces to body.\n        Called during prestep or can be called manually. If called manually,\n        must be a Chrono only simulation.\n\n        Parameters\n        ----------\n        forces: array_like\n            forces array (length 3)\n        moments: array_like\n            moments array (length 3)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_65setExternalForces(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_forces = 0;
  PyArrayObject *__pyx_v_moments = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setExternalForces (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_forces,&__pyx_n_s_moments,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forces)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_moments)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setExternalForces", 1, 2, 2, 1); __PYX_ERR(0, 847, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setExternalForces") < 0)) __PYX_ERR(0, 847, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_forces = ((PyArrayObject *)values[0]);
    __pyx_v_moments = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setExternalForces", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 847, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setExternalForces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forces), __pyx_ptype_5numpy_ndarray, 1, "forces", 0))) __PYX_ERR(0, 847, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_moments), __pyx_ptype_5numpy_ndarray, 1, "moments", 0))) __PYX_ERR(0, 847, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_64setExternalForces(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_forces, __pyx_v_moments);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_64setExternalForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_forces, PyArrayObject *__pyx_v_moments) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setExternalForces", 0);

  /* "mbd/ChRigidBody.pyx":859
 *             moments array (length 3)
 *         """
 *         self.F_applied = forces             # <<<<<<<<<<<<<<
 *         self.M_applied = moments
 *         self.thisptr.prestep(<double*> self.F_applied.data,
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_forces));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_forces));
  __Pyx_GOTREF(__pyx_v_self->F_applied);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_applied));
  __pyx_v_self->F_applied = __pyx_v_forces;

  /* "mbd/ChRigidBody.pyx":860
 *         """
 *         self.F_applied = forces
 *         self.M_applied = moments             # <<<<<<<<<<<<<<
 *         self.thisptr.prestep(<double*> self.F_applied.data,
 *                              <double*> self.M_applied.data)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_moments));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_moments));
  __Pyx_GOTREF(__pyx_v_self->M_applied);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_applied));
  __pyx_v_self->M_applied = __pyx_v_moments;

  /* "mbd/ChRigidBody.pyx":861
 *         self.F_applied = forces
 *         self.M_applied = moments
 *         self.thisptr.prestep(<double*> self.F_applied.data,             # <<<<<<<<<<<<<<
 *                              <double*> self.M_applied.data)
 * 
 */
  __pyx_v_self->thisptr->prestep(((double *)__pyx_v_self->F_applied->data), ((double *)__pyx_v_self->M_applied->data));

  /* "mbd/ChRigidBody.pyx":847
 *         self.predicted = False
 * 
 *     def setExternalForces(self, np.ndarray forces, np.ndarray moments):             # <<<<<<<<<<<<<<
 *         """Sets external forces to body.
 *         Called during prestep or can be called manually. If called manually,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":864
 *                              <double*> self.M_applied.data)
 * 
 *     def poststep(self):             # <<<<<<<<<<<<<<
 *         """Called after Chrono system step.
 *         Records values to csv, broadcast new position and rotation from
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_67poststep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_66poststep[] = "Called after Chrono system step.\n        Records values to csv, broadcast new position and rotation from\n        calculating processor to all processors for moving mesh BC.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_67poststep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("poststep (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_66poststep(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_66poststep(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyArrayObject *__pyx_v_new_x = NULL;
  PyObject *__pyx_v_comm = NULL;
  ChQuaternion<double>  __pyx_v_rotq;
  ChQuaternion<double>  __pyx_v_rotq_last;
  ChVector<double>  __pyx_v_pos;
  ChVector<double>  __pyx_v_pos_last;
  double __pyx_v_e0;
  double __pyx_v_e1;
  double __pyx_v_e2;
  double __pyx_v_e3;
  double __pyx_v_e0_last;
  double __pyx_v_e1_last;
  double __pyx_v_e2_last;
  double __pyx_v_e3_last;
  double __pyx_v_posx;
  double __pyx_v_posy;
  double __pyx_v_posz;
  double __pyx_v_posx_last;
  double __pyx_v_posy_last;
  double __pyx_v_posz_last;
  PyObject *__pyx_v_am = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  double __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  __Pyx_RefNannySetupContext("poststep", 0);

  /* "mbd/ChRigidBody.pyx":869
 *         calculating processor to all processors for moving mesh BC.
 *         """
 *         if self.prescribed_motion_function is not None:             # <<<<<<<<<<<<<<
 *             new_x = self.callPrescribedMotion(self.ProtChSystem.model.stepController.t_model_last)
 *             self.thisptr.setPosition(<double*> new_x.data)
 */
  __pyx_t_1 = (__pyx_v_self->prescribed_motion_function != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":870
 *         """
 *         if self.prescribed_motion_function is not None:
 *             new_x = self.callPrescribedMotion(self.ProtChSystem.model.stepController.t_model_last)             # <<<<<<<<<<<<<<
 *             self.thisptr.setPosition(<double*> new_x.data)
 *         self.thisptr.poststep()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->ProtChSystem->model, __pyx_n_s_stepController); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_t_model_last); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self->__pyx_vtab)->callPrescribedMotion(__pyx_v_self, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_new_x = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":871
 *         if self.prescribed_motion_function is not None:
 *             new_x = self.callPrescribedMotion(self.ProtChSystem.model.stepController.t_model_last)
 *             self.thisptr.setPosition(<double*> new_x.data)             # <<<<<<<<<<<<<<
 *         self.thisptr.poststep()
 *         self.getValues()
 */
    __pyx_v_self->thisptr->setPosition(((double *)__pyx_v_new_x->data));

    /* "mbd/ChRigidBody.pyx":869
 *         calculating processor to all processors for moving mesh BC.
 *         """
 *         if self.prescribed_motion_function is not None:             # <<<<<<<<<<<<<<
 *             new_x = self.callPrescribedMotion(self.ProtChSystem.model.stepController.t_model_last)
 *             self.thisptr.setPosition(<double*> new_x.data)
 */
  }

  /* "mbd/ChRigidBody.pyx":872
 *             new_x = self.callPrescribedMotion(self.ProtChSystem.model.stepController.t_model_last)
 *             self.thisptr.setPosition(<double*> new_x.data)
 *         self.thisptr.poststep()             # <<<<<<<<<<<<<<
 *         self.getValues()
 * 
 */
  __pyx_v_self->thisptr->poststep();

  /* "mbd/ChRigidBody.pyx":873
 *             self.thisptr.setPosition(<double*> new_x.data)
 *         self.thisptr.poststep()
 *         self.getValues()             # <<<<<<<<<<<<<<
 * 
 *         comm = Comm.get().comm.tompi4py()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getValues); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 873, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":875
 *         self.getValues()
 * 
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         cdef ch.ChQuaternion rotq
 *         cdef ch.ChQuaternion rotq_last
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_comm); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_comm = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":882
 *         cdef double e0, e1, e2, e3, e0_last, e1_last, e2_last, e3_last
 *         cdef double posx, posy, posz, posx_last, posy_last, posz_last
 *         if self.ProtChSystem.parallel_mode is True:             # <<<<<<<<<<<<<<
 *             # need to broadcast values to all processors on the C++ side
 *             # comm.Barrier()
 */
  __pyx_t_2 = ((__pyx_v_self->ProtChSystem->parallel_mode == 1) != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":885
 *             # need to broadcast values to all processors on the C++ side
 *             # comm.Barrier()
 *             self.rotq = comm.bcast(self.rotq,             # <<<<<<<<<<<<<<
 *                                    self.ProtChSystem.chrono_processor)
 *             self.rotq_last = comm.bcast(self.rotq_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":886
 *             # comm.Barrier()
 *             self.rotq = comm.bcast(self.rotq,
 *                                    self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.rotq_last = comm.bcast(self.rotq_last,
 *                                         self.ProtChSystem.chrono_processor)
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, ((PyObject *)__pyx_v_self->rotq), __pyx_t_7};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 885, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, ((PyObject *)__pyx_v_self->rotq), __pyx_t_7};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 885, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->rotq));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->rotq));
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->rotq));
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":885
 *             # need to broadcast values to all processors on the C++ side
 *             # comm.Barrier()
 *             self.rotq = comm.bcast(self.rotq,             # <<<<<<<<<<<<<<
 *                                    self.ProtChSystem.chrono_processor)
 *             self.rotq_last = comm.bcast(self.rotq_last,
 */
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->rotq);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->rotq));
    __pyx_v_self->rotq = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":887
 *             self.rotq = comm.bcast(self.rotq,
 *                                    self.ProtChSystem.chrono_processor)
 *             self.rotq_last = comm.bcast(self.rotq_last,             # <<<<<<<<<<<<<<
 *                                         self.ProtChSystem.chrono_processor)
 *             self.position = comm.bcast(self.position,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":888
 *                                    self.ProtChSystem.chrono_processor)
 *             self.rotq_last = comm.bcast(self.rotq_last,
 *                                         self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.position = comm.bcast(self.position,
 *                                        self.ProtChSystem.chrono_processor)
 */
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, ((PyObject *)__pyx_v_self->rotq_last), __pyx_t_9};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 887, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, ((PyObject *)__pyx_v_self->rotq_last), __pyx_t_9};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 887, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->rotq_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->rotq_last));
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->rotq_last));
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_8, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":887
 *             self.rotq = comm.bcast(self.rotq,
 *                                    self.ProtChSystem.chrono_processor)
 *             self.rotq_last = comm.bcast(self.rotq_last,             # <<<<<<<<<<<<<<
 *                                         self.ProtChSystem.chrono_processor)
 *             self.position = comm.bcast(self.position,
 */
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->rotq_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->rotq_last));
    __pyx_v_self->rotq_last = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":889
 *             self.rotq_last = comm.bcast(self.rotq_last,
 *                                         self.ProtChSystem.chrono_processor)
 *             self.position = comm.bcast(self.position,             # <<<<<<<<<<<<<<
 *                                        self.ProtChSystem.chrono_processor)
 *             self.position_last = comm.bcast(self.position_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":890
 *                                         self.ProtChSystem.chrono_processor)
 *             self.position = comm.bcast(self.position,
 *                                        self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.position_last = comm.bcast(self.position_last,
 *                                             self.ProtChSystem.chrono_processor)
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_self->position), __pyx_t_6};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_self->position), __pyx_t_6};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->position));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->position));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->position));
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":889
 *             self.rotq_last = comm.bcast(self.rotq_last,
 *                                         self.ProtChSystem.chrono_processor)
 *             self.position = comm.bcast(self.position,             # <<<<<<<<<<<<<<
 *                                        self.ProtChSystem.chrono_processor)
 *             self.position_last = comm.bcast(self.position_last,
 */
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->position);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->position));
    __pyx_v_self->position = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":891
 *             self.position = comm.bcast(self.position,
 *                                        self.ProtChSystem.chrono_processor)
 *             self.position_last = comm.bcast(self.position_last,             # <<<<<<<<<<<<<<
 *                                             self.ProtChSystem.chrono_processor)
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":892
 *                                        self.ProtChSystem.chrono_processor)
 *             self.position_last = comm.bcast(self.position_last,
 *                                             self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:
 *             self._recordValues()
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, ((PyObject *)__pyx_v_self->position_last), __pyx_t_7};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, ((PyObject *)__pyx_v_self->position_last), __pyx_t_7};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->position_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->position_last));
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->position_last));
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":891
 *             self.position = comm.bcast(self.position,
 *                                        self.ProtChSystem.chrono_processor)
 *             self.position_last = comm.bcast(self.position_last,             # <<<<<<<<<<<<<<
 *                                             self.ProtChSystem.chrono_processor)
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:
 */
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->position_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->position_last));
    __pyx_v_self->position_last = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":882
 *         cdef double e0, e1, e2, e3, e0_last, e1_last, e2_last, e3_last
 *         cdef double posx, posy, posz, posx_last, posy_last, posz_last
 *         if self.ProtChSystem.parallel_mode is True:             # <<<<<<<<<<<<<<
 *             # need to broadcast values to all processors on the C++ side
 *             # comm.Barrier()
 */
  }

  /* "mbd/ChRigidBody.pyx":893
 *             self.position_last = comm.bcast(self.position_last,
 *                                             self.ProtChSystem.chrono_processor)
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:             # <<<<<<<<<<<<<<
 *             self._recordValues()
 *         # need to pass position and rotation values to C++ side
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_1 = ((__pyx_v_self->ProtChSystem->record_values == 1) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":894
 *                                             self.ProtChSystem.chrono_processor)
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:
 *             self._recordValues()             # <<<<<<<<<<<<<<
 *         # need to pass position and rotation values to C++ side
 *         # needed for transformations when calling hx, hy, hz, hxyz
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_recordValues); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 894, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "mbd/ChRigidBody.pyx":893
 *             self.position_last = comm.bcast(self.position_last,
 *                                             self.ProtChSystem.chrono_processor)
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:             # <<<<<<<<<<<<<<
 *             self._recordValues()
 *         # need to pass position and rotation values to C++ side
 */
  }

  /* "mbd/ChRigidBody.pyx":897
 *         # need to pass position and rotation values to C++ side
 *         # needed for transformations when calling hx, hy, hz, hxyz
 *         e0, e1, e2, e3 = self.rotq             # <<<<<<<<<<<<<<
 *         e0_last, e1_last, e2_last, e3_last = self.rotq_last
 *         posx, posy, posz = self.position
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_self->rotq);
  __Pyx_INCREF(__pyx_t_9);
  if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
    PyObject* sequence = __pyx_t_9;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 897, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_6);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_7,&__pyx_t_6};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 897, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_7,&__pyx_t_6};
    __pyx_t_10 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 897, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 4) < 0) __PYX_ERR(0, 897, __pyx_L1_error)
    __pyx_t_11 = NULL;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L9_unpacking_done;
    __pyx_L8_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 897, __pyx_L1_error)
    __pyx_L9_unpacking_done:;
  }
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_e0 = __pyx_t_5;
  __pyx_v_e1 = __pyx_t_12;
  __pyx_v_e2 = __pyx_t_13;
  __pyx_v_e3 = __pyx_t_14;

  /* "mbd/ChRigidBody.pyx":898
 *         # needed for transformations when calling hx, hy, hz, hxyz
 *         e0, e1, e2, e3 = self.rotq
 *         e0_last, e1_last, e2_last, e3_last = self.rotq_last             # <<<<<<<<<<<<<<
 *         posx, posy, posz = self.position
 *         posx_last, posy_last, posz_last = self.position_last
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_self->rotq_last);
  __Pyx_INCREF(__pyx_t_9);
  if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
    PyObject* sequence = __pyx_t_9;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 898, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_3);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_6,&__pyx_t_7,&__pyx_t_4,&__pyx_t_3};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 898, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_6,&__pyx_t_7,&__pyx_t_4,&__pyx_t_3};
    __pyx_t_10 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 4) < 0) __PYX_ERR(0, 898, __pyx_L1_error)
    __pyx_t_11 = NULL;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L11_unpacking_done;
    __pyx_L10_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 898, __pyx_L1_error)
    __pyx_L11_unpacking_done:;
  }
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_e0_last = __pyx_t_14;
  __pyx_v_e1_last = __pyx_t_13;
  __pyx_v_e2_last = __pyx_t_12;
  __pyx_v_e3_last = __pyx_t_5;

  /* "mbd/ChRigidBody.pyx":899
 *         e0, e1, e2, e3 = self.rotq
 *         e0_last, e1_last, e2_last, e3_last = self.rotq_last
 *         posx, posy, posz = self.position             # <<<<<<<<<<<<<<
 *         posx_last, posy_last, posz_last = self.position_last
 *         pos = ch.ChVector[double](posx, posy, posz)
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_self->position);
  __Pyx_INCREF(__pyx_t_9);
  if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
    PyObject* sequence = __pyx_t_9;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 899, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_7);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_11 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_11(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L12_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_4 = __pyx_t_11(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L12_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 2; __pyx_t_7 = __pyx_t_11(__pyx_t_6); if (unlikely(!__pyx_t_7)) goto __pyx_L12_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_6), 3) < 0) __PYX_ERR(0, 899, __pyx_L1_error)
    __pyx_t_11 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L13_unpacking_done;
    __pyx_L12_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 899, __pyx_L1_error)
    __pyx_L13_unpacking_done:;
  }
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_posx = __pyx_t_5;
  __pyx_v_posy = __pyx_t_12;
  __pyx_v_posz = __pyx_t_13;

  /* "mbd/ChRigidBody.pyx":900
 *         e0_last, e1_last, e2_last, e3_last = self.rotq_last
 *         posx, posy, posz = self.position
 *         posx_last, posy_last, posz_last = self.position_last             # <<<<<<<<<<<<<<
 *         pos = ch.ChVector[double](posx, posy, posz)
 *         pos_last = ch.ChVector[double](posx_last, posy_last, posz_last)
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_self->position_last);
  __Pyx_INCREF(__pyx_t_9);
  if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
    PyObject* sequence = __pyx_t_9;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 900, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_11 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_7 = __pyx_t_11(__pyx_t_6); if (unlikely(!__pyx_t_7)) goto __pyx_L14_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    index = 1; __pyx_t_4 = __pyx_t_11(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L14_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 2; __pyx_t_3 = __pyx_t_11(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L14_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_6), 3) < 0) __PYX_ERR(0, 900, __pyx_L1_error)
    __pyx_t_11 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L15_unpacking_done;
    __pyx_L14_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 900, __pyx_L1_error)
    __pyx_L15_unpacking_done:;
  }
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_posx_last = __pyx_t_13;
  __pyx_v_posy_last = __pyx_t_12;
  __pyx_v_posz_last = __pyx_t_5;

  /* "mbd/ChRigidBody.pyx":901
 *         posx, posy, posz = self.position
 *         posx_last, posy_last, posz_last = self.position_last
 *         pos = ch.ChVector[double](posx, posy, posz)             # <<<<<<<<<<<<<<
 *         pos_last = ch.ChVector[double](posx_last, posy_last, posz_last)
 *         rotq = ch.ChQuaternion[double](e0, e1, e2, e3)
 */
  __pyx_v_pos = ((ChVector<double> )ChVector<double> (__pyx_v_posx, __pyx_v_posy, __pyx_v_posz));

  /* "mbd/ChRigidBody.pyx":902
 *         posx_last, posy_last, posz_last = self.position_last
 *         pos = ch.ChVector[double](posx, posy, posz)
 *         pos_last = ch.ChVector[double](posx_last, posy_last, posz_last)             # <<<<<<<<<<<<<<
 *         rotq = ch.ChQuaternion[double](e0, e1, e2, e3)
 *         rotq_last = ch.ChQuaternion[double](e0_last, e1_last, e2_last, e3_last)
 */
  __pyx_v_pos_last = ((ChVector<double> )ChVector<double> (__pyx_v_posx_last, __pyx_v_posy_last, __pyx_v_posz_last));

  /* "mbd/ChRigidBody.pyx":903
 *         pos = ch.ChVector[double](posx, posy, posz)
 *         pos_last = ch.ChVector[double](posx_last, posy_last, posz_last)
 *         rotq = ch.ChQuaternion[double](e0, e1, e2, e3)             # <<<<<<<<<<<<<<
 *         rotq_last = ch.ChQuaternion[double](e0_last, e1_last, e2_last, e3_last)
 *         self.thisptr.rotq = rotq
 */
  __pyx_v_rotq = ((ChQuaternion<double> )ChQuaternion<double> (__pyx_v_e0, __pyx_v_e1, __pyx_v_e2, __pyx_v_e3));

  /* "mbd/ChRigidBody.pyx":904
 *         pos_last = ch.ChVector[double](posx_last, posy_last, posz_last)
 *         rotq = ch.ChQuaternion[double](e0, e1, e2, e3)
 *         rotq_last = ch.ChQuaternion[double](e0_last, e1_last, e2_last, e3_last)             # <<<<<<<<<<<<<<
 *         self.thisptr.rotq = rotq
 *         self.thisptr.rotq_last = rotq_last
 */
  __pyx_v_rotq_last = ((ChQuaternion<double> )ChQuaternion<double> (__pyx_v_e0_last, __pyx_v_e1_last, __pyx_v_e2_last, __pyx_v_e3_last));

  /* "mbd/ChRigidBody.pyx":905
 *         rotq = ch.ChQuaternion[double](e0, e1, e2, e3)
 *         rotq_last = ch.ChQuaternion[double](e0_last, e1_last, e2_last, e3_last)
 *         self.thisptr.rotq = rotq             # <<<<<<<<<<<<<<
 *         self.thisptr.rotq_last = rotq_last
 *         self.thisptr.pos = pos
 */
  __pyx_v_self->thisptr->rotq = __pyx_v_rotq;

  /* "mbd/ChRigidBody.pyx":906
 *         rotq_last = ch.ChQuaternion[double](e0_last, e1_last, e2_last, e3_last)
 *         self.thisptr.rotq = rotq
 *         self.thisptr.rotq_last = rotq_last             # <<<<<<<<<<<<<<
 *         self.thisptr.pos = pos
 *         self.thisptr.pos_last = pos_last
 */
  __pyx_v_self->thisptr->rotq_last = __pyx_v_rotq_last;

  /* "mbd/ChRigidBody.pyx":907
 *         self.thisptr.rotq = rotq
 *         self.thisptr.rotq_last = rotq_last
 *         self.thisptr.pos = pos             # <<<<<<<<<<<<<<
 *         self.thisptr.pos_last = pos_last
 *         if self.ProtChSystem.model_addedmass is not None:
 */
  __pyx_v_self->thisptr->pos = __pyx_v_pos;

  /* "mbd/ChRigidBody.pyx":908
 *         self.thisptr.rotq_last = rotq_last
 *         self.thisptr.pos = pos
 *         self.thisptr.pos_last = pos_last             # <<<<<<<<<<<<<<
 *         if self.ProtChSystem.model_addedmass is not None:
 *             am = self.ProtChSystem.model_addedmass.levelModelList[-1]
 */
  __pyx_v_self->thisptr->pos_last = __pyx_v_pos_last;

  /* "mbd/ChRigidBody.pyx":909
 *         self.thisptr.pos = pos
 *         self.thisptr.pos_last = pos_last
 *         if self.ProtChSystem.model_addedmass is not None:             # <<<<<<<<<<<<<<
 *             am = self.ProtChSystem.model_addedmass.levelModelList[-1]
 *             am.barycenters[self.i_start:self.i_end] = self.ChBody.GetPos()
 */
  __pyx_t_2 = (__pyx_v_self->ProtChSystem->model_addedmass != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":910
 *         self.thisptr.pos_last = pos_last
 *         if self.ProtChSystem.model_addedmass is not None:
 *             am = self.ProtChSystem.model_addedmass.levelModelList[-1]             # <<<<<<<<<<<<<<
 *             am.barycenters[self.i_start:self.i_end] = self.ChBody.GetPos()
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->ProtChSystem->model_addedmass, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_9, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_am = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":911
 *         if self.ProtChSystem.model_addedmass is not None:
 *             am = self.ProtChSystem.model_addedmass.levelModelList[-1]
 *             am.barycenters[self.i_start:self.i_end] = self.ChBody.GetPos()             # <<<<<<<<<<<<<<
 * 
 *     def prediction(self):
 */
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.GetPos(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_am, __pyx_n_s_barycenters); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__Pyx_PyObject_SetSlice(__pyx_t_9, __pyx_t_3, __pyx_v_self->i_start, __pyx_v_self->i_end, NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":909
 *         self.thisptr.pos = pos
 *         self.thisptr.pos_last = pos_last
 *         if self.ProtChSystem.model_addedmass is not None:             # <<<<<<<<<<<<<<
 *             am = self.ProtChSystem.model_addedmass.levelModelList[-1]
 *             am.barycenters[self.i_start:self.i_end] = self.ChBody.GetPos()
 */
  }

  /* "mbd/ChRigidBody.pyx":864
 *                              <double*> self.M_applied.data)
 * 
 *     def poststep(self):             # <<<<<<<<<<<<<<
 *         """Called after Chrono system step.
 *         Records values to csv, broadcast new position and rotation from
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.poststep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_new_x);
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XDECREF(__pyx_v_am);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":913
 *             am.barycenters[self.i_start:self.i_end] = self.ChBody.GetPos()
 * 
 *     def prediction(self):             # <<<<<<<<<<<<<<
 *         comm = Comm.get().comm.tompi4py()
 *         cdef ch.ChVector h_body_vec
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_69prediction(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_69prediction(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prediction (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_68prediction(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_68prediction(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_v_comm = NULL;
  CYTHON_UNUSED ChVector<double>  __pyx_v_h_body_vec;
  CYTHON_UNUSED double __pyx_v_dt;
  CYTHON_UNUSED double __pyx_v_dt_next;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  __Pyx_RefNannySetupContext("prediction", 0);

  /* "mbd/ChRigidBody.pyx":914
 * 
 *     def prediction(self):
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector h_body_vec
 *         h_body_vec = self.thisptr.hxyz(<double*> self.position_last.data, 0.)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_comm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":916
 *         comm = Comm.get().comm.tompi4py()
 *         cdef ch.ChVector h_body_vec
 *         h_body_vec = self.thisptr.hxyz(<double*> self.position_last.data, 0.)             # <<<<<<<<<<<<<<
 *         #print("MY BODY DISP: ", h_body_vec.x(), h_body_vec.y(), h_body_vec.z())
 *         if self.ProtChSystem.model is not None:
 */
  __pyx_v_h_body_vec = __pyx_v_self->thisptr->hxyz(((double *)__pyx_v_self->position_last->data), 0.);

  /* "mbd/ChRigidBody.pyx":918
 *         h_body_vec = self.thisptr.hxyz(<double*> self.position_last.data, 0.)
 *         #print("MY BODY DISP: ", h_body_vec.x(), h_body_vec.y(), h_body_vec.z())
 *         if self.ProtChSystem.model is not None:             # <<<<<<<<<<<<<<
 *             try:
 *                 dt = self.ProtChSystem.proteus_dt
 */
  __pyx_t_5 = (__pyx_v_self->ProtChSystem->model != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "mbd/ChRigidBody.pyx":919
 *         #print("MY BODY DISP: ", h_body_vec.x(), h_body_vec.y(), h_body_vec.z())
 *         if self.ProtChSystem.model is not None:
 *             try:             # <<<<<<<<<<<<<<
 *                 dt = self.ProtChSystem.proteus_dt
 *                 dt_next = self.ProtChSystem.proteus_dt_next
 */
    {
      if (__pyx_t_7||__pyx_t_8||__pyx_t_9); else {/*mark used*/}
      /*try:*/ {

        /* "mbd/ChRigidBody.pyx":920
 *         if self.ProtChSystem.model is not None:
 *             try:
 *                 dt = self.ProtChSystem.proteus_dt             # <<<<<<<<<<<<<<
 *                 dt_next = self.ProtChSystem.proteus_dt_next
 *             except:
 */
        __pyx_t_10 = __pyx_v_self->ProtChSystem->proteus_dt;
        __pyx_v_dt = __pyx_t_10;

        /* "mbd/ChRigidBody.pyx":921
 *             try:
 *                 dt = self.ProtChSystem.proteus_dt
 *                 dt_next = self.ProtChSystem.proteus_dt_next             # <<<<<<<<<<<<<<
 *             except:
 *                 dt = 0.
 */
        __pyx_t_10 = __pyx_v_self->ProtChSystem->proteus_dt_next;
        __pyx_v_dt_next = __pyx_t_10;

        /* "mbd/ChRigidBody.pyx":919
 *         #print("MY BODY DISP: ", h_body_vec.x(), h_body_vec.y(), h_body_vec.z())
 *         if self.ProtChSystem.model is not None:
 *             try:             # <<<<<<<<<<<<<<
 *                 dt = self.ProtChSystem.proteus_dt
 *                 dt_next = self.ProtChSystem.proteus_dt_next
 */
      }
    }

    /* "mbd/ChRigidBody.pyx":918
 *         h_body_vec = self.thisptr.hxyz(<double*> self.position_last.data, 0.)
 *         #print("MY BODY DISP: ", h_body_vec.x(), h_body_vec.y(), h_body_vec.z())
 *         if self.ProtChSystem.model is not None:             # <<<<<<<<<<<<<<
 *             try:
 *                 dt = self.ProtChSystem.proteus_dt
 */
  }

  /* "mbd/ChRigidBody.pyx":966
 *         #     # print("BODY H:", h_body, self.velocity, self.ChBody.GetPos_dt())
 *         #     self.h_predict = h
 *         self.predicted = True             # <<<<<<<<<<<<<<
 * 
 *     def calculate_init(self):
 */
  __pyx_v_self->predicted = 1;

  /* "mbd/ChRigidBody.pyx":913
 *             am.barycenters[self.i_start:self.i_end] = self.ChBody.GetPos()
 * 
 *     def prediction(self):             # <<<<<<<<<<<<<<
 *         comm = Comm.get().comm.tompi4py()
 *         cdef ch.ChVector h_body_vec
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.prediction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":968
 *         self.predicted = True
 * 
 *     def calculate_init(self):             # <<<<<<<<<<<<<<
 *         """Called from self.ProtChSystem.calculate_init()
 *         before simulation starts
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_71calculate_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_70calculate_init[] = "Called from self.ProtChSystem.calculate_init()\n        before simulation starts\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_71calculate_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_init (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_70calculate_init(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_70calculate_init(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyArrayObject *__pyx_v_zeros = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("calculate_init", 0);

  /* "mbd/ChRigidBody.pyx":973
 *         """
 *         # barycenter0 used for moment calculations
 *         if self.Shape is not None:             # <<<<<<<<<<<<<<
 *             self.barycenter0 = self.Shape.barycenter.copy()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->Shape != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":974
 *         # barycenter0 used for moment calculations
 *         if self.Shape is not None:
 *             self.barycenter0 = self.Shape.barycenter.copy()             # <<<<<<<<<<<<<<
 *         else:
 *             self.barycenter0 = self.ChBody.GetPos()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->Shape, __pyx_n_s_barycenter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->barycenter0);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->barycenter0));
    __pyx_v_self->barycenter0 = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":973
 *         """
 *         # barycenter0 used for moment calculations
 *         if self.Shape is not None:             # <<<<<<<<<<<<<<
 *             self.barycenter0 = self.Shape.barycenter.copy()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":976
 *             self.barycenter0 = self.Shape.barycenter.copy()
 *         else:
 *             self.barycenter0 = self.ChBody.GetPos()             # <<<<<<<<<<<<<<
 *         # get the initial values for F and M
 *         cdef np.ndarray zeros = np.zeros(3)
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.GetPos(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->barycenter0);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->barycenter0));
    __pyx_v_self->barycenter0 = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":978
 *             self.barycenter0 = self.ChBody.GetPos()
 *         # get the initial values for F and M
 *         cdef np.ndarray zeros = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.setExternalForces(zeros, zeros)
 *         self.thisptr.poststep()
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 978, __pyx_L1_error)
  __pyx_v_zeros = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":979
 *         # get the initial values for F and M
 *         cdef np.ndarray zeros = np.zeros(3)
 *         self.setExternalForces(zeros, zeros)             # <<<<<<<<<<<<<<
 *         self.thisptr.poststep()
 *         # get first, store then on initial time step
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setExternalForces); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_zeros), ((PyObject *)__pyx_v_zeros)};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 979, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_zeros), ((PyObject *)__pyx_v_zeros)};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 979, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_zeros));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_zeros));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_zeros));
    __Pyx_INCREF(((PyObject *)__pyx_v_zeros));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_zeros));
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_zeros));
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":980
 *         cdef np.ndarray zeros = np.zeros(3)
 *         self.setExternalForces(zeros, zeros)
 *         self.thisptr.poststep()             # <<<<<<<<<<<<<<
 *         # get first, store then on initial time step
 *         self.getValues()
 */
  __pyx_v_self->thisptr->poststep();

  /* "mbd/ChRigidBody.pyx":982
 *         self.thisptr.poststep()
 *         # get first, store then on initial time step
 *         self.getValues()             # <<<<<<<<<<<<<<
 *         self.storeValues()
 *         # set mass matrix with no added mass
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getValues); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 982, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":983
 *         # get first, store then on initial time step
 *         self.getValues()
 *         self.storeValues()             # <<<<<<<<<<<<<<
 *         # set mass matrix with no added mass
 *         self.setAddedMass(np.zeros((6,6)))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_storeValues); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 983, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":985
 *         self.storeValues()
 *         # set mass matrix with no added mass
 *         self.setAddedMass(np.zeros((6,6)))             # <<<<<<<<<<<<<<
 *         # self.thisptr.setRotation(<double*> self.rotation_init.data)
 *         #
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setAddedMass); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 985, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":968
 *         self.predicted = True
 * 
 *     def calculate_init(self):             # <<<<<<<<<<<<<<
 *         """Called from self.ProtChSystem.calculate_init()
 *         before simulation starts
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.calculate_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_zeros);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":989
 *         #
 * 
 *     def calculate(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_73calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_73calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_72calculate(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_72calculate(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":992
 *         pass
 * 
 *     def setPrescribedMotionCustom(self, double[:] t, double[:] x=None,             # <<<<<<<<<<<<<<
 *                                   double[:] y=None, double[:] z=None,
 *                                   double[:] ang=None, double[:] ang2=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_75setPrescribedMotionCustom(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_74setPrescribedMotionCustom[] = "Sets custom prescribed motion for body.\n        Parameters must have the same length as the time array t\n\n        Parameters\n        ----------\n        t: array_like\n            time array\n        x: array_like\n            x coordinates of body\n        y: array_like\n            y coordinates of body\n        z: array_like\n            z coordinates of body\n        ang: array_like\n            rotation of body\n        ang2: array_like\n            rotation of body\n        ang3: array_like\n            rotation coordinates of body\n        t_max: double\n            prescribed motion is released when t > t_max.\n            if t_max=0, the prescribed motion is never released.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_75setPrescribedMotionCustom(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_t = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_x = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_y = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_z = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_ang = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_ang2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_ang3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_t_max;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPrescribedMotionCustom (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,&__pyx_n_s_ang,&__pyx_n_s_ang2,&__pyx_n_s_ang3,&__pyx_n_s_t_max,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_z);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ang);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ang2);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ang3);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t_max);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setPrescribedMotionCustom") < 0)) __PYX_ERR(0, 992, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0]); if (unlikely(!__pyx_v_t.memview)) __PYX_ERR(0, 992, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_x = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1]); if (unlikely(!__pyx_v_x.memview)) __PYX_ERR(0, 992, __pyx_L3_error)
    } else {
      __pyx_v_x = __pyx_k__72;
      __PYX_INC_MEMVIEW(&__pyx_v_x, 1);
    }
    if (values[2]) {
      __pyx_v_y = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2]); if (unlikely(!__pyx_v_y.memview)) __PYX_ERR(0, 993, __pyx_L3_error)
    } else {
      __pyx_v_y = __pyx_k__73;
      __PYX_INC_MEMVIEW(&__pyx_v_y, 1);
    }
    if (values[3]) {
      __pyx_v_z = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[3]); if (unlikely(!__pyx_v_z.memview)) __PYX_ERR(0, 993, __pyx_L3_error)
    } else {
      __pyx_v_z = __pyx_k__74;
      __PYX_INC_MEMVIEW(&__pyx_v_z, 1);
    }
    if (values[4]) {
      __pyx_v_ang = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[4]); if (unlikely(!__pyx_v_ang.memview)) __PYX_ERR(0, 994, __pyx_L3_error)
    } else {
      __pyx_v_ang = __pyx_k__75;
      __PYX_INC_MEMVIEW(&__pyx_v_ang, 1);
    }
    if (values[5]) {
      __pyx_v_ang2 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[5]); if (unlikely(!__pyx_v_ang2.memview)) __PYX_ERR(0, 994, __pyx_L3_error)
    } else {
      __pyx_v_ang2 = __pyx_k__76;
      __PYX_INC_MEMVIEW(&__pyx_v_ang2, 1);
    }
    if (values[6]) {
      __pyx_v_ang3 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[6]); if (unlikely(!__pyx_v_ang3.memview)) __PYX_ERR(0, 995, __pyx_L3_error)
    } else {
      __pyx_v_ang3 = __pyx_k__77;
      __PYX_INC_MEMVIEW(&__pyx_v_ang3, 1);
    }
    if (values[7]) {
      __pyx_v_t_max = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_t_max == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 995, __pyx_L3_error)
    } else {
      __pyx_v_t_max = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPrescribedMotionCustom", 0, 1, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 992, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setPrescribedMotionCustom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_74setPrescribedMotionCustom(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_t, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_ang, __pyx_v_ang2, __pyx_v_ang3, __pyx_v_t_max);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_74setPrescribedMotionCustom(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, __Pyx_memviewslice __pyx_v_t, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y, __Pyx_memviewslice __pyx_v_z, __Pyx_memviewslice __pyx_v_ang, __Pyx_memviewslice __pyx_v_ang2, __Pyx_memviewslice __pyx_v_ang3, double __pyx_v_t_max) {
  std::vector<double>  __pyx_v_t_vec;
  std::vector<double>  __pyx_v_x_vec;
  std::vector<double>  __pyx_v_y_vec;
  std::vector<double>  __pyx_v_z_vec;
  std::vector<double>  __pyx_v_ang_vec;
  std::vector<double>  __pyx_v_ang2_vec;
  std::vector<double>  __pyx_v_ang3_vec;
  PyObject *__pyx_v_tt = NULL;
  PyObject *__pyx_v_xx = NULL;
  PyObject *__pyx_v_yy = NULL;
  PyObject *__pyx_v_zz = NULL;
  PyObject *__pyx_v_angang = NULL;
  PyObject *__pyx_v_ang2ang2 = NULL;
  PyObject *__pyx_v_ang3ang3 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  double __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("setPrescribedMotionCustom", 0);

  /* "mbd/ChRigidBody.pyx":1026
 *         cdef vector[double] ang2_vec
 *         cdef vector[double] ang3_vec
 *         for tt in t:             # <<<<<<<<<<<<<<
 *             t_vec.push_back(tt)
 *         if x is not None:
 */
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_t, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1026, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1026, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1026, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_tt, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1027
 *         cdef vector[double] ang3_vec
 *         for tt in t:
 *             t_vec.push_back(tt)             # <<<<<<<<<<<<<<
 *         if x is not None:
 *             assert len(x) == len(t), 'x and t should have the same length'
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_tt); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1027, __pyx_L1_error)
    try {
      __pyx_v_t_vec.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1027, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":1026
 *         cdef vector[double] ang2_vec
 *         cdef vector[double] ang3_vec
 *         for tt in t:             # <<<<<<<<<<<<<<
 *             t_vec.push_back(tt)
 *         if x is not None:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":1028
 *         for tt in t:
 *             t_vec.push_back(tt)
 *         if x is not None:             # <<<<<<<<<<<<<<
 *             assert len(x) == len(t), 'x and t should have the same length'
 *             for xx in x:
 */
  __pyx_t_6 = ((((PyObject *) __pyx_v_x.memview) != Py_None) != 0);
  if (__pyx_t_6) {

    /* "mbd/ChRigidBody.pyx":1029
 *             t_vec.push_back(tt)
 *         if x is not None:
 *             assert len(x) == len(t), 'x and t should have the same length'             # <<<<<<<<<<<<<<
 *             for xx in x:
 *                 x_vec.push_back(xx)
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_x, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_t, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!((__pyx_t_3 == __pyx_t_7) != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_x_and_t_should_have_the_same_len);
        __PYX_ERR(0, 1029, __pyx_L1_error)
      }
    }
    #endif

    /* "mbd/ChRigidBody.pyx":1030
 *         if x is not None:
 *             assert len(x) == len(t), 'x and t should have the same length'
 *             for xx in x:             # <<<<<<<<<<<<<<
 *                 x_vec.push_back(xx)
 *         if y is not None:
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_x, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1030, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1030, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_4(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1030, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_xx, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":1031
 *             assert len(x) == len(t), 'x and t should have the same length'
 *             for xx in x:
 *                 x_vec.push_back(xx)             # <<<<<<<<<<<<<<
 *         if y is not None:
 *             assert len(y) == len(t), 'y and t should have the same length'
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_xx); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1031, __pyx_L1_error)
      try {
        __pyx_v_x_vec.push_back(__pyx_t_5);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1031, __pyx_L1_error)
      }

      /* "mbd/ChRigidBody.pyx":1030
 *         if x is not None:
 *             assert len(x) == len(t), 'x and t should have the same length'
 *             for xx in x:             # <<<<<<<<<<<<<<
 *                 x_vec.push_back(xx)
 *         if y is not None:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1028
 *         for tt in t:
 *             t_vec.push_back(tt)
 *         if x is not None:             # <<<<<<<<<<<<<<
 *             assert len(x) == len(t), 'x and t should have the same length'
 *             for xx in x:
 */
  }

  /* "mbd/ChRigidBody.pyx":1032
 *             for xx in x:
 *                 x_vec.push_back(xx)
 *         if y is not None:             # <<<<<<<<<<<<<<
 *             assert len(y) == len(t), 'y and t should have the same length'
 *             for yy in y:
 */
  __pyx_t_6 = ((((PyObject *) __pyx_v_y.memview) != Py_None) != 0);
  if (__pyx_t_6) {

    /* "mbd/ChRigidBody.pyx":1033
 *                 x_vec.push_back(xx)
 *         if y is not None:
 *             assert len(y) == len(t), 'y and t should have the same length'             # <<<<<<<<<<<<<<
 *             for yy in y:
 *                 y_vec.push_back(yy)
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_y, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_t, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!((__pyx_t_7 == __pyx_t_3) != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_y_and_t_should_have_the_same_len);
        __PYX_ERR(0, 1033, __pyx_L1_error)
      }
    }
    #endif

    /* "mbd/ChRigidBody.pyx":1034
 *         if y is not None:
 *             assert len(y) == len(t), 'y and t should have the same length'
 *             for yy in y:             # <<<<<<<<<<<<<<
 *                 y_vec.push_back(yy)
 *         if z is not None:
 */
    __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_y, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1034, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1034, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1034, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1034, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_yy, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":1035
 *             assert len(y) == len(t), 'y and t should have the same length'
 *             for yy in y:
 *                 y_vec.push_back(yy)             # <<<<<<<<<<<<<<
 *         if z is not None:
 *             assert len(z) == len(t), 'z and t should have the same length'
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_yy); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1035, __pyx_L1_error)
      try {
        __pyx_v_y_vec.push_back(__pyx_t_5);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1035, __pyx_L1_error)
      }

      /* "mbd/ChRigidBody.pyx":1034
 *         if y is not None:
 *             assert len(y) == len(t), 'y and t should have the same length'
 *             for yy in y:             # <<<<<<<<<<<<<<
 *                 y_vec.push_back(yy)
 *         if z is not None:
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1032
 *             for xx in x:
 *                 x_vec.push_back(xx)
 *         if y is not None:             # <<<<<<<<<<<<<<
 *             assert len(y) == len(t), 'y and t should have the same length'
 *             for yy in y:
 */
  }

  /* "mbd/ChRigidBody.pyx":1036
 *             for yy in y:
 *                 y_vec.push_back(yy)
 *         if z is not None:             # <<<<<<<<<<<<<<
 *             assert len(z) == len(t), 'z and t should have the same length'
 *             for zz in z:
 */
  __pyx_t_6 = ((((PyObject *) __pyx_v_z.memview) != Py_None) != 0);
  if (__pyx_t_6) {

    /* "mbd/ChRigidBody.pyx":1037
 *                 y_vec.push_back(yy)
 *         if z is not None:
 *             assert len(z) == len(t), 'z and t should have the same length'             # <<<<<<<<<<<<<<
 *             for zz in z:
 *                 z_vec.push_back(zz)
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_z, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_t, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!((__pyx_t_3 == __pyx_t_7) != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_z_and_t_should_have_the_same_len);
        __PYX_ERR(0, 1037, __pyx_L1_error)
      }
    }
    #endif

    /* "mbd/ChRigidBody.pyx":1038
 *         if z is not None:
 *             assert len(z) == len(t), 'z and t should have the same length'
 *             for zz in z:             # <<<<<<<<<<<<<<
 *                 z_vec.push_back(zz)
 *         if ang is not None:
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_z, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1038, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1038, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1038, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1038, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1038, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1038, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_4(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1038, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_zz, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":1039
 *             assert len(z) == len(t), 'z and t should have the same length'
 *             for zz in z:
 *                 z_vec.push_back(zz)             # <<<<<<<<<<<<<<
 *         if ang is not None:
 *             assert len(ang) == len(t), 'ang and t should have the same length'
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_zz); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L1_error)
      try {
        __pyx_v_z_vec.push_back(__pyx_t_5);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1039, __pyx_L1_error)
      }

      /* "mbd/ChRigidBody.pyx":1038
 *         if z is not None:
 *             assert len(z) == len(t), 'z and t should have the same length'
 *             for zz in z:             # <<<<<<<<<<<<<<
 *                 z_vec.push_back(zz)
 *         if ang is not None:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1036
 *             for yy in y:
 *                 y_vec.push_back(yy)
 *         if z is not None:             # <<<<<<<<<<<<<<
 *             assert len(z) == len(t), 'z and t should have the same length'
 *             for zz in z:
 */
  }

  /* "mbd/ChRigidBody.pyx":1040
 *             for zz in z:
 *                 z_vec.push_back(zz)
 *         if ang is not None:             # <<<<<<<<<<<<<<
 *             assert len(ang) == len(t), 'ang and t should have the same length'
 *             for angang in ang:
 */
  __pyx_t_6 = ((((PyObject *) __pyx_v_ang.memview) != Py_None) != 0);
  if (__pyx_t_6) {

    /* "mbd/ChRigidBody.pyx":1041
 *                 z_vec.push_back(zz)
 *         if ang is not None:
 *             assert len(ang) == len(t), 'ang and t should have the same length'             # <<<<<<<<<<<<<<
 *             for angang in ang:
 *                 ang_vec.push_back(angang)
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_ang, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1041, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_t, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1041, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!((__pyx_t_7 == __pyx_t_3) != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_ang_and_t_should_have_the_same_l);
        __PYX_ERR(0, 1041, __pyx_L1_error)
      }
    }
    #endif

    /* "mbd/ChRigidBody.pyx":1042
 *         if ang is not None:
 *             assert len(ang) == len(t), 'ang and t should have the same length'
 *             for angang in ang:             # <<<<<<<<<<<<<<
 *                 ang_vec.push_back(angang)
 *         if ang2 is not None:
 */
    __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_ang, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1042, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1042, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1042, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1042, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_angang, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":1043
 *             assert len(ang) == len(t), 'ang and t should have the same length'
 *             for angang in ang:
 *                 ang_vec.push_back(angang)             # <<<<<<<<<<<<<<
 *         if ang2 is not None:
 *             assert len(ang2) == len(t), 'ang2 and t should have the same length'
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_angang); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1043, __pyx_L1_error)
      try {
        __pyx_v_ang_vec.push_back(__pyx_t_5);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1043, __pyx_L1_error)
      }

      /* "mbd/ChRigidBody.pyx":1042
 *         if ang is not None:
 *             assert len(ang) == len(t), 'ang and t should have the same length'
 *             for angang in ang:             # <<<<<<<<<<<<<<
 *                 ang_vec.push_back(angang)
 *         if ang2 is not None:
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1040
 *             for zz in z:
 *                 z_vec.push_back(zz)
 *         if ang is not None:             # <<<<<<<<<<<<<<
 *             assert len(ang) == len(t), 'ang and t should have the same length'
 *             for angang in ang:
 */
  }

  /* "mbd/ChRigidBody.pyx":1044
 *             for angang in ang:
 *                 ang_vec.push_back(angang)
 *         if ang2 is not None:             # <<<<<<<<<<<<<<
 *             assert len(ang2) == len(t), 'ang2 and t should have the same length'
 *             for ang2ang2 in ang2:
 */
  __pyx_t_6 = ((((PyObject *) __pyx_v_ang2.memview) != Py_None) != 0);
  if (__pyx_t_6) {

    /* "mbd/ChRigidBody.pyx":1045
 *                 ang_vec.push_back(angang)
 *         if ang2 is not None:
 *             assert len(ang2) == len(t), 'ang2 and t should have the same length'             # <<<<<<<<<<<<<<
 *             for ang2ang2 in ang2:
 *                 ang2_vec.push_back(ang2ang2)
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_ang2, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_t, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!((__pyx_t_3 == __pyx_t_7) != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_ang2_and_t_should_have_the_same);
        __PYX_ERR(0, 1045, __pyx_L1_error)
      }
    }
    #endif

    /* "mbd/ChRigidBody.pyx":1046
 *         if ang2 is not None:
 *             assert len(ang2) == len(t), 'ang2 and t should have the same length'
 *             for ang2ang2 in ang2:             # <<<<<<<<<<<<<<
 *                 ang2_vec.push_back(ang2ang2)
 *         if ang3 is not None:
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_ang2, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1046, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1046, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1046, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_4(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1046, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_ang2ang2, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":1047
 *             assert len(ang2) == len(t), 'ang2 and t should have the same length'
 *             for ang2ang2 in ang2:
 *                 ang2_vec.push_back(ang2ang2)             # <<<<<<<<<<<<<<
 *         if ang3 is not None:
 *             assert len(ang3) == len(t), 'ang3 and t should have the same length'
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_ang2ang2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1047, __pyx_L1_error)
      try {
        __pyx_v_ang2_vec.push_back(__pyx_t_5);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1047, __pyx_L1_error)
      }

      /* "mbd/ChRigidBody.pyx":1046
 *         if ang2 is not None:
 *             assert len(ang2) == len(t), 'ang2 and t should have the same length'
 *             for ang2ang2 in ang2:             # <<<<<<<<<<<<<<
 *                 ang2_vec.push_back(ang2ang2)
 *         if ang3 is not None:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1044
 *             for angang in ang:
 *                 ang_vec.push_back(angang)
 *         if ang2 is not None:             # <<<<<<<<<<<<<<
 *             assert len(ang2) == len(t), 'ang2 and t should have the same length'
 *             for ang2ang2 in ang2:
 */
  }

  /* "mbd/ChRigidBody.pyx":1048
 *             for ang2ang2 in ang2:
 *                 ang2_vec.push_back(ang2ang2)
 *         if ang3 is not None:             # <<<<<<<<<<<<<<
 *             assert len(ang3) == len(t), 'ang3 and t should have the same length'
 *             for ang3ang3 in ang3:
 */
  __pyx_t_6 = ((((PyObject *) __pyx_v_ang3.memview) != Py_None) != 0);
  if (__pyx_t_6) {

    /* "mbd/ChRigidBody.pyx":1049
 *                 ang2_vec.push_back(ang2ang2)
 *         if ang3 is not None:
 *             assert len(ang3) == len(t), 'ang3 and t should have the same length'             # <<<<<<<<<<<<<<
 *             for ang3ang3 in ang3:
 *                 ang3_vec.push_back(ang3ang3)
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_ang3, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_t, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!((__pyx_t_7 == __pyx_t_3) != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_ang3_and_t_should_have_the_same);
        __PYX_ERR(0, 1049, __pyx_L1_error)
      }
    }
    #endif

    /* "mbd/ChRigidBody.pyx":1050
 *         if ang3 is not None:
 *             assert len(ang3) == len(t), 'ang3 and t should have the same length'
 *             for ang3ang3 in ang3:             # <<<<<<<<<<<<<<
 *                 ang3_vec.push_back(ang3ang3)
 *         self.thisptr.setPrescribedMotionCustom(t_vec, x_vec, y_vec, z_vec,
 */
    __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_ang3, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1050, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1050, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1050, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1050, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1050, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_ang3ang3, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":1051
 *             assert len(ang3) == len(t), 'ang3 and t should have the same length'
 *             for ang3ang3 in ang3:
 *                 ang3_vec.push_back(ang3ang3)             # <<<<<<<<<<<<<<
 *         self.thisptr.setPrescribedMotionCustom(t_vec, x_vec, y_vec, z_vec,
 *                                                ang_vec, ang2_vec, ang3_vec,
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_ang3ang3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L1_error)
      try {
        __pyx_v_ang3_vec.push_back(__pyx_t_5);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1051, __pyx_L1_error)
      }

      /* "mbd/ChRigidBody.pyx":1050
 *         if ang3 is not None:
 *             assert len(ang3) == len(t), 'ang3 and t should have the same length'
 *             for ang3ang3 in ang3:             # <<<<<<<<<<<<<<
 *                 ang3_vec.push_back(ang3ang3)
 *         self.thisptr.setPrescribedMotionCustom(t_vec, x_vec, y_vec, z_vec,
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1048
 *             for ang2ang2 in ang2:
 *                 ang2_vec.push_back(ang2ang2)
 *         if ang3 is not None:             # <<<<<<<<<<<<<<
 *             assert len(ang3) == len(t), 'ang3 and t should have the same length'
 *             for ang3ang3 in ang3:
 */
  }

  /* "mbd/ChRigidBody.pyx":1052
 *             for ang3ang3 in ang3:
 *                 ang3_vec.push_back(ang3ang3)
 *         self.thisptr.setPrescribedMotionCustom(t_vec, x_vec, y_vec, z_vec,             # <<<<<<<<<<<<<<
 *                                                ang_vec, ang2_vec, ang3_vec,
 *                                                t_max)
 */
  __pyx_v_self->thisptr->setPrescribedMotionCustom(__pyx_v_t_vec, __pyx_v_x_vec, __pyx_v_y_vec, __pyx_v_z_vec, __pyx_v_ang_vec, __pyx_v_ang2_vec, __pyx_v_ang3_vec, __pyx_v_t_max);

  /* "mbd/ChRigidBody.pyx":992
 *         pass
 * 
 *     def setPrescribedMotionCustom(self, double[:] t, double[:] x=None,             # <<<<<<<<<<<<<<
 *                                   double[:] y=None, double[:] z=None,
 *                                   double[:] ang=None, double[:] ang2=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setPrescribedMotionCustom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tt);
  __Pyx_XDECREF(__pyx_v_xx);
  __Pyx_XDECREF(__pyx_v_yy);
  __Pyx_XDECREF(__pyx_v_zz);
  __Pyx_XDECREF(__pyx_v_angang);
  __Pyx_XDECREF(__pyx_v_ang2ang2);
  __Pyx_XDECREF(__pyx_v_ang3ang3);
  __PYX_XDEC_MEMVIEW(&__pyx_v_t, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_x, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_y, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_z, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ang, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ang2, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ang3, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1056
 *                                                t_max)
 * 
 *     def setPrescribedMotionSine(self, double a, double f):             # <<<<<<<<<<<<<<
 *         """Sets sinusoidal prescribed motion for body
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_77setPrescribedMotionSine(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_76setPrescribedMotionSine[] = "Sets sinusoidal prescribed motion for body\n\n        Parameters\n        ----------\n        a: double\n            amplitude of sinusoid\n        f: double\n            frequency of sinusoid\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_77setPrescribedMotionSine(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_f;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPrescribedMotionSine (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_f,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setPrescribedMotionSine", 1, 2, 2, 1); __PYX_ERR(0, 1056, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setPrescribedMotionSine") < 0)) __PYX_ERR(0, 1056, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1056, __pyx_L3_error)
    __pyx_v_f = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_f == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1056, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPrescribedMotionSine", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1056, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setPrescribedMotionSine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_76setPrescribedMotionSine(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_a, __pyx_v_f);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_76setPrescribedMotionSine(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, double __pyx_v_a, double __pyx_v_f) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPrescribedMotionSine", 0);

  /* "mbd/ChRigidBody.pyx":1066
 *             frequency of sinusoid
 *         """
 *         self.thisptr.setPrescribedMotionSine(a, f)             # <<<<<<<<<<<<<<
 * 
 *     def setPrescribedMotionPoly(self, double coeff1):
 */
  __pyx_v_self->thisptr->setPrescribedMotionSine(__pyx_v_a, __pyx_v_f);

  /* "mbd/ChRigidBody.pyx":1056
 *                                                t_max)
 * 
 *     def setPrescribedMotionSine(self, double a, double f):             # <<<<<<<<<<<<<<
 *         """Sets sinusoidal prescribed motion for body
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1068
 *         self.thisptr.setPrescribedMotionSine(a, f)
 * 
 *     def setPrescribedMotionPoly(self, double coeff1):             # <<<<<<<<<<<<<<
 *         """Sets polynomial prescribed motion for body
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_79setPrescribedMotionPoly(PyObject *__pyx_v_self, PyObject *__pyx_arg_coeff1); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_78setPrescribedMotionPoly[] = "Sets polynomial prescribed motion for body\n\n        Parameters\n        ----------\n        coeff1: double\n            coeff1 of polynomial\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_79setPrescribedMotionPoly(PyObject *__pyx_v_self, PyObject *__pyx_arg_coeff1) {
  double __pyx_v_coeff1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPrescribedMotionPoly (wrapper)", 0);
  assert(__pyx_arg_coeff1); {
    __pyx_v_coeff1 = __pyx_PyFloat_AsDouble(__pyx_arg_coeff1); if (unlikely((__pyx_v_coeff1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1068, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setPrescribedMotionPoly", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_78setPrescribedMotionPoly(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((double)__pyx_v_coeff1));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_78setPrescribedMotionPoly(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, double __pyx_v_coeff1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPrescribedMotionPoly", 0);

  /* "mbd/ChRigidBody.pyx":1076
 *             coeff1 of polynomial
 *         """
 *         self.thisptr.setPrescribedMotionPoly(coeff1)             # <<<<<<<<<<<<<<
 * 
 *     def setPrescribedMotion(self, function):
 */
  __pyx_v_self->thisptr->setPrescribedMotionPoly(__pyx_v_coeff1);

  /* "mbd/ChRigidBody.pyx":1068
 *         self.thisptr.setPrescribedMotionSine(a, f)
 * 
 *     def setPrescribedMotionPoly(self, double coeff1):             # <<<<<<<<<<<<<<
 *         """Sets polynomial prescribed motion for body
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1078
 *         self.thisptr.setPrescribedMotionPoly(coeff1)
 * 
 *     def setPrescribedMotion(self, function):             # <<<<<<<<<<<<<<
 *         """Sets custom prescribed motion function
 *         (!) should be preferably set only if body is free and not
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_81setPrescribedMotion(PyObject *__pyx_v_self, PyObject *__pyx_v_function); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_80setPrescribedMotion[] = "Sets custom prescribed motion function\n        (!) should be preferably set only if body is free and not\n        linked to other bodies or other elements (such as moorings)\n        as this is used only for setting moving mesh BC by enforcing\n        position of the body at each time step.\n        Use setPrescribedMotionPoly or setPrescribedMotionSine for\n        functions that are safe to use with a body linked with other\n        elements.\n\n        Parameters\n        ----------\n        function:\n            must be a function of time returning an array of the\n            absolute position of the body (numpy array of length 3:\n            x, y, z)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_81setPrescribedMotion(PyObject *__pyx_v_self, PyObject *__pyx_v_function) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPrescribedMotion (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_80setPrescribedMotion(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_function));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_80setPrescribedMotion(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_function) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPrescribedMotion", 0);

  /* "mbd/ChRigidBody.pyx":1095
 *             x, y, z)
 *         """
 *         self.prescribed_motion_function = function             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray callPrescribedMotion(self, double t):
 */
  __Pyx_INCREF(__pyx_v_function);
  __Pyx_GIVEREF(__pyx_v_function);
  __Pyx_GOTREF(__pyx_v_self->prescribed_motion_function);
  __Pyx_DECREF(__pyx_v_self->prescribed_motion_function);
  __pyx_v_self->prescribed_motion_function = __pyx_v_function;

  /* "mbd/ChRigidBody.pyx":1078
 *         self.thisptr.setPrescribedMotionPoly(coeff1)
 * 
 *     def setPrescribedMotion(self, function):             # <<<<<<<<<<<<<<
 *         """Sets custom prescribed motion function
 *         (!) should be preferably set only if body is free and not
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1097
 *         self.prescribed_motion_function = function
 * 
 *     cdef np.ndarray callPrescribedMotion(self, double t):             # <<<<<<<<<<<<<<
 *         return self.prescribed_motion_function(t)
 * 
 */

static PyArrayObject *__pyx_f_3mbd_11ChRigidBody_10ProtChBody_callPrescribedMotion(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, double __pyx_v_t) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("callPrescribedMotion", 0);

  /* "mbd/ChRigidBody.pyx":1098
 * 
 *     cdef np.ndarray callPrescribedMotion(self, double t):
 *         return self.prescribed_motion_function(t)             # <<<<<<<<<<<<<<
 * 
 *     def storeValues(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->prescribed_motion_function);
  __pyx_t_3 = __pyx_v_self->prescribed_motion_function; __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1098, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1098, __pyx_L1_error)
  __pyx_r = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":1097
 *         self.prescribed_motion_function = function
 * 
 *     cdef np.ndarray callPrescribedMotion(self, double t):             # <<<<<<<<<<<<<<
 *         return self.prescribed_motion_function(t)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.callPrescribedMotion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1100
 *         return self.prescribed_motion_function(t)
 * 
 *     def storeValues(self):             # <<<<<<<<<<<<<<
 *         self.velocity_last = self.velocity
 *         self.position_last = self.position
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_83storeValues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_83storeValues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("storeValues (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_82storeValues(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_82storeValues(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_v_comm = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("storeValues", 0);

  /* "mbd/ChRigidBody.pyx":1101
 * 
 *     def storeValues(self):
 *         self.velocity_last = self.velocity             # <<<<<<<<<<<<<<
 *         self.position_last = self.position
 *         self.acceleration_last = self.acceleration
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->velocity);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->velocity_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->velocity_last));
  __pyx_v_self->velocity_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1102
 *     def storeValues(self):
 *         self.velocity_last = self.velocity
 *         self.position_last = self.position             # <<<<<<<<<<<<<<
 *         self.acceleration_last = self.acceleration
 *         self.rotq_last = self.rotq
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->position);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->position_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->position_last));
  __pyx_v_self->position_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1103
 *         self.velocity_last = self.velocity
 *         self.position_last = self.position
 *         self.acceleration_last = self.acceleration             # <<<<<<<<<<<<<<
 *         self.rotq_last = self.rotq
 *         self.rotm_last = self.rotm
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->acceleration);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->acceleration_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->acceleration_last));
  __pyx_v_self->acceleration_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1104
 *         self.position_last = self.position
 *         self.acceleration_last = self.acceleration
 *         self.rotq_last = self.rotq             # <<<<<<<<<<<<<<
 *         self.rotm_last = self.rotm
 *         self.ang_acceleration_last = self.ang_acceleration
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->rotq);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rotq_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotq_last));
  __pyx_v_self->rotq_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1105
 *         self.acceleration_last = self.acceleration
 *         self.rotq_last = self.rotq
 *         self.rotm_last = self.rotm             # <<<<<<<<<<<<<<
 *         self.ang_acceleration_last = self.ang_acceleration
 *         self.ang_velocity_last = self.ang_velocity
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->rotm);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rotm_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotm_last));
  __pyx_v_self->rotm_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1106
 *         self.rotq_last = self.rotq
 *         self.rotm_last = self.rotm
 *         self.ang_acceleration_last = self.ang_acceleration             # <<<<<<<<<<<<<<
 *         self.ang_velocity_last = self.ang_velocity
 *         self.F_last = self.F
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ang_acceleration);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ang_acceleration_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_acceleration_last));
  __pyx_v_self->ang_acceleration_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1107
 *         self.rotm_last = self.rotm
 *         self.ang_acceleration_last = self.ang_acceleration
 *         self.ang_velocity_last = self.ang_velocity             # <<<<<<<<<<<<<<
 *         self.F_last = self.F
 *         self.M_last = self.M
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ang_velocity);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ang_velocity_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_velocity_last));
  __pyx_v_self->ang_velocity_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1108
 *         self.ang_acceleration_last = self.ang_acceleration
 *         self.ang_velocity_last = self.ang_velocity
 *         self.F_last = self.F             # <<<<<<<<<<<<<<
 *         self.M_last = self.M
 *         self.ang_vel_norm_last = self.ang_vel_norm
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->F);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_last));
  __pyx_v_self->F_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1109
 *         self.ang_velocity_last = self.ang_velocity
 *         self.F_last = self.F
 *         self.M_last = self.M             # <<<<<<<<<<<<<<
 *         self.ang_vel_norm_last = self.ang_vel_norm
 *         # force from fluid at current time step
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->M);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_last));
  __pyx_v_self->M_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1110
 *         self.F_last = self.F
 *         self.M_last = self.M
 *         self.ang_vel_norm_last = self.ang_vel_norm             # <<<<<<<<<<<<<<
 *         # force from fluid at current time step
 *         self.F_prot_last = np.array(self.F_prot)
 */
  __pyx_t_2 = __pyx_v_self->ang_vel_norm;
  __pyx_v_self->ang_vel_norm_last = __pyx_t_2;

  /* "mbd/ChRigidBody.pyx":1112
 *         self.ang_vel_norm_last = self.ang_vel_norm
 *         # force from fluid at current time step
 *         self.F_prot_last = np.array(self.F_prot)             # <<<<<<<<<<<<<<
 *         self.M_prot_last = np.array(self.M_prot)
 *         self.F_applied_last = np.array(self.F_applied)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_self->F_prot)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self->F_prot)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self->F_prot)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self->F_prot));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->F_prot));
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_self->F_prot));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_prot_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_prot_last));
  __pyx_v_self->F_prot_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1113
 *         # force from fluid at current time step
 *         self.F_prot_last = np.array(self.F_prot)
 *         self.M_prot_last = np.array(self.M_prot)             # <<<<<<<<<<<<<<
 *         self.F_applied_last = np.array(self.F_applied)
 *         self.M_applied_last = np.array(self.M_applied)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_self->M_prot)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_self->M_prot)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_self->M_prot)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self->M_prot));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->M_prot));
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, ((PyObject *)__pyx_v_self->M_prot));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_prot_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_prot_last));
  __pyx_v_self->M_prot_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1114
 *         self.F_prot_last = np.array(self.F_prot)
 *         self.M_prot_last = np.array(self.M_prot)
 *         self.F_applied_last = np.array(self.F_applied)             # <<<<<<<<<<<<<<
 *         self.M_applied_last = np.array(self.M_applied)
 *         self.F_Aij_last = np.array(self.F_Aij)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self->F_applied)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self->F_applied)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self->F_applied)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self->F_applied));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->F_applied));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_self->F_applied));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_applied_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_applied_last));
  __pyx_v_self->F_applied_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1115
 *         self.M_prot_last = np.array(self.M_prot)
 *         self.F_applied_last = np.array(self.F_applied)
 *         self.M_applied_last = np.array(self.M_applied)             # <<<<<<<<<<<<<<
 *         self.F_Aij_last = np.array(self.F_Aij)
 *         self.M_Aij_last = np.array(self.M_Aij)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_self->M_applied)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self->M_applied)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self->M_applied)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self->M_applied));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->M_applied));
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_self->M_applied));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_applied_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_applied_last));
  __pyx_v_self->M_applied_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1116
 *         self.F_applied_last = np.array(self.F_applied)
 *         self.M_applied_last = np.array(self.M_applied)
 *         self.F_Aij_last = np.array(self.F_Aij)             # <<<<<<<<<<<<<<
 *         self.M_Aij_last = np.array(self.M_Aij)
 *         if self.ProtChSystem.parallel_mode is True:
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_self->F_Aij)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_self->F_Aij)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_self->F_Aij)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self->F_Aij));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->F_Aij));
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, ((PyObject *)__pyx_v_self->F_Aij));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_Aij_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_Aij_last));
  __pyx_v_self->F_Aij_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1117
 *         self.M_applied_last = np.array(self.M_applied)
 *         self.F_Aij_last = np.array(self.F_Aij)
 *         self.M_Aij_last = np.array(self.M_Aij)             # <<<<<<<<<<<<<<
 *         if self.ProtChSystem.parallel_mode is True:
 *             comm = Comm.get().comm.tompi4py()
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self->M_Aij)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self->M_Aij)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self->M_Aij)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self->M_Aij));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->M_Aij));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_self->M_Aij));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_Aij_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_Aij_last));
  __pyx_v_self->M_Aij_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1118
 *         self.F_Aij_last = np.array(self.F_Aij)
 *         self.M_Aij_last = np.array(self.M_Aij)
 *         if self.ProtChSystem.parallel_mode is True:             # <<<<<<<<<<<<<<
 *             comm = Comm.get().comm.tompi4py()
 *             self.position_last = comm.bcast(self.position_last,
 */
  __pyx_t_6 = ((__pyx_v_self->ProtChSystem->parallel_mode == 1) != 0);
  if (__pyx_t_6) {

    /* "mbd/ChRigidBody.pyx":1119
 *         self.M_Aij_last = np.array(self.M_Aij)
 *         if self.ProtChSystem.parallel_mode is True:
 *             comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *             self.position_last = comm.bcast(self.position_last,
 *                                             self.ProtChSystem.chrono_processor)
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1119, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1119, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_comm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1119, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1119, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_comm = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1120
 *         if self.ProtChSystem.parallel_mode is True:
 *             comm = Comm.get().comm.tompi4py()
 *             self.position_last = comm.bcast(self.position_last,             # <<<<<<<<<<<<<<
 *                                             self.ProtChSystem.chrono_processor)
 *             self.velocity_last = comm.bcast(self.velocity_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1121
 *             comm = Comm.get().comm.tompi4py()
 *             self.position_last = comm.bcast(self.position_last,
 *                                             self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.velocity_last = comm.bcast(self.velocity_last,
 *                                             self.ProtChSystem.chrono_processor)
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->position_last), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1120, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->position_last), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1120, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->position_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->position_last));
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->position_last));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1120
 *         if self.ProtChSystem.parallel_mode is True:
 *             comm = Comm.get().comm.tompi4py()
 *             self.position_last = comm.bcast(self.position_last,             # <<<<<<<<<<<<<<
 *                                             self.ProtChSystem.chrono_processor)
 *             self.velocity_last = comm.bcast(self.velocity_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1120, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->position_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->position_last));
    __pyx_v_self->position_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1122
 *             self.position_last = comm.bcast(self.position_last,
 *                                             self.ProtChSystem.chrono_processor)
 *             self.velocity_last = comm.bcast(self.velocity_last,             # <<<<<<<<<<<<<<
 *                                             self.ProtChSystem.chrono_processor)
 *             self.acceleration_last = comm.bcast(self.acceleration_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1123
 *                                             self.ProtChSystem.chrono_processor)
 *             self.velocity_last = comm.bcast(self.velocity_last,
 *                                             self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.acceleration_last = comm.bcast(self.acceleration_last,
 *                                                 self.ProtChSystem.chrono_processor)
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->velocity_last), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1122, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->velocity_last), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1122, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->velocity_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->velocity_last));
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->velocity_last));
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1122
 *             self.position_last = comm.bcast(self.position_last,
 *                                             self.ProtChSystem.chrono_processor)
 *             self.velocity_last = comm.bcast(self.velocity_last,             # <<<<<<<<<<<<<<
 *                                             self.ProtChSystem.chrono_processor)
 *             self.acceleration_last = comm.bcast(self.acceleration_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1122, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->velocity_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->velocity_last));
    __pyx_v_self->velocity_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1124
 *             self.velocity_last = comm.bcast(self.velocity_last,
 *                                             self.ProtChSystem.chrono_processor)
 *             self.acceleration_last = comm.bcast(self.acceleration_last,             # <<<<<<<<<<<<<<
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.rotq_last = comm.bcast(self.rotq_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1125
 *                                             self.ProtChSystem.chrono_processor)
 *             self.acceleration_last = comm.bcast(self.acceleration_last,
 *                                                 self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.rotq_last = comm.bcast(self.rotq_last,
 *                                         self.ProtChSystem.chrono_processor)
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self->acceleration_last), __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1124, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self->acceleration_last), __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1124, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->acceleration_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->acceleration_last));
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->acceleration_last));
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1124
 *             self.velocity_last = comm.bcast(self.velocity_last,
 *                                             self.ProtChSystem.chrono_processor)
 *             self.acceleration_last = comm.bcast(self.acceleration_last,             # <<<<<<<<<<<<<<
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.rotq_last = comm.bcast(self.rotq_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->acceleration_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->acceleration_last));
    __pyx_v_self->acceleration_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1126
 *             self.acceleration_last = comm.bcast(self.acceleration_last,
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.rotq_last = comm.bcast(self.rotq_last,             # <<<<<<<<<<<<<<
 *                                         self.ProtChSystem.chrono_processor)
 *             self.rotm_last = comm.bcast(self.rotm_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1127
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.rotq_last = comm.bcast(self.rotq_last,
 *                                         self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.rotm_last = comm.bcast(self.rotm_last,
 *                                         self.ProtChSystem.chrono_processor)
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->rotq_last), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->rotq_last), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->rotq_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->rotq_last));
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->rotq_last));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1126
 *             self.acceleration_last = comm.bcast(self.acceleration_last,
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.rotq_last = comm.bcast(self.rotq_last,             # <<<<<<<<<<<<<<
 *                                         self.ProtChSystem.chrono_processor)
 *             self.rotm_last = comm.bcast(self.rotm_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->rotq_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->rotq_last));
    __pyx_v_self->rotq_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1128
 *             self.rotq_last = comm.bcast(self.rotq_last,
 *                                         self.ProtChSystem.chrono_processor)
 *             self.rotm_last = comm.bcast(self.rotm_last,             # <<<<<<<<<<<<<<
 *                                         self.ProtChSystem.chrono_processor)
 *             self.ang_velocity_last = comm.bcast(self.ang_velocity_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1129
 *                                         self.ProtChSystem.chrono_processor)
 *             self.rotm_last = comm.bcast(self.rotm_last,
 *                                         self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.ang_velocity_last = comm.bcast(self.ang_velocity_last,
 *                                                 self.ProtChSystem.chrono_processor)
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->rotm_last), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->rotm_last), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->rotm_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->rotm_last));
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->rotm_last));
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1128
 *             self.rotq_last = comm.bcast(self.rotq_last,
 *                                         self.ProtChSystem.chrono_processor)
 *             self.rotm_last = comm.bcast(self.rotm_last,             # <<<<<<<<<<<<<<
 *                                         self.ProtChSystem.chrono_processor)
 *             self.ang_velocity_last = comm.bcast(self.ang_velocity_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->rotm_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->rotm_last));
    __pyx_v_self->rotm_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1130
 *             self.rotm_last = comm.bcast(self.rotm_last,
 *                                         self.ProtChSystem.chrono_processor)
 *             self.ang_velocity_last = comm.bcast(self.ang_velocity_last,             # <<<<<<<<<<<<<<
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.ang_acceleration_last = comm.bcast(self.ang_acceleration_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1131
 *                                         self.ProtChSystem.chrono_processor)
 *             self.ang_velocity_last = comm.bcast(self.ang_velocity_last,
 *                                                 self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.ang_acceleration_last = comm.bcast(self.ang_acceleration_last,
 *                                                     self.ProtChSystem.chrono_processor)
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self->ang_velocity_last), __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self->ang_velocity_last), __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->ang_velocity_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->ang_velocity_last));
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->ang_velocity_last));
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1130
 *             self.rotm_last = comm.bcast(self.rotm_last,
 *                                         self.ProtChSystem.chrono_processor)
 *             self.ang_velocity_last = comm.bcast(self.ang_velocity_last,             # <<<<<<<<<<<<<<
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.ang_acceleration_last = comm.bcast(self.ang_acceleration_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1130, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->ang_velocity_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_velocity_last));
    __pyx_v_self->ang_velocity_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1132
 *             self.ang_velocity_last = comm.bcast(self.ang_velocity_last,
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.ang_acceleration_last = comm.bcast(self.ang_acceleration_last,             # <<<<<<<<<<<<<<
 *                                                     self.ProtChSystem.chrono_processor)
 *             self.ang_vel_norm_last = comm.bcast(self.ang_vel_norm_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1133
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.ang_acceleration_last = comm.bcast(self.ang_acceleration_last,
 *                                                     self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.ang_vel_norm_last = comm.bcast(self.ang_vel_norm_last,
 *                                                 self.ProtChSystem.chrono_processor)
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->ang_acceleration_last), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->ang_acceleration_last), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->ang_acceleration_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->ang_acceleration_last));
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->ang_acceleration_last));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1132
 *             self.ang_velocity_last = comm.bcast(self.ang_velocity_last,
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.ang_acceleration_last = comm.bcast(self.ang_acceleration_last,             # <<<<<<<<<<<<<<
 *                                                     self.ProtChSystem.chrono_processor)
 *             self.ang_vel_norm_last = comm.bcast(self.ang_vel_norm_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1132, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->ang_acceleration_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_acceleration_last));
    __pyx_v_self->ang_acceleration_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1134
 *             self.ang_acceleration_last = comm.bcast(self.ang_acceleration_last,
 *                                                     self.ProtChSystem.chrono_processor)
 *             self.ang_vel_norm_last = comm.bcast(self.ang_vel_norm_last,             # <<<<<<<<<<<<<<
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.F_prot_last = comm.bcast(self.F_prot_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->ang_vel_norm_last); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "mbd/ChRigidBody.pyx":1135
 *                                                     self.ProtChSystem.chrono_processor)
 *             self.ang_vel_norm_last = comm.bcast(self.ang_vel_norm_last,
 *                                                 self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.F_prot_last = comm.bcast(self.F_prot_last,
 *                                           self.ProtChSystem.chrono_processor)
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_8, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_8, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_8 = 0;
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1134
 *             self.ang_acceleration_last = comm.bcast(self.ang_acceleration_last,
 *                                                     self.ProtChSystem.chrono_processor)
 *             self.ang_vel_norm_last = comm.bcast(self.ang_vel_norm_last,             # <<<<<<<<<<<<<<
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.F_prot_last = comm.bcast(self.F_prot_last,
 */
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->ang_vel_norm_last = __pyx_t_2;

    /* "mbd/ChRigidBody.pyx":1136
 *             self.ang_vel_norm_last = comm.bcast(self.ang_vel_norm_last,
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.F_prot_last = comm.bcast(self.F_prot_last,             # <<<<<<<<<<<<<<
 *                                           self.ProtChSystem.chrono_processor)
 *             self.M_prot_last = comm.bcast(self.M_prot_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1137
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.F_prot_last = comm.bcast(self.F_prot_last,
 *                                           self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.M_prot_last = comm.bcast(self.M_prot_last,
 *                                           self.ProtChSystem.chrono_processor)
 */
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->F_prot_last), __pyx_t_9};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1136, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->F_prot_last), __pyx_t_9};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1136, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->F_prot_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->F_prot_last));
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->F_prot_last));
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1136
 *             self.ang_vel_norm_last = comm.bcast(self.ang_vel_norm_last,
 *                                                 self.ProtChSystem.chrono_processor)
 *             self.F_prot_last = comm.bcast(self.F_prot_last,             # <<<<<<<<<<<<<<
 *                                           self.ProtChSystem.chrono_processor)
 *             self.M_prot_last = comm.bcast(self.M_prot_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->F_prot_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->F_prot_last));
    __pyx_v_self->F_prot_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1138
 *             self.F_prot_last = comm.bcast(self.F_prot_last,
 *                                           self.ProtChSystem.chrono_processor)
 *             self.M_prot_last = comm.bcast(self.M_prot_last,             # <<<<<<<<<<<<<<
 *                                           self.ProtChSystem.chrono_processor)
 *             self.F_applied_last = comm.bcast(self.F_applied_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1139
 *                                           self.ProtChSystem.chrono_processor)
 *             self.M_prot_last = comm.bcast(self.M_prot_last,
 *                                           self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.F_applied_last = comm.bcast(self.F_applied_last,
 *                                              self.ProtChSystem.chrono_processor)
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_self->M_prot_last), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_self->M_prot_last), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->M_prot_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->M_prot_last));
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->M_prot_last));
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1138
 *             self.F_prot_last = comm.bcast(self.F_prot_last,
 *                                           self.ProtChSystem.chrono_processor)
 *             self.M_prot_last = comm.bcast(self.M_prot_last,             # <<<<<<<<<<<<<<
 *                                           self.ProtChSystem.chrono_processor)
 *             self.F_applied_last = comm.bcast(self.F_applied_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1138, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->M_prot_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->M_prot_last));
    __pyx_v_self->M_prot_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1140
 *             self.M_prot_last = comm.bcast(self.M_prot_last,
 *                                           self.ProtChSystem.chrono_processor)
 *             self.F_applied_last = comm.bcast(self.F_applied_last,             # <<<<<<<<<<<<<<
 *                                              self.ProtChSystem.chrono_processor)
 *             self.M_applied_last = comm.bcast(self.M_applied_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1141
 *                                           self.ProtChSystem.chrono_processor)
 *             self.F_applied_last = comm.bcast(self.F_applied_last,
 *                                              self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.M_applied_last = comm.bcast(self.M_applied_last,
 *                                              self.ProtChSystem.chrono_processor)
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self->F_applied_last), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self->F_applied_last), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1140, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->F_applied_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->F_applied_last));
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->F_applied_last));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1140
 *             self.M_prot_last = comm.bcast(self.M_prot_last,
 *                                           self.ProtChSystem.chrono_processor)
 *             self.F_applied_last = comm.bcast(self.F_applied_last,             # <<<<<<<<<<<<<<
 *                                              self.ProtChSystem.chrono_processor)
 *             self.M_applied_last = comm.bcast(self.M_applied_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->F_applied_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->F_applied_last));
    __pyx_v_self->F_applied_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1142
 *             self.F_applied_last = comm.bcast(self.F_applied_last,
 *                                              self.ProtChSystem.chrono_processor)
 *             self.M_applied_last = comm.bcast(self.M_applied_last,             # <<<<<<<<<<<<<<
 *                                              self.ProtChSystem.chrono_processor)
 *             self.F_Aij_last = comm.bcast(self.F_Aij_last,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1143
 *                                              self.ProtChSystem.chrono_processor)
 *             self.M_applied_last = comm.bcast(self.M_applied_last,
 *                                              self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.F_Aij_last = comm.bcast(self.F_Aij_last,
 *                                          self.ProtChSystem.chrono_processor)
 */
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->M_applied_last), __pyx_t_9};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->M_applied_last), __pyx_t_9};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->M_applied_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->M_applied_last));
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->M_applied_last));
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1142
 *             self.F_applied_last = comm.bcast(self.F_applied_last,
 *                                              self.ProtChSystem.chrono_processor)
 *             self.M_applied_last = comm.bcast(self.M_applied_last,             # <<<<<<<<<<<<<<
 *                                              self.ProtChSystem.chrono_processor)
 *             self.F_Aij_last = comm.bcast(self.F_Aij_last,
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->M_applied_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->M_applied_last));
    __pyx_v_self->M_applied_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1144
 *             self.M_applied_last = comm.bcast(self.M_applied_last,
 *                                              self.ProtChSystem.chrono_processor)
 *             self.F_Aij_last = comm.bcast(self.F_Aij_last,             # <<<<<<<<<<<<<<
 *                                          self.ProtChSystem.chrono_processor)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "mbd/ChRigidBody.pyx":1145
 *                                              self.ProtChSystem.chrono_processor)
 *             self.F_Aij_last = comm.bcast(self.F_Aij_last,
 *                                          self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 * 
 *     def getValues(self):
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_self->F_Aij_last), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_self->F_Aij_last), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->F_Aij_last));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->F_Aij_last));
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->F_Aij_last));
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1144
 *             self.M_applied_last = comm.bcast(self.M_applied_last,
 *                                              self.ProtChSystem.chrono_processor)
 *             self.F_Aij_last = comm.bcast(self.F_Aij_last,             # <<<<<<<<<<<<<<
 *                                          self.ProtChSystem.chrono_processor)
 * 
 */
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->F_Aij_last);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->F_Aij_last));
    __pyx_v_self->F_Aij_last = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1118
 *         self.F_Aij_last = np.array(self.F_Aij)
 *         self.M_Aij_last = np.array(self.M_Aij)
 *         if self.ProtChSystem.parallel_mode is True:             # <<<<<<<<<<<<<<
 *             comm = Comm.get().comm.tompi4py()
 *             self.position_last = comm.bcast(self.position_last,
 */
  }

  /* "mbd/ChRigidBody.pyx":1100
 *         return self.prescribed_motion_function(t)
 * 
 *     def storeValues(self):             # <<<<<<<<<<<<<<
 *         self.velocity_last = self.velocity
 *         self.position_last = self.position
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.storeValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1147
 *                                          self.ProtChSystem.chrono_processor)
 * 
 *     def getValues(self):             # <<<<<<<<<<<<<<
 *         """Get values (pos, vel, acc, etc.) from C++ to python
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_85getValues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_84getValues[] = "Get values (pos, vel, acc, etc.) from C++ to python\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_85getValues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValues (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_84getValues(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_84getValues(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_v_comm = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("getValues", 0);

  /* "mbd/ChRigidBody.pyx":1151
 *         """
 *         # position
 *         self.position = self.ChBody.GetPos()             # <<<<<<<<<<<<<<
 *         # rotation
 *         self.rotq = self.ChBody.GetRot()
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.GetPos(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->position);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->position));
  __pyx_v_self->position = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1153
 *         self.position = self.ChBody.GetPos()
 *         # rotation
 *         self.rotq = self.ChBody.GetRot()             # <<<<<<<<<<<<<<
 *         self.rotm = self.ChBody.GetA()
 *         # acceleration
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.GetRot(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rotq);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotq));
  __pyx_v_self->rotq = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1154
 *         # rotation
 *         self.rotq = self.ChBody.GetRot()
 *         self.rotm = self.ChBody.GetA()             # <<<<<<<<<<<<<<
 *         # acceleration
 *         self.acceleration = self.ChBody.GetPos_dtdt()
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.GetA(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rotm);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotm));
  __pyx_v_self->rotm = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1156
 *         self.rotm = self.ChBody.GetA()
 *         # acceleration
 *         self.acceleration = self.ChBody.GetPos_dtdt()             # <<<<<<<<<<<<<<
 *         #velocity
 *         self.velocity = self.ChBody.GetPos_dt()
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.GetPos_dtdt(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->acceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->acceleration));
  __pyx_v_self->acceleration = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1158
 *         self.acceleration = self.ChBody.GetPos_dtdt()
 *         #velocity
 *         self.velocity = self.ChBody.GetPos_dt()             # <<<<<<<<<<<<<<
 *         # angular acceleration
 *         self.ang_acceleration = self.ChBody.GetWacc_loc()
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.GetPos_dt(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->velocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->velocity));
  __pyx_v_self->velocity = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1160
 *         self.velocity = self.ChBody.GetPos_dt()
 *         # angular acceleration
 *         self.ang_acceleration = self.ChBody.GetWacc_loc()             # <<<<<<<<<<<<<<
 *         # angular velocity
 *         self.ang_velocity = self.ChBody.GetWvel_loc()
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.GetWacc_loc(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ang_acceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_acceleration));
  __pyx_v_self->ang_acceleration = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1162
 *         self.ang_acceleration = self.ChBody.GetWacc_loc()
 *         # angular velocity
 *         self.ang_velocity = self.ChBody.GetWvel_loc()             # <<<<<<<<<<<<<<
 *         # norm of angular velocity
 *         self.ang_vel_norm = np.sqrt(self.ang_velocity[0]**2
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_v_self->ChBody->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.GetWvel_loc(((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving *)__pyx_v_self->ChBody), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ang_velocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_velocity));
  __pyx_v_self->ang_velocity = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1164
 *         self.ang_velocity = self.ChBody.GetWvel_loc()
 *         # norm of angular velocity
 *         self.ang_vel_norm = np.sqrt(self.ang_velocity[0]**2             # <<<<<<<<<<<<<<
 *                                     +self.ang_velocity[1]**2
 *                                     +self.ang_velocity[2]**2)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->ang_velocity), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Power(__pyx_t_2, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":1165
 *         # norm of angular velocity
 *         self.ang_vel_norm = np.sqrt(self.ang_velocity[0]**2
 *                                     +self.ang_velocity[1]**2             # <<<<<<<<<<<<<<
 *                                     +self.ang_velocity[2]**2)
 *         # force
 */
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->ang_velocity), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Power(__pyx_t_2, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":1166
 *         self.ang_vel_norm = np.sqrt(self.ang_velocity[0]**2
 *                                     +self.ang_velocity[1]**2
 *                                     +self.ang_velocity[2]**2)             # <<<<<<<<<<<<<<
 *         # force
 *         self.F = pych.ChVector_to_npArray(self.thisptr.F)
 */
  __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->ang_velocity), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Power(__pyx_t_5, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":1164
 *         self.ang_velocity = self.ChBody.GetWvel_loc()
 *         # norm of angular velocity
 *         self.ang_vel_norm = np.sqrt(self.ang_velocity[0]**2             # <<<<<<<<<<<<<<
 *                                     +self.ang_velocity[1]**2
 *                                     +self.ang_velocity[2]**2)
 */
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ang_vel_norm = __pyx_t_6;

  /* "mbd/ChRigidBody.pyx":1168
 *                                     +self.ang_velocity[2]**2)
 *         # force
 *         self.F = pych.ChVector_to_npArray(self.thisptr.F)             # <<<<<<<<<<<<<<
 *         # moment
 *         self.M = pych.ChVector_to_npArray(self.thisptr.M)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_7proteus_3mbd_12pyChronoCore_ChVector_to_npArray(((ChVector<double>  &)__pyx_v_self->thisptr->F))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F));
  __pyx_v_self->F = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1170
 *         self.F = pych.ChVector_to_npArray(self.thisptr.F)
 *         # moment
 *         self.M = pych.ChVector_to_npArray(self.thisptr.M)             # <<<<<<<<<<<<<<
 *         if self.ProtChSystem.parallel_mode is True:
 *             comm = Comm.get().comm.tompi4py()
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_7proteus_3mbd_12pyChronoCore_ChVector_to_npArray(((ChVector<double>  &)__pyx_v_self->thisptr->M))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M));
  __pyx_v_self->M = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1171
 *         # moment
 *         self.M = pych.ChVector_to_npArray(self.thisptr.M)
 *         if self.ProtChSystem.parallel_mode is True:             # <<<<<<<<<<<<<<
 *             comm = Comm.get().comm.tompi4py()
 *             self.position = comm.bcast(self.position, self.ProtChSystem.chrono_processor)
 */
  __pyx_t_7 = ((__pyx_v_self->ProtChSystem->parallel_mode == 1) != 0);
  if (__pyx_t_7) {

    /* "mbd/ChRigidBody.pyx":1172
 *         self.M = pych.ChVector_to_npArray(self.thisptr.M)
 *         if self.ProtChSystem.parallel_mode is True:
 *             comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *             self.position = comm.bcast(self.position, self.ProtChSystem.chrono_processor)
 *             self.velocity = comm.bcast(self.velocity, self.ProtChSystem.chrono_processor)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1172, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1172, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_comm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1172, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1172, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_comm = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1173
 *         if self.ProtChSystem.parallel_mode is True:
 *             comm = Comm.get().comm.tompi4py()
 *             self.position = comm.bcast(self.position, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.velocity = comm.bcast(self.velocity, self.ProtChSystem.chrono_processor)
 *             self.acceleration = comm.bcast(self.acceleration, self.ProtChSystem.chrono_processor)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->position), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1173, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->position), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1173, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->position));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->position));
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->position));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->position);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->position));
    __pyx_v_self->position = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1174
 *             comm = Comm.get().comm.tompi4py()
 *             self.position = comm.bcast(self.position, self.ProtChSystem.chrono_processor)
 *             self.velocity = comm.bcast(self.velocity, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.acceleration = comm.bcast(self.acceleration, self.ProtChSystem.chrono_processor)
 *             self.rotq = comm.bcast(self.rotq, self.ProtChSystem.chrono_processor)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->velocity), __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1174, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->velocity), __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1174, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->velocity));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->velocity));
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->velocity));
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_8, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->velocity);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->velocity));
    __pyx_v_self->velocity = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1175
 *             self.position = comm.bcast(self.position, self.ProtChSystem.chrono_processor)
 *             self.velocity = comm.bcast(self.velocity, self.ProtChSystem.chrono_processor)
 *             self.acceleration = comm.bcast(self.acceleration, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.rotq = comm.bcast(self.rotq, self.ProtChSystem.chrono_processor)
 *             self.rotm = comm.bcast(self.rotm, self.ProtChSystem.chrono_processor)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->acceleration), __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->acceleration), __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->acceleration));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->acceleration));
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->acceleration));
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->acceleration);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->acceleration));
    __pyx_v_self->acceleration = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1176
 *             self.velocity = comm.bcast(self.velocity, self.ProtChSystem.chrono_processor)
 *             self.acceleration = comm.bcast(self.acceleration, self.ProtChSystem.chrono_processor)
 *             self.rotq = comm.bcast(self.rotq, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.rotm = comm.bcast(self.rotm, self.ProtChSystem.chrono_processor)
 *             self.ang_velocity = comm.bcast(self.ang_velocity, self.ProtChSystem.chrono_processor)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->rotq), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->rotq), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->rotq));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->rotq));
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->rotq));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1176, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->rotq);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->rotq));
    __pyx_v_self->rotq = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1177
 *             self.acceleration = comm.bcast(self.acceleration, self.ProtChSystem.chrono_processor)
 *             self.rotq = comm.bcast(self.rotq, self.ProtChSystem.chrono_processor)
 *             self.rotm = comm.bcast(self.rotm, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.ang_velocity = comm.bcast(self.ang_velocity, self.ProtChSystem.chrono_processor)
 *             self.ang_acceleration = comm.bcast(self.ang_acceleration, self.ProtChSystem.chrono_processor)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->rotm), __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1177, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self->rotm), __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1177, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->rotm));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->rotm));
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->rotm));
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_8, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1177, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->rotm);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->rotm));
    __pyx_v_self->rotm = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1178
 *             self.rotq = comm.bcast(self.rotq, self.ProtChSystem.chrono_processor)
 *             self.rotm = comm.bcast(self.rotm, self.ProtChSystem.chrono_processor)
 *             self.ang_velocity = comm.bcast(self.ang_velocity, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.ang_acceleration = comm.bcast(self.ang_acceleration, self.ProtChSystem.chrono_processor)
 *             self.ang_vel_norm = comm.bcast(self.ang_vel_norm, self.ProtChSystem.chrono_processor)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->ang_velocity), __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->ang_velocity), __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->ang_velocity));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->ang_velocity));
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->ang_velocity));
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->ang_velocity);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_velocity));
    __pyx_v_self->ang_velocity = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1179
 *             self.rotm = comm.bcast(self.rotm, self.ProtChSystem.chrono_processor)
 *             self.ang_velocity = comm.bcast(self.ang_velocity, self.ProtChSystem.chrono_processor)
 *             self.ang_acceleration = comm.bcast(self.ang_acceleration, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             self.ang_vel_norm = comm.bcast(self.ang_vel_norm, self.ProtChSystem.chrono_processor)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->ang_acceleration), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self->ang_acceleration), __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->ang_acceleration));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->ang_acceleration));
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->ang_acceleration));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->ang_acceleration);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_acceleration));
    __pyx_v_self->ang_acceleration = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1180
 *             self.ang_velocity = comm.bcast(self.ang_velocity, self.ProtChSystem.chrono_processor)
 *             self.ang_acceleration = comm.bcast(self.ang_acceleration, self.ProtChSystem.chrono_processor)
 *             self.ang_vel_norm = comm.bcast(self.ang_vel_norm, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->ang_vel_norm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_5);
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->ang_vel_norm = __pyx_t_6;

    /* "mbd/ChRigidBody.pyx":1171
 *         # moment
 *         self.M = pych.ChVector_to_npArray(self.thisptr.M)
 *         if self.ProtChSystem.parallel_mode is True:             # <<<<<<<<<<<<<<
 *             comm = Comm.get().comm.tompi4py()
 *             self.position = comm.bcast(self.position, self.ProtChSystem.chrono_processor)
 */
  }

  /* "mbd/ChRigidBody.pyx":1147
 *                                          self.ProtChSystem.chrono_processor)
 * 
 *     def getValues(self):             # <<<<<<<<<<<<<<
 *         """Get values (pos, vel, acc, etc.) from C++ to python
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.getValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1183
 * 
 * 
 *     def setRecordValues(self, filename=None, all_values=False, pos=False,             # <<<<<<<<<<<<<<
 *                         rot=False, ang_disp=False, F=False, M=False,
 *                         inertia=False, vel=False, acc=False, ang_vel=False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_87setRecordValues(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_86setRecordValues[] = "\n        Sets the body attributes that are to be recorded in a csv file\n        during the simulation.\n\n        Parameters\n        ----------\n        filename: Optional[string]\n            Name of file, if not set, the file will be named as follows:\n            'record_[shape.name].csv'\n        all_values: bool\n            Set to True to record all values listed below.\n        time: bool\n            Time of recorded row (default: True).\n        pos: bool\n            Position of body (default: False. Set to True to record).\n        rot: bool\n            Rotation of body (default: False. Set to True to record).\n        ang_disp: array\n            Angular displecement calculated during rigid body calculation step.\n            Applied on the body in order to make it rotating.\n        F: bool\n            Forces applied on body (default: False. Set to True to record).\n        M: bool\n            Moments applied on body (default: False. Set to True to record).\n        inertia: bool\n            Inertia of body (default: False. Set to True to record).\n        vel: bool\n            Velocity of body (default: False. Set to True to record).\n        acc: bool\n            Acceleration of body (default: False. Set to True to record).\n        ang_vel: array\n            Angular velocity of body (default: False. Set to True to record).\n        ang_acc: bool\n            Angular acceleration of body (default: False. Set to True to record).\n        Notes\n        -----\n        To add another value manually, add to dictionary self.record_dict:\n        key: header of the column in .csv\n        value: list of length 2: [variable name, index within variable]\n                                                 (if no index, use None)\n        e.g. self.record_dict['m']['mass', None]\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_87setRecordValues(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_all_values = 0;
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_rot = 0;
  CYTHON_UNUSED PyObject *__pyx_v_ang_disp = 0;
  PyObject *__pyx_v_F = 0;
  PyObject *__pyx_v_M = 0;
  PyObject *__pyx_v_inertia = 0;
  PyObject *__pyx_v_vel = 0;
  PyObject *__pyx_v_acc = 0;
  PyObject *__pyx_v_ang_vel = 0;
  PyObject *__pyx_v_ang_acc = 0;
  PyObject *__pyx_v_h_predict = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRecordValues (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_all_values,&__pyx_n_s_pos,&__pyx_n_s_rot,&__pyx_n_s_ang_disp,&__pyx_n_s_F,&__pyx_n_s_M,&__pyx_n_s_inertia,&__pyx_n_s_vel,&__pyx_n_s_acc,&__pyx_n_s_ang_vel,&__pyx_n_s_ang_acc,&__pyx_n_s_h_predict_2,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)Py_False);

    /* "mbd/ChRigidBody.pyx":1184
 * 
 *     def setRecordValues(self, filename=None, all_values=False, pos=False,
 *                         rot=False, ang_disp=False, F=False, M=False,             # <<<<<<<<<<<<<<
 *                         inertia=False, vel=False, acc=False, ang_vel=False,
 *                         ang_acc=False, h_predict=False):
 */
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_False);

    /* "mbd/ChRigidBody.pyx":1185
 *     def setRecordValues(self, filename=None, all_values=False, pos=False,
 *                         rot=False, ang_disp=False, F=False, M=False,
 *                         inertia=False, vel=False, acc=False, ang_vel=False,             # <<<<<<<<<<<<<<
 *                         ang_acc=False, h_predict=False):
 *         """
 */
    values[7] = ((PyObject *)Py_False);
    values[8] = ((PyObject *)Py_False);
    values[9] = ((PyObject *)Py_False);
    values[10] = ((PyObject *)Py_False);

    /* "mbd/ChRigidBody.pyx":1186
 *                         rot=False, ang_disp=False, F=False, M=False,
 *                         inertia=False, vel=False, acc=False, ang_vel=False,
 *                         ang_acc=False, h_predict=False):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the body attributes that are to be recorded in a csv file
 */
    values[11] = ((PyObject *)Py_False);
    values[12] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_all_values);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rot);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ang_disp);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_F);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_M);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inertia);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vel);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_acc);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ang_vel);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ang_acc);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h_predict_2);
          if (value) { values[12] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setRecordValues") < 0)) __PYX_ERR(0, 1183, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_all_values = values[1];
    __pyx_v_pos = values[2];
    __pyx_v_rot = values[3];
    __pyx_v_ang_disp = values[4];
    __pyx_v_F = values[5];
    __pyx_v_M = values[6];
    __pyx_v_inertia = values[7];
    __pyx_v_vel = values[8];
    __pyx_v_acc = values[9];
    __pyx_v_ang_vel = values[10];
    __pyx_v_ang_acc = values[11];
    __pyx_v_h_predict = values[12];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setRecordValues", 0, 0, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1183, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setRecordValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_86setRecordValues(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_filename, __pyx_v_all_values, __pyx_v_pos, __pyx_v_rot, __pyx_v_ang_disp, __pyx_v_F, __pyx_v_M, __pyx_v_inertia, __pyx_v_vel, __pyx_v_acc, __pyx_v_ang_vel, __pyx_v_ang_acc, __pyx_v_h_predict);

  /* "mbd/ChRigidBody.pyx":1183
 * 
 * 
 *     def setRecordValues(self, filename=None, all_values=False, pos=False,             # <<<<<<<<<<<<<<
 *                         rot=False, ang_disp=False, F=False, M=False,
 *                         inertia=False, vel=False, acc=False, ang_vel=False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_86setRecordValues(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_filename, PyObject *__pyx_v_all_values, PyObject *__pyx_v_pos, PyObject *__pyx_v_rot, CYTHON_UNUSED PyObject *__pyx_v_ang_disp, PyObject *__pyx_v_F, PyObject *__pyx_v_M, PyObject *__pyx_v_inertia, PyObject *__pyx_v_vel, PyObject *__pyx_v_acc, PyObject *__pyx_v_ang_vel, PyObject *__pyx_v_ang_acc, PyObject *__pyx_v_h_predict) {
  CYTHON_UNUSED int __pyx_v_Fx;
  CYTHON_UNUSED int __pyx_v_Fy;
  CYTHON_UNUSED int __pyx_v_Fz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("setRecordValues", 0);
  __Pyx_INCREF(__pyx_v_pos);
  __Pyx_INCREF(__pyx_v_rot);
  __Pyx_INCREF(__pyx_v_F);
  __Pyx_INCREF(__pyx_v_M);
  __Pyx_INCREF(__pyx_v_vel);
  __Pyx_INCREF(__pyx_v_acc);
  __Pyx_INCREF(__pyx_v_ang_vel);
  __Pyx_INCREF(__pyx_v_ang_acc);
  __Pyx_INCREF(__pyx_v_h_predict);

  /* "mbd/ChRigidBody.pyx":1229
 *         e.g. self.record_dict['m']['mass', None]
 *         """
 *         if all_values is True:             # <<<<<<<<<<<<<<
 *             pos = rot = F = M = acc = vel = ang_acc = ang_vel = h_predict = True
 *         if pos is True:
 */
  __pyx_t_1 = (__pyx_v_all_values == Py_True);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1230
 *         """
 *         if all_values is True:
 *             pos = rot = F = M = acc = vel = ang_acc = ang_vel = h_predict = True             # <<<<<<<<<<<<<<
 *         if pos is True:
 *             self.record_dict['x'] = ['position', 0]
 */
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_pos, Py_True);
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_rot, Py_True);
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_F, Py_True);
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_M, Py_True);
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_acc, Py_True);
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_vel, Py_True);
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_ang_acc, Py_True);
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_ang_vel, Py_True);
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_h_predict, Py_True);

    /* "mbd/ChRigidBody.pyx":1229
 *         e.g. self.record_dict['m']['mass', None]
 *         """
 *         if all_values is True:             # <<<<<<<<<<<<<<
 *             pos = rot = F = M = acc = vel = ang_acc = ang_vel = h_predict = True
 *         if pos is True:
 */
  }

  /* "mbd/ChRigidBody.pyx":1231
 *         if all_values is True:
 *             pos = rot = F = M = acc = vel = ang_acc = ang_vel = h_predict = True
 *         if pos is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['x'] = ['position', 0]
 *             self.record_dict['y'] = ['position', 1]
 */
  __pyx_t_2 = (__pyx_v_pos == Py_True);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":1232
 *             pos = rot = F = M = acc = vel = ang_acc = ang_vel = h_predict = True
 *         if pos is True:
 *             self.record_dict['x'] = ['position', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['y'] = ['position', 1]
 *             self.record_dict['z'] = ['position', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_position);
    __Pyx_GIVEREF(__pyx_n_s_position);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_position);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_x, __pyx_t_3) < 0)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1233
 *         if pos is True:
 *             self.record_dict['x'] = ['position', 0]
 *             self.record_dict['y'] = ['position', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['z'] = ['position', 2]
 *         if rot is True:
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_position);
    __Pyx_GIVEREF(__pyx_n_s_position);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_position);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_y, __pyx_t_3) < 0)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1234
 *             self.record_dict['x'] = ['position', 0]
 *             self.record_dict['y'] = ['position', 1]
 *             self.record_dict['z'] = ['position', 2]             # <<<<<<<<<<<<<<
 *         if rot is True:
 *             self.record_dict['rotq_e0'] = ['rotq', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_position);
    __Pyx_GIVEREF(__pyx_n_s_position);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_position);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_z, __pyx_t_3) < 0)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1231
 *         if all_values is True:
 *             pos = rot = F = M = acc = vel = ang_acc = ang_vel = h_predict = True
 *         if pos is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['x'] = ['position', 0]
 *             self.record_dict['y'] = ['position', 1]
 */
  }

  /* "mbd/ChRigidBody.pyx":1235
 *             self.record_dict['y'] = ['position', 1]
 *             self.record_dict['z'] = ['position', 2]
 *         if rot is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['rotq_e0'] = ['rotq', 0]
 *             self.record_dict['rotq_e1'] = ['rotq', 1]
 */
  __pyx_t_1 = (__pyx_v_rot == Py_True);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1236
 *             self.record_dict['z'] = ['position', 2]
 *         if rot is True:
 *             self.record_dict['rotq_e0'] = ['rotq', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['rotq_e1'] = ['rotq', 1]
 *             self.record_dict['rotq_e2'] = ['rotq', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_rotq);
    __Pyx_GIVEREF(__pyx_n_s_rotq);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_rotq);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_rotq_e0, __pyx_t_3) < 0)) __PYX_ERR(0, 1236, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1237
 *         if rot is True:
 *             self.record_dict['rotq_e0'] = ['rotq', 0]
 *             self.record_dict['rotq_e1'] = ['rotq', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['rotq_e2'] = ['rotq', 2]
 *             self.record_dict['rotq_e3'] = ['rotq', 3]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_rotq);
    __Pyx_GIVEREF(__pyx_n_s_rotq);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_rotq);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_rotq_e1, __pyx_t_3) < 0)) __PYX_ERR(0, 1237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1238
 *             self.record_dict['rotq_e0'] = ['rotq', 0]
 *             self.record_dict['rotq_e1'] = ['rotq', 1]
 *             self.record_dict['rotq_e2'] = ['rotq', 2]             # <<<<<<<<<<<<<<
 *             self.record_dict['rotq_e3'] = ['rotq', 3]
 *         if F is True:
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_rotq);
    __Pyx_GIVEREF(__pyx_n_s_rotq);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_rotq);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_rotq_e2, __pyx_t_3) < 0)) __PYX_ERR(0, 1238, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1239
 *             self.record_dict['rotq_e1'] = ['rotq', 1]
 *             self.record_dict['rotq_e2'] = ['rotq', 2]
 *             self.record_dict['rotq_e3'] = ['rotq', 3]             # <<<<<<<<<<<<<<
 *         if F is True:
 *             self.record_dict['Fx'] = ['F', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_rotq);
    __Pyx_GIVEREF(__pyx_n_s_rotq);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_rotq);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_rotq_e3, __pyx_t_3) < 0)) __PYX_ERR(0, 1239, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1235
 *             self.record_dict['y'] = ['position', 1]
 *             self.record_dict['z'] = ['position', 2]
 *         if rot is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['rotq_e0'] = ['rotq', 0]
 *             self.record_dict['rotq_e1'] = ['rotq', 1]
 */
  }

  /* "mbd/ChRigidBody.pyx":1240
 *             self.record_dict['rotq_e2'] = ['rotq', 2]
 *             self.record_dict['rotq_e3'] = ['rotq', 3]
 *         if F is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['Fx'] = ['F', 0]
 *             self.record_dict['Fy'] = ['F', 1]
 */
  __pyx_t_2 = (__pyx_v_F == Py_True);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":1241
 *             self.record_dict['rotq_e3'] = ['rotq', 3]
 *         if F is True:
 *             self.record_dict['Fx'] = ['F', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fy'] = ['F', 1]
 *             self.record_dict['Fz'] = ['F', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F);
    __Pyx_GIVEREF(__pyx_n_s_F);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fx, __pyx_t_3) < 0)) __PYX_ERR(0, 1241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1242
 *         if F is True:
 *             self.record_dict['Fx'] = ['F', 0]
 *             self.record_dict['Fy'] = ['F', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fz'] = ['F', 2]
 *             self.record_dict['Fx_prot'] = ['F_prot', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F);
    __Pyx_GIVEREF(__pyx_n_s_F);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fy, __pyx_t_3) < 0)) __PYX_ERR(0, 1242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1243
 *             self.record_dict['Fx'] = ['F', 0]
 *             self.record_dict['Fy'] = ['F', 1]
 *             self.record_dict['Fz'] = ['F', 2]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fx_prot'] = ['F_prot', 0]
 *             self.record_dict['Fy_prot'] = ['F_prot', 1]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F);
    __Pyx_GIVEREF(__pyx_n_s_F);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fz, __pyx_t_3) < 0)) __PYX_ERR(0, 1243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1244
 *             self.record_dict['Fy'] = ['F', 1]
 *             self.record_dict['Fz'] = ['F', 2]
 *             self.record_dict['Fx_prot'] = ['F_prot', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fy_prot'] = ['F_prot', 1]
 *             self.record_dict['Fz_prot'] = ['F_prot', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F_prot);
    __Pyx_GIVEREF(__pyx_n_s_F_prot);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F_prot);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fx_prot, __pyx_t_3) < 0)) __PYX_ERR(0, 1244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1245
 *             self.record_dict['Fz'] = ['F', 2]
 *             self.record_dict['Fx_prot'] = ['F_prot', 0]
 *             self.record_dict['Fy_prot'] = ['F_prot', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fz_prot'] = ['F_prot', 2]
 *             self.record_dict['Fx_applied'] = ['F_applied', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F_prot);
    __Pyx_GIVEREF(__pyx_n_s_F_prot);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F_prot);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fy_prot, __pyx_t_3) < 0)) __PYX_ERR(0, 1245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1246
 *             self.record_dict['Fx_prot'] = ['F_prot', 0]
 *             self.record_dict['Fy_prot'] = ['F_prot', 1]
 *             self.record_dict['Fz_prot'] = ['F_prot', 2]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fx_applied'] = ['F_applied', 0]
 *             self.record_dict['Fy_applied'] = ['F_applied', 1]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F_prot);
    __Pyx_GIVEREF(__pyx_n_s_F_prot);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F_prot);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fz_prot, __pyx_t_3) < 0)) __PYX_ERR(0, 1246, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1247
 *             self.record_dict['Fy_prot'] = ['F_prot', 1]
 *             self.record_dict['Fz_prot'] = ['F_prot', 2]
 *             self.record_dict['Fx_applied'] = ['F_applied', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fy_applied'] = ['F_applied', 1]
 *             self.record_dict['Fz_applied'] = ['F_applied', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F_applied_2);
    __Pyx_GIVEREF(__pyx_n_s_F_applied_2);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F_applied_2);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fx_applied, __pyx_t_3) < 0)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1248
 *             self.record_dict['Fz_prot'] = ['F_prot', 2]
 *             self.record_dict['Fx_applied'] = ['F_applied', 0]
 *             self.record_dict['Fy_applied'] = ['F_applied', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fz_applied'] = ['F_applied', 2]
 *             self.record_dict['Fx_Aij'] = ['F_Aij', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F_applied_2);
    __Pyx_GIVEREF(__pyx_n_s_F_applied_2);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F_applied_2);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fy_applied, __pyx_t_3) < 0)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1249
 *             self.record_dict['Fx_applied'] = ['F_applied', 0]
 *             self.record_dict['Fy_applied'] = ['F_applied', 1]
 *             self.record_dict['Fz_applied'] = ['F_applied', 2]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fx_Aij'] = ['F_Aij', 0]
 *             self.record_dict['Fy_Aij'] = ['F_Aij', 1]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F_applied_2);
    __Pyx_GIVEREF(__pyx_n_s_F_applied_2);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F_applied_2);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fz_applied, __pyx_t_3) < 0)) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1250
 *             self.record_dict['Fy_applied'] = ['F_applied', 1]
 *             self.record_dict['Fz_applied'] = ['F_applied', 2]
 *             self.record_dict['Fx_Aij'] = ['F_Aij', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fy_Aij'] = ['F_Aij', 1]
 *             self.record_dict['Fz_Aij'] = ['F_Aij', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F_Aij);
    __Pyx_GIVEREF(__pyx_n_s_F_Aij);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F_Aij);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fx_Aij, __pyx_t_3) < 0)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1251
 *             self.record_dict['Fz_applied'] = ['F_applied', 2]
 *             self.record_dict['Fx_Aij'] = ['F_Aij', 0]
 *             self.record_dict['Fy_Aij'] = ['F_Aij', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['Fz_Aij'] = ['F_Aij', 2]
 *             Fx = Fy = Fz = True
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F_Aij);
    __Pyx_GIVEREF(__pyx_n_s_F_Aij);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F_Aij);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fy_Aij, __pyx_t_3) < 0)) __PYX_ERR(0, 1251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1252
 *             self.record_dict['Fx_Aij'] = ['F_Aij', 0]
 *             self.record_dict['Fy_Aij'] = ['F_Aij', 1]
 *             self.record_dict['Fz_Aij'] = ['F_Aij', 2]             # <<<<<<<<<<<<<<
 *             Fx = Fy = Fz = True
 *         if M is True:
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_F_Aij);
    __Pyx_GIVEREF(__pyx_n_s_F_Aij);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_F_Aij);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Fz_Aij, __pyx_t_3) < 0)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1253
 *             self.record_dict['Fy_Aij'] = ['F_Aij', 1]
 *             self.record_dict['Fz_Aij'] = ['F_Aij', 2]
 *             Fx = Fy = Fz = True             # <<<<<<<<<<<<<<
 *         if M is True:
 *             self.record_dict['Mx'] = ['M', 0]
 */
    __pyx_v_Fx = 1;
    __pyx_v_Fy = 1;
    __pyx_v_Fz = 1;

    /* "mbd/ChRigidBody.pyx":1240
 *             self.record_dict['rotq_e2'] = ['rotq', 2]
 *             self.record_dict['rotq_e3'] = ['rotq', 3]
 *         if F is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['Fx'] = ['F', 0]
 *             self.record_dict['Fy'] = ['F', 1]
 */
  }

  /* "mbd/ChRigidBody.pyx":1254
 *             self.record_dict['Fz_Aij'] = ['F_Aij', 2]
 *             Fx = Fy = Fz = True
 *         if M is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['Mx'] = ['M', 0]
 *             self.record_dict['My'] = ['M', 1]
 */
  __pyx_t_1 = (__pyx_v_M == Py_True);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1255
 *             Fx = Fy = Fz = True
 *         if M is True:
 *             self.record_dict['Mx'] = ['M', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['My'] = ['M', 1]
 *             self.record_dict['Mz'] = ['M', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_M);
    __Pyx_GIVEREF(__pyx_n_s_M);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_M);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Mx, __pyx_t_3) < 0)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1256
 *         if M is True:
 *             self.record_dict['Mx'] = ['M', 0]
 *             self.record_dict['My'] = ['M', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['Mz'] = ['M', 2]
 *             self.record_dict['Mx_prot'] = ['M_prot', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_M);
    __Pyx_GIVEREF(__pyx_n_s_M);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_M);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_My, __pyx_t_3) < 0)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1257
 *             self.record_dict['Mx'] = ['M', 0]
 *             self.record_dict['My'] = ['M', 1]
 *             self.record_dict['Mz'] = ['M', 2]             # <<<<<<<<<<<<<<
 *             self.record_dict['Mx_prot'] = ['M_prot', 0]
 *             self.record_dict['My_prot'] = ['M_prot', 1]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_M);
    __Pyx_GIVEREF(__pyx_n_s_M);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_M);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Mz, __pyx_t_3) < 0)) __PYX_ERR(0, 1257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1258
 *             self.record_dict['My'] = ['M', 1]
 *             self.record_dict['Mz'] = ['M', 2]
 *             self.record_dict['Mx_prot'] = ['M_prot', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['My_prot'] = ['M_prot', 1]
 *             self.record_dict['Mz_prot'] = ['M_prot', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_M_prot);
    __Pyx_GIVEREF(__pyx_n_s_M_prot);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_M_prot);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Mx_prot, __pyx_t_3) < 0)) __PYX_ERR(0, 1258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1259
 *             self.record_dict['Mz'] = ['M', 2]
 *             self.record_dict['Mx_prot'] = ['M_prot', 0]
 *             self.record_dict['My_prot'] = ['M_prot', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['Mz_prot'] = ['M_prot', 2]
 *             self.record_dict['Mx_applied'] = ['M_applied', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_M_prot);
    __Pyx_GIVEREF(__pyx_n_s_M_prot);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_M_prot);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_My_prot, __pyx_t_3) < 0)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1260
 *             self.record_dict['Mx_prot'] = ['M_prot', 0]
 *             self.record_dict['My_prot'] = ['M_prot', 1]
 *             self.record_dict['Mz_prot'] = ['M_prot', 2]             # <<<<<<<<<<<<<<
 *             self.record_dict['Mx_applied'] = ['M_applied', 0]
 *             self.record_dict['My_applied'] = ['M_applied', 1]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_M_prot);
    __Pyx_GIVEREF(__pyx_n_s_M_prot);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_M_prot);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Mz_prot, __pyx_t_3) < 0)) __PYX_ERR(0, 1260, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1261
 *             self.record_dict['My_prot'] = ['M_prot', 1]
 *             self.record_dict['Mz_prot'] = ['M_prot', 2]
 *             self.record_dict['Mx_applied'] = ['M_applied', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['My_applied'] = ['M_applied', 1]
 *             self.record_dict['Mz_applied'] = ['M_applied', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_M_applied);
    __Pyx_GIVEREF(__pyx_n_s_M_applied);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_M_applied);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Mx_applied, __pyx_t_3) < 0)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1262
 *             self.record_dict['Mz_prot'] = ['M_prot', 2]
 *             self.record_dict['Mx_applied'] = ['M_applied', 0]
 *             self.record_dict['My_applied'] = ['M_applied', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['Mz_applied'] = ['M_applied', 2]
 *         if acc is True:
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_M_applied);
    __Pyx_GIVEREF(__pyx_n_s_M_applied);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_M_applied);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_My_applied, __pyx_t_3) < 0)) __PYX_ERR(0, 1262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1263
 *             self.record_dict['Mx_applied'] = ['M_applied', 0]
 *             self.record_dict['My_applied'] = ['M_applied', 1]
 *             self.record_dict['Mz_applied'] = ['M_applied', 2]             # <<<<<<<<<<<<<<
 *         if acc is True:
 *             self.record_dict['ax'] = ['acceleration', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_M_applied);
    __Pyx_GIVEREF(__pyx_n_s_M_applied);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_M_applied);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_Mz_applied, __pyx_t_3) < 0)) __PYX_ERR(0, 1263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1254
 *             self.record_dict['Fz_Aij'] = ['F_Aij', 2]
 *             Fx = Fy = Fz = True
 *         if M is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['Mx'] = ['M', 0]
 *             self.record_dict['My'] = ['M', 1]
 */
  }

  /* "mbd/ChRigidBody.pyx":1264
 *             self.record_dict['My_applied'] = ['M_applied', 1]
 *             self.record_dict['Mz_applied'] = ['M_applied', 2]
 *         if acc is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['ax'] = ['acceleration', 0]
 *             self.record_dict['ay'] = ['acceleration', 1]
 */
  __pyx_t_2 = (__pyx_v_acc == Py_True);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":1265
 *             self.record_dict['Mz_applied'] = ['M_applied', 2]
 *         if acc is True:
 *             self.record_dict['ax'] = ['acceleration', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['ay'] = ['acceleration', 1]
 *             self.record_dict['az'] = ['acceleration', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_acceleration);
    __Pyx_GIVEREF(__pyx_n_s_acceleration);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_acceleration);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_ax, __pyx_t_3) < 0)) __PYX_ERR(0, 1265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1266
 *         if acc is True:
 *             self.record_dict['ax'] = ['acceleration', 0]
 *             self.record_dict['ay'] = ['acceleration', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['az'] = ['acceleration', 2]
 *         if vel is True:
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_acceleration);
    __Pyx_GIVEREF(__pyx_n_s_acceleration);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_acceleration);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_ay, __pyx_t_3) < 0)) __PYX_ERR(0, 1266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1267
 *             self.record_dict['ax'] = ['acceleration', 0]
 *             self.record_dict['ay'] = ['acceleration', 1]
 *             self.record_dict['az'] = ['acceleration', 2]             # <<<<<<<<<<<<<<
 *         if vel is True:
 *             self.record_dict['ux'] = ['velocity', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_acceleration);
    __Pyx_GIVEREF(__pyx_n_s_acceleration);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_acceleration);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_az, __pyx_t_3) < 0)) __PYX_ERR(0, 1267, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1264
 *             self.record_dict['My_applied'] = ['M_applied', 1]
 *             self.record_dict['Mz_applied'] = ['M_applied', 2]
 *         if acc is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['ax'] = ['acceleration', 0]
 *             self.record_dict['ay'] = ['acceleration', 1]
 */
  }

  /* "mbd/ChRigidBody.pyx":1268
 *             self.record_dict['ay'] = ['acceleration', 1]
 *             self.record_dict['az'] = ['acceleration', 2]
 *         if vel is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['ux'] = ['velocity', 0]
 *             self.record_dict['uy'] = ['velocity', 1]
 */
  __pyx_t_1 = (__pyx_v_vel == Py_True);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1269
 *             self.record_dict['az'] = ['acceleration', 2]
 *         if vel is True:
 *             self.record_dict['ux'] = ['velocity', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['uy'] = ['velocity', 1]
 *             self.record_dict['uz'] = ['velocity', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_velocity);
    __Pyx_GIVEREF(__pyx_n_s_velocity);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_velocity);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_ux, __pyx_t_3) < 0)) __PYX_ERR(0, 1269, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1270
 *         if vel is True:
 *             self.record_dict['ux'] = ['velocity', 0]
 *             self.record_dict['uy'] = ['velocity', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['uz'] = ['velocity', 2]
 *         if ang_acc is True:
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_velocity);
    __Pyx_GIVEREF(__pyx_n_s_velocity);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_velocity);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_uy, __pyx_t_3) < 0)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1271
 *             self.record_dict['ux'] = ['velocity', 0]
 *             self.record_dict['uy'] = ['velocity', 1]
 *             self.record_dict['uz'] = ['velocity', 2]             # <<<<<<<<<<<<<<
 *         if ang_acc is True:
 *             self.record_dict['ang_ax'] = ['ang_acceleration', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_velocity);
    __Pyx_GIVEREF(__pyx_n_s_velocity);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_velocity);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_uz, __pyx_t_3) < 0)) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1268
 *             self.record_dict['ay'] = ['acceleration', 1]
 *             self.record_dict['az'] = ['acceleration', 2]
 *         if vel is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['ux'] = ['velocity', 0]
 *             self.record_dict['uy'] = ['velocity', 1]
 */
  }

  /* "mbd/ChRigidBody.pyx":1272
 *             self.record_dict['uy'] = ['velocity', 1]
 *             self.record_dict['uz'] = ['velocity', 2]
 *         if ang_acc is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['ang_ax'] = ['ang_acceleration', 0]
 *             self.record_dict['ang_ay'] = ['ang_acceleration', 1]
 */
  __pyx_t_2 = (__pyx_v_ang_acc == Py_True);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":1273
 *             self.record_dict['uz'] = ['velocity', 2]
 *         if ang_acc is True:
 *             self.record_dict['ang_ax'] = ['ang_acceleration', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['ang_ay'] = ['ang_acceleration', 1]
 *             self.record_dict['ang_az'] = ['ang_acceleration', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_ang_acceleration);
    __Pyx_GIVEREF(__pyx_n_s_ang_acceleration);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ang_acceleration);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_ang_ax, __pyx_t_3) < 0)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1274
 *         if ang_acc is True:
 *             self.record_dict['ang_ax'] = ['ang_acceleration', 0]
 *             self.record_dict['ang_ay'] = ['ang_acceleration', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['ang_az'] = ['ang_acceleration', 2]
 *         if ang_vel is True:
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_ang_acceleration);
    __Pyx_GIVEREF(__pyx_n_s_ang_acceleration);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ang_acceleration);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_ang_ay, __pyx_t_3) < 0)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1275
 *             self.record_dict['ang_ax'] = ['ang_acceleration', 0]
 *             self.record_dict['ang_ay'] = ['ang_acceleration', 1]
 *             self.record_dict['ang_az'] = ['ang_acceleration', 2]             # <<<<<<<<<<<<<<
 *         if ang_vel is True:
 *             self.record_dict['ang_ux'] = ['ang_velocity', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_ang_acceleration);
    __Pyx_GIVEREF(__pyx_n_s_ang_acceleration);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ang_acceleration);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_ang_az, __pyx_t_3) < 0)) __PYX_ERR(0, 1275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1272
 *             self.record_dict['uy'] = ['velocity', 1]
 *             self.record_dict['uz'] = ['velocity', 2]
 *         if ang_acc is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['ang_ax'] = ['ang_acceleration', 0]
 *             self.record_dict['ang_ay'] = ['ang_acceleration', 1]
 */
  }

  /* "mbd/ChRigidBody.pyx":1276
 *             self.record_dict['ang_ay'] = ['ang_acceleration', 1]
 *             self.record_dict['ang_az'] = ['ang_acceleration', 2]
 *         if ang_vel is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['ang_ux'] = ['ang_velocity', 0]
 *             self.record_dict['ang_uy'] = ['ang_velocity', 1]
 */
  __pyx_t_1 = (__pyx_v_ang_vel == Py_True);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1277
 *             self.record_dict['ang_az'] = ['ang_acceleration', 2]
 *         if ang_vel is True:
 *             self.record_dict['ang_ux'] = ['ang_velocity', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['ang_uy'] = ['ang_velocity', 1]
 *             self.record_dict['ang_uz'] = ['ang_velocity', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_ang_velocity);
    __Pyx_GIVEREF(__pyx_n_s_ang_velocity);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ang_velocity);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_ang_ux, __pyx_t_3) < 0)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1278
 *         if ang_vel is True:
 *             self.record_dict['ang_ux'] = ['ang_velocity', 0]
 *             self.record_dict['ang_uy'] = ['ang_velocity', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['ang_uz'] = ['ang_velocity', 2]
 *         if inertia is True:
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_ang_velocity);
    __Pyx_GIVEREF(__pyx_n_s_ang_velocity);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ang_velocity);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_ang_uy, __pyx_t_3) < 0)) __PYX_ERR(0, 1278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1279
 *             self.record_dict['ang_ux'] = ['ang_velocity', 0]
 *             self.record_dict['ang_uy'] = ['ang_velocity', 1]
 *             self.record_dict['ang_uz'] = ['ang_velocity', 2]             # <<<<<<<<<<<<<<
 *         if inertia is True:
 *             self.record_dict['intertia'] = ['inertia', None]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_ang_velocity);
    __Pyx_GIVEREF(__pyx_n_s_ang_velocity);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ang_velocity);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_ang_uz, __pyx_t_3) < 0)) __PYX_ERR(0, 1279, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1276
 *             self.record_dict['ang_ay'] = ['ang_acceleration', 1]
 *             self.record_dict['ang_az'] = ['ang_acceleration', 2]
 *         if ang_vel is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['ang_ux'] = ['ang_velocity', 0]
 *             self.record_dict['ang_uy'] = ['ang_velocity', 1]
 */
  }

  /* "mbd/ChRigidBody.pyx":1280
 *             self.record_dict['ang_uy'] = ['ang_velocity', 1]
 *             self.record_dict['ang_uz'] = ['ang_velocity', 2]
 *         if inertia is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['intertia'] = ['inertia', None]
 *         if h_predict is True:
 */
  __pyx_t_2 = (__pyx_v_inertia == Py_True);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":1281
 *             self.record_dict['ang_uz'] = ['ang_velocity', 2]
 *         if inertia is True:
 *             self.record_dict['intertia'] = ['inertia', None]             # <<<<<<<<<<<<<<
 *         if h_predict is True:
 *             self.record_dict['hx'] = ['h_predict', 0]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_inertia);
    __Pyx_GIVEREF(__pyx_n_s_inertia);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_inertia);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyList_SET_ITEM(__pyx_t_3, 1, Py_None);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_intertia, __pyx_t_3) < 0)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1280
 *             self.record_dict['ang_uy'] = ['ang_velocity', 1]
 *             self.record_dict['ang_uz'] = ['ang_velocity', 2]
 *         if inertia is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['intertia'] = ['inertia', None]
 *         if h_predict is True:
 */
  }

  /* "mbd/ChRigidBody.pyx":1282
 *         if inertia is True:
 *             self.record_dict['intertia'] = ['inertia', None]
 *         if h_predict is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['hx'] = ['h_predict', 0]
 *             self.record_dict['hy'] = ['h_predict', 1]
 */
  __pyx_t_1 = (__pyx_v_h_predict == Py_True);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1283
 *             self.record_dict['intertia'] = ['inertia', None]
 *         if h_predict is True:
 *             self.record_dict['hx'] = ['h_predict', 0]             # <<<<<<<<<<<<<<
 *             self.record_dict['hy'] = ['h_predict', 1]
 *             self.record_dict['hz'] = ['h_predict', 2]
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_h_predict_2);
    __Pyx_GIVEREF(__pyx_n_s_h_predict_2);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_h_predict_2);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_hx, __pyx_t_3) < 0)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1284
 *         if h_predict is True:
 *             self.record_dict['hx'] = ['h_predict', 0]
 *             self.record_dict['hy'] = ['h_predict', 1]             # <<<<<<<<<<<<<<
 *             self.record_dict['hz'] = ['h_predict', 2]
 * 
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_h_predict_2);
    __Pyx_GIVEREF(__pyx_n_s_h_predict_2);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_h_predict_2);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_hy, __pyx_t_3) < 0)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1285
 *             self.record_dict['hx'] = ['h_predict', 0]
 *             self.record_dict['hy'] = ['h_predict', 1]
 *             self.record_dict['hz'] = ['h_predict', 2]             # <<<<<<<<<<<<<<
 * 
 *     def _recordValues(self):
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_h_predict_2);
    __Pyx_GIVEREF(__pyx_n_s_h_predict_2);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_h_predict_2);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->record_dict, __pyx_n_s_hz, __pyx_t_3) < 0)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1282
 *         if inertia is True:
 *             self.record_dict['intertia'] = ['inertia', None]
 *         if h_predict is True:             # <<<<<<<<<<<<<<
 *             self.record_dict['hx'] = ['h_predict', 0]
 *             self.record_dict['hy'] = ['h_predict', 1]
 */
  }

  /* "mbd/ChRigidBody.pyx":1183
 * 
 * 
 *     def setRecordValues(self, filename=None, all_values=False, pos=False,             # <<<<<<<<<<<<<<
 *                         rot=False, ang_disp=False, F=False, M=False,
 *                         inertia=False, vel=False, acc=False, ang_vel=False,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setRecordValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF(__pyx_v_rot);
  __Pyx_XDECREF(__pyx_v_F);
  __Pyx_XDECREF(__pyx_v_M);
  __Pyx_XDECREF(__pyx_v_vel);
  __Pyx_XDECREF(__pyx_v_acc);
  __Pyx_XDECREF(__pyx_v_ang_vel);
  __Pyx_XDECREF(__pyx_v_ang_acc);
  __Pyx_XDECREF(__pyx_v_h_predict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1287
 *             self.record_dict['hz'] = ['h_predict', 2]
 * 
 *     def _recordValues(self):             # <<<<<<<<<<<<<<
 *         """Records values of body attributes in a csv file.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_89_recordValues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_88_recordValues[] = "Records values of body attributes in a csv file.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_89_recordValues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_recordValues (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_88_recordValues(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_88_recordValues(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_v_record_file = NULL;
  double __pyx_v_t_chrono;
  PyObject *__pyx_v_t_last = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_dt_last = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_t_sim = NULL;
  PyObject *__pyx_v_values_towrite = NULL;
  PyObject *__pyx_v_headers = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_csvfile = NULL;
  PyObject *__pyx_v_writer = NULL;
  PyObject *__pyx_v_val = NULL;
  long __pyx_v_i;
  long __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  int __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  __Pyx_RefNannySetupContext("_recordValues", 0);

  /* "mbd/ChRigidBody.pyx":1290
 *         """Records values of body attributes in a csv file.
 *         """
 *         if self.Shape is not None:             # <<<<<<<<<<<<<<
 *             record_file = os.path.join(Profiling.logDir, 'record_' + self.Shape.name)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->Shape != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1291
 *         """
 *         if self.Shape is not None:
 *             record_file = os.path.join(Profiling.logDir, 'record_' + self.Shape.name)             # <<<<<<<<<<<<<<
 *         else:
 *             record_file = os.path.join(Profiling.logDir, 'record_body')
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_logDir); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->Shape, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyNumber_Add(__pyx_n_s_record, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1291, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1291, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_7);
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_record_file = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1290
 *         """Records values of body attributes in a csv file.
 *         """
 *         if self.Shape is not None:             # <<<<<<<<<<<<<<
 *             record_file = os.path.join(Profiling.logDir, 'record_' + self.Shape.name)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":1293
 *             record_file = os.path.join(Profiling.logDir, 'record_' + self.Shape.name)
 *         else:
 *             record_file = os.path.join(Profiling.logDir, 'record_body')             # <<<<<<<<<<<<<<
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()
 *         if self.ProtChSystem.model is not None:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_logDir); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_n_s_record_body};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1293, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_n_s_record_body};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1293, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1293, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_8, __pyx_t_7);
      __Pyx_INCREF(__pyx_n_s_record_body);
      __Pyx_GIVEREF(__pyx_n_s_record_body);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_8, __pyx_n_s_record_body);
      __pyx_t_7 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1293, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_record_file = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":1294
 *         else:
 *             record_file = os.path.join(Profiling.logDir, 'record_body')
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()             # <<<<<<<<<<<<<<
 *         if self.ProtChSystem.model is not None:
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 */
  __pyx_v_t_chrono = __pyx_v_self->ProtChSystem->thisptr->system.GetChTime();

  /* "mbd/ChRigidBody.pyx":1295
 *             record_file = os.path.join(Profiling.logDir, 'record_body')
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()
 *         if self.ProtChSystem.model is not None:             # <<<<<<<<<<<<<<
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:
 */
  __pyx_t_2 = (__pyx_v_self->ProtChSystem->model != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":1296
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()
 *         if self.ProtChSystem.model is not None:
 *             t_last = self.ProtChSystem.model.stepController.t_model_last             # <<<<<<<<<<<<<<
 *             try:
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->ProtChSystem->model, __pyx_n_s_stepController); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_t_model_last); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_t_last = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":1297
 *         if self.ProtChSystem.model is not None:
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:             # <<<<<<<<<<<<<<
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 *             except:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      /*try:*/ {

        /* "mbd/ChRigidBody.pyx":1298
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last             # <<<<<<<<<<<<<<
 *             except:
 *                 dt_last = 0
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->ProtChSystem->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1298, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dt_last); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1298, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_dt_last = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "mbd/ChRigidBody.pyx":1297
 *         if self.ProtChSystem.model is not None:
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:             # <<<<<<<<<<<<<<
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":1299
 *             try:
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 *             except:             # <<<<<<<<<<<<<<
 *                 dt_last = 0
 *             t = t_last
 */
      /*except:*/ {
        __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody._recordValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_6) < 0) __PYX_ERR(0, 1299, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_6);

        /* "mbd/ChRigidBody.pyx":1300
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 *             except:
 *                 dt_last = 0             # <<<<<<<<<<<<<<
 *             t = t_last
 *         else:
 */
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_XDECREF_SET(__pyx_v_dt_last, __pyx_int_0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L6_exception_handled;
      }
      __pyx_L7_except_error:;

      /* "mbd/ChRigidBody.pyx":1297
 *         if self.ProtChSystem.model is not None:
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:             # <<<<<<<<<<<<<<
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 *             except:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_L12_try_end:;
    }

    /* "mbd/ChRigidBody.pyx":1301
 *             except:
 *                 dt_last = 0
 *             t = t_last             # <<<<<<<<<<<<<<
 *         else:
 *             t = t_chrono
 */
    __Pyx_INCREF(__pyx_v_t_last);
    __pyx_v_t = __pyx_v_t_last;

    /* "mbd/ChRigidBody.pyx":1295
 *             record_file = os.path.join(Profiling.logDir, 'record_body')
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()
 *         if self.ProtChSystem.model is not None:             # <<<<<<<<<<<<<<
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:
 */
    goto __pyx_L4;
  }

  /* "mbd/ChRigidBody.pyx":1303
 *             t = t_last
 *         else:
 *             t = t_chrono             # <<<<<<<<<<<<<<
 *         t_sim = Profiling.time()-Profiling.startTime
 *         values_towrite = [t, t_chrono, t_sim]
 */
  /*else*/ {
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_t_chrono); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_t = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  __pyx_L4:;

  /* "mbd/ChRigidBody.pyx":1304
 *         else:
 *             t = t_chrono
 *         t_sim = Profiling.time()-Profiling.startTime             # <<<<<<<<<<<<<<
 *         values_towrite = [t, t_chrono, t_sim]
 *         if t == 0:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1304, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_startTime); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_t_sim = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1305
 *             t = t_chrono
 *         t_sim = Profiling.time()-Profiling.startTime
 *         values_towrite = [t, t_chrono, t_sim]             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             headers = ['t', 't_ch', 't_sim']
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_t_chrono); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_t);
  __Pyx_GIVEREF(__pyx_v_t);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_t);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_v_t_sim);
  __Pyx_GIVEREF(__pyx_v_t_sim);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_v_t_sim);
  __pyx_t_4 = 0;
  __pyx_v_values_towrite = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":1306
 *         t_sim = Profiling.time()-Profiling.startTime
 *         values_towrite = [t, t_chrono, t_sim]
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             headers = ['t', 't_ch', 't_sim']
 *             for key in self.record_dict:
 */
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":1307
 *         values_towrite = [t, t_chrono, t_sim]
 *         if t == 0:
 *             headers = ['t', 't_ch', 't_sim']             # <<<<<<<<<<<<<<
 *             for key in self.record_dict:
 *                 headers += [key]
 */
    __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_t);
    __Pyx_GIVEREF(__pyx_n_s_t);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_t);
    __Pyx_INCREF(__pyx_n_s_t_ch);
    __Pyx_GIVEREF(__pyx_n_s_t_ch);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_t_ch);
    __Pyx_INCREF(__pyx_n_s_t_sim);
    __Pyx_GIVEREF(__pyx_n_s_t_sim);
    PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_t_sim);
    __pyx_v_headers = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1308
 *         if t == 0:
 *             headers = ['t', 't_ch', 't_sim']
 *             for key in self.record_dict:             # <<<<<<<<<<<<<<
 *                 headers += [key]
 *             with open(record_file+'.csv', 'w') as csvfile:
 */
    if (likely(PyList_CheckExact(__pyx_v_self->record_dict)) || PyTuple_CheckExact(__pyx_v_self->record_dict)) {
      __pyx_t_3 = __pyx_v_self->record_dict; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_self->record_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1308, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1308, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_4); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1308, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1308, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_4); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1308, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1308, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_14(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1308, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":1309
 *             headers = ['t', 't_ch', 't_sim']
 *             for key in self.record_dict:
 *                 headers += [key]             # <<<<<<<<<<<<<<
 *             with open(record_file+'.csv', 'w') as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')
 */
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_key);
      __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_headers, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_headers, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "mbd/ChRigidBody.pyx":1308
 *         if t == 0:
 *             headers = ['t', 't_ch', 't_sim']
 *             for key in self.record_dict:             # <<<<<<<<<<<<<<
 *                 headers += [key]
 *             with open(record_file+'.csv', 'w') as csvfile:
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1310
 *             for key in self.record_dict:
 *                 headers += [key]
 *             with open(record_file+'.csv', 'w') as csvfile:             # <<<<<<<<<<<<<<
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(headers)
 */
    /*with:*/ {
      __pyx_t_3 = PyNumber_Add(__pyx_v_record_file, __pyx_kp_s_csv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_w);
      __Pyx_GIVEREF(__pyx_n_s_w);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_w);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_12 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1310, __pyx_L18_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1310, __pyx_L18_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1310, __pyx_L18_error)
      }
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_10, &__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_15);
          /*try:*/ {
            __pyx_v_csvfile = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "mbd/ChRigidBody.pyx":1311
 *                 headers += [key]
 *             with open(record_file+'.csv', 'w') as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')             # <<<<<<<<<<<<<<
 *                 writer.writerow(headers)
 *         for key, val in self.record_dict.iteritems():
 */
            __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_csv_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1311, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_writer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1311, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_v_csvfile);
            __Pyx_GIVEREF(__pyx_v_csvfile);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_csvfile);
            __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1311, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_delimiter, __pyx_kp_s__78) < 0) __PYX_ERR(0, 1311, __pyx_L22_error)
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1311, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_v_writer = __pyx_t_7;
            __pyx_t_7 = 0;

            /* "mbd/ChRigidBody.pyx":1312
 *             with open(record_file+'.csv', 'w') as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(headers)             # <<<<<<<<<<<<<<
 *         for key, val in self.record_dict.iteritems():
 *             if val[1] is not None:
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_writer, __pyx_n_s_writerow); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1312, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_4 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            if (!__pyx_t_4) {
              __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_headers); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1312, __pyx_L22_error)
              __Pyx_GOTREF(__pyx_t_7);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_headers};
                __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1312, __pyx_L22_error)
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_GOTREF(__pyx_t_7);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_headers};
                __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1312, __pyx_L22_error)
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_GOTREF(__pyx_t_7);
              } else
              #endif
              {
                __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1312, __pyx_L22_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
                __Pyx_INCREF(__pyx_v_headers);
                __Pyx_GIVEREF(__pyx_v_headers);
                PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_headers);
                __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1312, __pyx_L22_error)
                __Pyx_GOTREF(__pyx_t_7);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "mbd/ChRigidBody.pyx":1310
 *             for key in self.record_dict:
 *                 headers += [key]
 *             with open(record_file+'.csv', 'w') as csvfile:             # <<<<<<<<<<<<<<
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(headers)
 */
          }
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          goto __pyx_L29_try_end;
          __pyx_L22_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody._recordValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_6, &__pyx_t_3) < 0) __PYX_ERR(0, 1310, __pyx_L24_except_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_4 = PyTuple_Pack(3, __pyx_t_7, __pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1310, __pyx_L24_except_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_4, NULL);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1310, __pyx_L24_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (__pyx_t_1 < 0) __PYX_ERR(0, 1310, __pyx_L24_except_error)
            __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
            if (__pyx_t_2) {
              __Pyx_GIVEREF(__pyx_t_7);
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_XGIVEREF(__pyx_t_3);
              __Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_6, __pyx_t_3);
              __pyx_t_7 = 0; __pyx_t_6 = 0; __pyx_t_3 = 0; 
              __PYX_ERR(0, 1310, __pyx_L24_except_error)
            }
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L23_exception_handled;
          }
          __pyx_L24_except_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_15);
          goto __pyx_L1_error;
          __pyx_L23_exception_handled:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_15);
          __pyx_L29_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_12) {
            __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_tuple__79, NULL);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1310, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          goto __pyx_L21;
        }
        __pyx_L21:;
      }
      goto __pyx_L33;
      __pyx_L18_error:;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L1_error;
      __pyx_L33:;
    }

    /* "mbd/ChRigidBody.pyx":1306
 *         t_sim = Profiling.time()-Profiling.startTime
 *         values_towrite = [t, t_chrono, t_sim]
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             headers = ['t', 't_ch', 't_sim']
 *             for key in self.record_dict:
 */
  }

  /* "mbd/ChRigidBody.pyx":1313
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(headers)
 *         for key, val in self.record_dict.iteritems():             # <<<<<<<<<<<<<<
 *             if val[1] is not None:
 *                 values_towrite += [getattr(self, val[0])[val[1]]]
 */
  __pyx_t_13 = 0;
  if (unlikely(__pyx_v_self->record_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    __PYX_ERR(0, 1313, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_self->record_dict, 0, __pyx_n_s_iteritems, (&__pyx_t_17), (&__pyx_t_8)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_6;
  __pyx_t_6 = 0;
  while (1) {
    __pyx_t_18 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_17, &__pyx_t_13, &__pyx_t_6, &__pyx_t_7, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_18 == 0)) break;
    if (unlikely(__pyx_t_18 == -1)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "mbd/ChRigidBody.pyx":1314
 *                 writer.writerow(headers)
 *         for key, val in self.record_dict.iteritems():
 *             if val[1] is not None:             # <<<<<<<<<<<<<<
 *                 values_towrite += [getattr(self, val[0])[val[1]]]
 *             else:
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_val, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = (__pyx_t_7 != Py_None);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "mbd/ChRigidBody.pyx":1315
 *         for key, val in self.record_dict.iteritems():
 *             if val[1] is not None:
 *                 values_towrite += [getattr(self, val[0])[val[1]]]             # <<<<<<<<<<<<<<
 *             else:
 *                 values_towrite += [getattr(self, val[0])]
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_val, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_GetAttr(((PyObject *)__pyx_v_self), __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_val, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyObject_GetItem(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_values_towrite, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_values_towrite, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":1314
 *                 writer.writerow(headers)
 *         for key, val in self.record_dict.iteritems():
 *             if val[1] is not None:             # <<<<<<<<<<<<<<
 *                 values_towrite += [getattr(self, val[0])[val[1]]]
 *             else:
 */
      goto __pyx_L36;
    }

    /* "mbd/ChRigidBody.pyx":1317
 *                 values_towrite += [getattr(self, val[0])[val[1]]]
 *             else:
 *                 values_towrite += [getattr(self, val[0])]             # <<<<<<<<<<<<<<
 *         with open(record_file+'.csv', 'a') as csvfile:
 *             writer = csv.writer(csvfile, delimiter=',')
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_val, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_GetAttr(((PyObject *)__pyx_v_self), __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_v_values_towrite, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_values_towrite, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;
    }
    __pyx_L36:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":1318
 *             else:
 *                 values_towrite += [getattr(self, val[0])]
 *         with open(record_file+'.csv', 'a') as csvfile:             # <<<<<<<<<<<<<<
 *             writer = csv.writer(csvfile, delimiter=',')
 *             writer.writerow(values_towrite)
 */
  /*with:*/ {
    __pyx_t_3 = PyNumber_Add(__pyx_v_record_file, __pyx_kp_s_csv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_a);
    __Pyx_GIVEREF(__pyx_n_s_a);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_n_s_a);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1318, __pyx_L37_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1318, __pyx_L37_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1318, __pyx_L37_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_10, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        /*try:*/ {
          __Pyx_XDECREF_SET(__pyx_v_csvfile, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "mbd/ChRigidBody.pyx":1319
 *                 values_towrite += [getattr(self, val[0])]
 *         with open(record_file+'.csv', 'a') as csvfile:
 *             writer = csv.writer(csvfile, delimiter=',')             # <<<<<<<<<<<<<<
 *             writer.writerow(values_towrite)
 *         ## added mass
 */
          __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_csv_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1319, __pyx_L41_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_writer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L41_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1319, __pyx_L41_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_v_csvfile);
          __Pyx_GIVEREF(__pyx_v_csvfile);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_csvfile);
          __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1319, __pyx_L41_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_delimiter, __pyx_kp_s__78) < 0) __PYX_ERR(0, 1319, __pyx_L41_error)
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1319, __pyx_L41_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF_SET(__pyx_v_writer, __pyx_t_6);
          __pyx_t_6 = 0;

          /* "mbd/ChRigidBody.pyx":1320
 *         with open(record_file+'.csv', 'a') as csvfile:
 *             writer = csv.writer(csvfile, delimiter=',')
 *             writer.writerow(values_towrite)             # <<<<<<<<<<<<<<
 *         ## added mass
 *         if self.ProtChSystem.model_addedmass is not None:
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_writer, __pyx_n_s_writerow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1320, __pyx_L41_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          if (!__pyx_t_4) {
            __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_values_towrite); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1320, __pyx_L41_error)
            __Pyx_GOTREF(__pyx_t_6);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_values_towrite};
              __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1320, __pyx_L41_error)
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_GOTREF(__pyx_t_6);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_values_towrite};
              __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1320, __pyx_L41_error)
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_GOTREF(__pyx_t_6);
            } else
            #endif
            {
              __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1320, __pyx_L41_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
              __Pyx_INCREF(__pyx_v_values_towrite);
              __Pyx_GIVEREF(__pyx_v_values_towrite);
              PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_values_towrite);
              __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1320, __pyx_L41_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "mbd/ChRigidBody.pyx":1318
 *             else:
 *                 values_towrite += [getattr(self, val[0])]
 *         with open(record_file+'.csv', 'a') as csvfile:             # <<<<<<<<<<<<<<
 *             writer = csv.writer(csvfile, delimiter=',')
 *             writer.writerow(values_towrite)
 */
        }
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L48_try_end;
        __pyx_L41_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody._recordValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_3) < 0) __PYX_ERR(0, 1318, __pyx_L43_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = PyTuple_Pack(3, __pyx_t_6, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1318, __pyx_L43_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_4, NULL);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1318, __pyx_L43_except_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (__pyx_t_1 < 0) __PYX_ERR(0, 1318, __pyx_L43_except_error)
          __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
          if (__pyx_t_2) {
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_7);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_7, __pyx_t_3);
            __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 1318, __pyx_L43_except_error)
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L42_exception_handled;
        }
        __pyx_L43_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_10, __pyx_t_11);
        goto __pyx_L1_error;
        __pyx_L42_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_10, __pyx_t_11);
        __pyx_L48_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_12) {
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_tuple__80, NULL);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1318, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        goto __pyx_L40;
      }
      __pyx_L40:;
    }
    goto __pyx_L52;
    __pyx_L37_error:;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    goto __pyx_L1_error;
    __pyx_L52:;
  }

  /* "mbd/ChRigidBody.pyx":1322
 *             writer.writerow(values_towrite)
 *         ## added mass
 *         if self.ProtChSystem.model_addedmass is not None:             # <<<<<<<<<<<<<<
 *             if t == 0:
 *                 headers = ['t', 't_ch', 't_sim']
 */
  __pyx_t_2 = (__pyx_v_self->ProtChSystem->model_addedmass != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":1323
 *         ## added mass
 *         if self.ProtChSystem.model_addedmass is not None:
 *             if t == 0:             # <<<<<<<<<<<<<<
 *                 headers = ['t', 't_ch', 't_sim']
 *                 for i in range(6):
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "mbd/ChRigidBody.pyx":1324
 *         if self.ProtChSystem.model_addedmass is not None:
 *             if t == 0:
 *                 headers = ['t', 't_ch', 't_sim']             # <<<<<<<<<<<<<<
 *                 for i in range(6):
 *                     for j in range(6):
 */
      __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_t);
      __Pyx_GIVEREF(__pyx_n_s_t);
      PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_t);
      __Pyx_INCREF(__pyx_n_s_t_ch);
      __Pyx_GIVEREF(__pyx_n_s_t_ch);
      PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_t_ch);
      __Pyx_INCREF(__pyx_n_s_t_sim);
      __Pyx_GIVEREF(__pyx_n_s_t_sim);
      PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_t_sim);
      __Pyx_XDECREF_SET(__pyx_v_headers, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":1325
 *             if t == 0:
 *                 headers = ['t', 't_ch', 't_sim']
 *                 for i in range(6):             # <<<<<<<<<<<<<<
 *                     for j in range(6):
 *                         headers += ['A'+str(i)+str(j)]
 */
      for (__pyx_t_19 = 0; __pyx_t_19 < 6; __pyx_t_19+=1) {
        __pyx_v_i = __pyx_t_19;

        /* "mbd/ChRigidBody.pyx":1326
 *                 headers = ['t', 't_ch', 't_sim']
 *                 for i in range(6):
 *                     for j in range(6):             # <<<<<<<<<<<<<<
 *                         headers += ['A'+str(i)+str(j)]
 *                 with open(record_file+'_Aij.csv', 'w') as csvfile:
 */
        for (__pyx_t_20 = 0; __pyx_t_20 < 6; __pyx_t_20+=1) {
          __pyx_v_j = __pyx_t_20;

          /* "mbd/ChRigidBody.pyx":1327
 *                 for i in range(6):
 *                     for j in range(6):
 *                         headers += ['A'+str(i)+str(j)]             # <<<<<<<<<<<<<<
 *                 with open(record_file+'_Aij.csv', 'w') as csvfile:
 *                     writer = csv.writer(csvfile, delimiter=',')
 */
          __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyNumber_Add(__pyx_n_s_A, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_6);
          PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_headers, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF_SET(__pyx_v_headers, ((PyObject*)__pyx_t_6));
          __pyx_t_6 = 0;
        }
      }

      /* "mbd/ChRigidBody.pyx":1328
 *                     for j in range(6):
 *                         headers += ['A'+str(i)+str(j)]
 *                 with open(record_file+'_Aij.csv', 'w') as csvfile:             # <<<<<<<<<<<<<<
 *                     writer = csv.writer(csvfile, delimiter=',')
 *                     writer.writerow(headers)
 */
      /*with:*/ {
        __pyx_t_6 = PyNumber_Add(__pyx_v_record_file, __pyx_kp_s_Aij_csv); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
        __Pyx_INCREF(__pyx_n_s_w);
        __Pyx_GIVEREF(__pyx_n_s_w);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_w);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_12 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_enter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1328, __pyx_L59_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        if (__pyx_t_4) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1328, __pyx_L59_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1328, __pyx_L59_error)
        }
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __pyx_t_3;
        __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        /*try:*/ {
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_10, &__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_11);
            __Pyx_XGOTREF(__pyx_t_10);
            __Pyx_XGOTREF(__pyx_t_15);
            /*try:*/ {
              __Pyx_XDECREF_SET(__pyx_v_csvfile, __pyx_t_7);
              __pyx_t_7 = 0;

              /* "mbd/ChRigidBody.pyx":1329
 *                         headers += ['A'+str(i)+str(j)]
 *                 with open(record_file+'_Aij.csv', 'w') as csvfile:
 *                     writer = csv.writer(csvfile, delimiter=',')             # <<<<<<<<<<<<<<
 *                     writer.writerow(headers)
 *             values_towrite = [t, t_chrono, t_sim]
 */
              __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_csv_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1329, __pyx_L63_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_writer); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1329, __pyx_L63_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1329, __pyx_L63_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_INCREF(__pyx_v_csvfile);
              __Pyx_GIVEREF(__pyx_v_csvfile);
              PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_csvfile);
              __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1329, __pyx_L63_error)
              __Pyx_GOTREF(__pyx_t_3);
              if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_delimiter, __pyx_kp_s__78) < 0) __PYX_ERR(0, 1329, __pyx_L63_error)
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1329, __pyx_L63_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_XDECREF_SET(__pyx_v_writer, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "mbd/ChRigidBody.pyx":1330
 *                 with open(record_file+'_Aij.csv', 'w') as csvfile:
 *                     writer = csv.writer(csvfile, delimiter=',')
 *                     writer.writerow(headers)             # <<<<<<<<<<<<<<
 *             values_towrite = [t, t_chrono, t_sim]
 *             for i in range(6):
 */
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_writer, __pyx_n_s_writerow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1330, __pyx_L63_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_7 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              if (!__pyx_t_7) {
                __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_headers); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1330, __pyx_L63_error)
                __Pyx_GOTREF(__pyx_t_4);
              } else {
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_3)) {
                  PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_headers};
                  __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1330, __pyx_L63_error)
                  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __Pyx_GOTREF(__pyx_t_4);
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
                  PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_headers};
                  __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1330, __pyx_L63_error)
                  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __Pyx_GOTREF(__pyx_t_4);
                } else
                #endif
                {
                  __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1330, __pyx_L63_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
                  __Pyx_INCREF(__pyx_v_headers);
                  __Pyx_GIVEREF(__pyx_v_headers);
                  PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_headers);
                  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1330, __pyx_L63_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                }
              }
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "mbd/ChRigidBody.pyx":1328
 *                     for j in range(6):
 *                         headers += ['A'+str(i)+str(j)]
 *                 with open(record_file+'_Aij.csv', 'w') as csvfile:             # <<<<<<<<<<<<<<
 *                     writer = csv.writer(csvfile, delimiter=',')
 *                     writer.writerow(headers)
 */
            }
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            goto __pyx_L70_try_end;
            __pyx_L63_error:;
            __Pyx_PyThreadState_assign
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            /*except:*/ {
              __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody._recordValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_6) < 0) __PYX_ERR(0, 1328, __pyx_L65_except_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_7 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1328, __pyx_L65_except_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_7, NULL);
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1328, __pyx_L65_except_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (__pyx_t_1 < 0) __PYX_ERR(0, 1328, __pyx_L65_except_error)
              __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
              if (__pyx_t_2) {
                __Pyx_GIVEREF(__pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_3);
                __Pyx_XGIVEREF(__pyx_t_6);
                __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_3, __pyx_t_6);
                __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_6 = 0; 
                __PYX_ERR(0, 1328, __pyx_L65_except_error)
              }
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              goto __pyx_L64_exception_handled;
            }
            __pyx_L65_except_error:;
            __Pyx_PyThreadState_assign
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_15);
            goto __pyx_L1_error;
            __pyx_L64_exception_handled:;
            __Pyx_PyThreadState_assign
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_15);
            __pyx_L70_try_end:;
          }
        }
        /*finally:*/ {
          /*normal exit:*/{
            if (__pyx_t_12) {
              __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_tuple__81, NULL);
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1328, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            goto __pyx_L62;
          }
          __pyx_L62:;
        }
        goto __pyx_L74;
        __pyx_L59_error:;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L1_error;
        __pyx_L74:;
      }

      /* "mbd/ChRigidBody.pyx":1323
 *         ## added mass
 *         if self.ProtChSystem.model_addedmass is not None:
 *             if t == 0:             # <<<<<<<<<<<<<<
 *                 headers = ['t', 't_ch', 't_sim']
 *                 for i in range(6):
 */
    }

    /* "mbd/ChRigidBody.pyx":1331
 *                     writer = csv.writer(csvfile, delimiter=',')
 *                     writer.writerow(headers)
 *             values_towrite = [t, t_chrono, t_sim]             # <<<<<<<<<<<<<<
 *             for i in range(6):
 *                 for j in range(6):
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_t_chrono); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_t);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_t_sim);
    __Pyx_GIVEREF(__pyx_v_t_sim);
    PyList_SET_ITEM(__pyx_t_3, 2, __pyx_v_t_sim);
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_values_towrite, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1332
 *                     writer.writerow(headers)
 *             values_towrite = [t, t_chrono, t_sim]
 *             for i in range(6):             # <<<<<<<<<<<<<<
 *                 for j in range(6):
 *                     values_towrite += [self.Aij[i, j]]
 */
    for (__pyx_t_19 = 0; __pyx_t_19 < 6; __pyx_t_19+=1) {
      __pyx_v_i = __pyx_t_19;

      /* "mbd/ChRigidBody.pyx":1333
 *             values_towrite = [t, t_chrono, t_sim]
 *             for i in range(6):
 *                 for j in range(6):             # <<<<<<<<<<<<<<
 *                     values_towrite += [self.Aij[i, j]]
 *             with open(record_file+'_Aij.csv', 'a') as csvfile:
 */
      for (__pyx_t_20 = 0; __pyx_t_20 < 6; __pyx_t_20+=1) {
        __pyx_v_j = __pyx_t_20;

        /* "mbd/ChRigidBody.pyx":1334
 *             for i in range(6):
 *                 for j in range(6):
 *                     values_towrite += [self.Aij[i, j]]             # <<<<<<<<<<<<<<
 *             with open(record_file+'_Aij.csv', 'a') as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')
 */
        __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_j); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
        __pyx_t_3 = 0;
        __pyx_t_6 = 0;
        __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self->Aij), __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_6);
        PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_values_towrite, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF_SET(__pyx_v_values_towrite, ((PyObject*)__pyx_t_6));
        __pyx_t_6 = 0;
      }
    }

    /* "mbd/ChRigidBody.pyx":1335
 *                 for j in range(6):
 *                     values_towrite += [self.Aij[i, j]]
 *             with open(record_file+'_Aij.csv', 'a') as csvfile:             # <<<<<<<<<<<<<<
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(values_towrite)
 */
    /*with:*/ {
      __pyx_t_6 = PyNumber_Add(__pyx_v_record_file, __pyx_kp_s_Aij_csv); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_a);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_12 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1335, __pyx_L79_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1335, __pyx_L79_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1335, __pyx_L79_error)
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_10, &__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_11);
          /*try:*/ {
            __Pyx_XDECREF_SET(__pyx_v_csvfile, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "mbd/ChRigidBody.pyx":1336
 *                     values_towrite += [self.Aij[i, j]]
 *             with open(record_file+'_Aij.csv', 'a') as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')             # <<<<<<<<<<<<<<
 *                 writer.writerow(values_towrite)
 * 
 */
            __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_csv_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1336, __pyx_L83_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_writer); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1336, __pyx_L83_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1336, __pyx_L83_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_INCREF(__pyx_v_csvfile);
            __Pyx_GIVEREF(__pyx_v_csvfile);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_csvfile);
            __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1336, __pyx_L83_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_delimiter, __pyx_kp_s__78) < 0) __PYX_ERR(0, 1336, __pyx_L83_error)
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1336, __pyx_L83_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF_SET(__pyx_v_writer, __pyx_t_7);
            __pyx_t_7 = 0;

            /* "mbd/ChRigidBody.pyx":1337
 *             with open(record_file+'_Aij.csv', 'a') as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(values_towrite)             # <<<<<<<<<<<<<<
 * 
 *     def addPrismaticLinksWithSpring(self, np.ndarray pris1,
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_writer, __pyx_n_s_writerow); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1337, __pyx_L83_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            if (!__pyx_t_3) {
              __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_values_towrite); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1337, __pyx_L83_error)
              __Pyx_GOTREF(__pyx_t_7);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_4)) {
                PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_values_towrite};
                __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1337, __pyx_L83_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_7);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
                PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_values_towrite};
                __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1337, __pyx_L83_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_7);
              } else
              #endif
              {
                __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1337, __pyx_L83_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
                __Pyx_INCREF(__pyx_v_values_towrite);
                __Pyx_GIVEREF(__pyx_v_values_towrite);
                PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_values_towrite);
                __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1337, __pyx_L83_error)
                __Pyx_GOTREF(__pyx_t_7);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "mbd/ChRigidBody.pyx":1335
 *                 for j in range(6):
 *                     values_towrite += [self.Aij[i, j]]
 *             with open(record_file+'_Aij.csv', 'a') as csvfile:             # <<<<<<<<<<<<<<
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(values_towrite)
 */
          }
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L90_try_end;
          __pyx_L83_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody._recordValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 1335, __pyx_L85_except_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_3 = PyTuple_Pack(3, __pyx_t_7, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1335, __pyx_L85_except_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_3, NULL);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1335, __pyx_L85_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (__pyx_t_2 < 0) __PYX_ERR(0, 1335, __pyx_L85_except_error)
            __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
            if (__pyx_t_1) {
              __Pyx_GIVEREF(__pyx_t_7);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_6);
              __Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_4, __pyx_t_6);
              __pyx_t_7 = 0; __pyx_t_4 = 0; __pyx_t_6 = 0; 
              __PYX_ERR(0, 1335, __pyx_L85_except_error)
            }
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            goto __pyx_L84_exception_handled;
          }
          __pyx_L85_except_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_10, __pyx_t_11);
          goto __pyx_L1_error;
          __pyx_L84_exception_handled:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_10, __pyx_t_11);
          __pyx_L90_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_12) {
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_tuple__82, NULL);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1335, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          goto __pyx_L82;
        }
        __pyx_L82:;
      }
      goto __pyx_L94;
      __pyx_L79_error:;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L1_error;
      __pyx_L94:;
    }

    /* "mbd/ChRigidBody.pyx":1322
 *             writer.writerow(values_towrite)
 *         ## added mass
 *         if self.ProtChSystem.model_addedmass is not None:             # <<<<<<<<<<<<<<
 *             if t == 0:
 *                 headers = ['t', 't_ch', 't_sim']
 */
  }

  /* "mbd/ChRigidBody.pyx":1287
 *             self.record_dict['hz'] = ['h_predict', 2]
 * 
 *     def _recordValues(self):             # <<<<<<<<<<<<<<
 *         """Records values of body attributes in a csv file.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody._recordValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_record_file);
  __Pyx_XDECREF(__pyx_v_t_last);
  __Pyx_XDECREF(__pyx_v_dt_last);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_t_sim);
  __Pyx_XDECREF(__pyx_v_values_towrite);
  __Pyx_XDECREF(__pyx_v_headers);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_csvfile);
  __Pyx_XDECREF(__pyx_v_writer);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1339
 *                 writer.writerow(values_towrite)
 * 
 *     def addPrismaticLinksWithSpring(self, np.ndarray pris1,             # <<<<<<<<<<<<<<
 *                                     np.ndarray pris2, double stiffness, double damping,
 *                                     double rest_length):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_91addPrismaticLinksWithSpring(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_90addPrismaticLinksWithSpring[] = "\n        fairlead: barycenter coords\n        pris: absolute coords\n        pris1-------fairlead(barycenter)\n        |\n        |\n        |\n        |\n        pris2\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_91addPrismaticLinksWithSpring(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_pris1 = 0;
  PyArrayObject *__pyx_v_pris2 = 0;
  double __pyx_v_stiffness;
  double __pyx_v_damping;
  double __pyx_v_rest_length;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPrismaticLinksWithSpring (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pris1,&__pyx_n_s_pris2,&__pyx_n_s_stiffness,&__pyx_n_s_damping,&__pyx_n_s_rest_length,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pris1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pris2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addPrismaticLinksWithSpring", 1, 5, 5, 1); __PYX_ERR(0, 1339, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stiffness)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addPrismaticLinksWithSpring", 1, 5, 5, 2); __PYX_ERR(0, 1339, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_damping)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addPrismaticLinksWithSpring", 1, 5, 5, 3); __PYX_ERR(0, 1339, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rest_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addPrismaticLinksWithSpring", 1, 5, 5, 4); __PYX_ERR(0, 1339, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addPrismaticLinksWithSpring") < 0)) __PYX_ERR(0, 1339, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_pris1 = ((PyArrayObject *)values[0]);
    __pyx_v_pris2 = ((PyArrayObject *)values[1]);
    __pyx_v_stiffness = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_stiffness == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1340, __pyx_L3_error)
    __pyx_v_damping = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_damping == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1340, __pyx_L3_error)
    __pyx_v_rest_length = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_rest_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1341, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addPrismaticLinksWithSpring", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1339, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.addPrismaticLinksWithSpring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pris1), __pyx_ptype_5numpy_ndarray, 1, "pris1", 0))) __PYX_ERR(0, 1339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pris2), __pyx_ptype_5numpy_ndarray, 1, "pris2", 0))) __PYX_ERR(0, 1340, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_90addPrismaticLinksWithSpring(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_pris1, __pyx_v_pris2, __pyx_v_stiffness, __pyx_v_damping, __pyx_v_rest_length);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_90addPrismaticLinksWithSpring(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyArrayObject *__pyx_v_pris1, PyArrayObject *__pyx_v_pris2, double __pyx_v_stiffness, double __pyx_v_damping, double __pyx_v_rest_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPrismaticLinksWithSpring", 0);

  /* "mbd/ChRigidBody.pyx":1352
 *         pris2
 *         """
 *         self.thisptr.addPrismaticLinksWithSpring(<double*> pris1.data,             # <<<<<<<<<<<<<<
 *                                                  <double*> pris2.data,
 *                                                  stiffness,
 */
  __pyx_v_self->thisptr->addPrismaticLinksWithSpring(((double *)__pyx_v_pris1->data), ((double *)__pyx_v_pris2->data), __pyx_v_stiffness, __pyx_v_damping, __pyx_v_rest_length);

  /* "mbd/ChRigidBody.pyx":1339
 *                 writer.writerow(values_towrite)
 * 
 *     def addPrismaticLinksWithSpring(self, np.ndarray pris1,             # <<<<<<<<<<<<<<
 *                                     np.ndarray pris2, double stiffness, double damping,
 *                                     double rest_length):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1357
 *                                                  damping,
 *                                                  rest_length)
 *     def addPrismaticLinkX(self, double[:] pris1):             # <<<<<<<<<<<<<<
 *         self.thisptr.addPrismaticLinkX(&pris1[0]);
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_93addPrismaticLinkX(PyObject *__pyx_v_self, PyObject *__pyx_arg_pris1); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_93addPrismaticLinkX(PyObject *__pyx_v_self, PyObject *__pyx_arg_pris1) {
  __Pyx_memviewslice __pyx_v_pris1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPrismaticLinkX (wrapper)", 0);
  assert(__pyx_arg_pris1); {
    __pyx_v_pris1 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_arg_pris1); if (unlikely(!__pyx_v_pris1.memview)) __PYX_ERR(0, 1357, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.addPrismaticLinkX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_92addPrismaticLinkX(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), __pyx_v_pris1);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_92addPrismaticLinkX(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, __Pyx_memviewslice __pyx_v_pris1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("addPrismaticLinkX", 0);

  /* "mbd/ChRigidBody.pyx":1358
 *                                                  rest_length)
 *     def addPrismaticLinkX(self, double[:] pris1):
 *         self.thisptr.addPrismaticLinkX(&pris1[0]);             # <<<<<<<<<<<<<<
 * 
 *     def setName(self, string name):
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_v_pris1.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_v_pris1.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 1358, __pyx_L1_error)
  }
  __pyx_v_self->thisptr->addPrismaticLinkX((&(*((double *) ( /* dim=0 */ (__pyx_v_pris1.data + __pyx_t_1 * __pyx_v_pris1.strides[0]) )))));

  /* "mbd/ChRigidBody.pyx":1357
 *                                                  damping,
 *                                                  rest_length)
 *     def addPrismaticLinkX(self, double[:] pris1):             # <<<<<<<<<<<<<<
 *         self.thisptr.addPrismaticLinkX(&pris1[0]);
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.addPrismaticLinkX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_pris1, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1360
 *         self.thisptr.addPrismaticLinkX(&pris1[0]);
 * 
 *     def setName(self, string name):             # <<<<<<<<<<<<<<
 *         """Sets name of body (used for csv file)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_95setName(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_94setName[] = "Sets name of body (used for csv file)\n\n        Parameters\n        ----------\n        name: str\n            name of the body\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_95setName(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  std::string __pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setName (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(__pyx_arg_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1360, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.setName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_94setName(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((std::string)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_94setName(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, std::string __pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setName", 0);

  /* "mbd/ChRigidBody.pyx":1368
 *             name of the body
 *         """
 *         self.name = name             # <<<<<<<<<<<<<<
 *         self.thisptr.setName(name)
 * 
 */
  __pyx_v_self->name = __pyx_v_name;

  /* "mbd/ChRigidBody.pyx":1369
 *         """
 *         self.name = name
 *         self.thisptr.setName(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr->setName(__pyx_v_name);

  /* "mbd/ChRigidBody.pyx":1360
 *         self.thisptr.addPrismaticLinkX(&pris1[0]);
 * 
 *     def setName(self, string name):             # <<<<<<<<<<<<<<
 *         """Sets name of body (used for csv file)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":208
 *     cdef ch.ChQuaternion rotation_last
 *     cdef public:
 *       str record_file             # <<<<<<<<<<<<<<
 *       object model
 *       ProtChSystem ProtChSystem
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_file_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_file_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_file___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_file___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->record_file);
  __pyx_r = __pyx_v_self->record_file;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_file_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_file_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_file_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_file_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->record_file);
  __Pyx_DECREF(__pyx_v_self->record_file);
  __pyx_v_self->record_file = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.record_file.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_file_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_file_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_file_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_file_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->record_file);
  __Pyx_DECREF(__pyx_v_self->record_file);
  __pyx_v_self->record_file = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":209
 *     cdef public:
 *       str record_file
 *       object model             # <<<<<<<<<<<<<<
 *       ProtChSystem ProtChSystem
 *       object Shape
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5model_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5model___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5model___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->model);
  __pyx_r = __pyx_v_self->model;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5model_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5model_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5model_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5model_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5model_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5model_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":210
 *       str record_file
 *       object model
 *       ProtChSystem ProtChSystem             # <<<<<<<<<<<<<<
 *       object Shape
 *       int nd
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_r = ((PyObject *)__pyx_v_self->ProtChSystem);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3mbd_11ChRigidBody_ProtChSystem))))) __PYX_ERR(0, 210, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ProtChSystem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_v_self->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.ProtChSystem.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ProtChSystem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_v_self->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":211
 *       object model
 *       ProtChSystem ProtChSystem
 *       object Shape             # <<<<<<<<<<<<<<
 *       int nd
 *       int i_start
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5Shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5Shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5Shape___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5Shape___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->Shape);
  __pyx_r = __pyx_v_self->Shape;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5Shape_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5Shape_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5Shape_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5Shape_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->Shape);
  __Pyx_DECREF(__pyx_v_self->Shape);
  __pyx_v_self->Shape = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5Shape_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5Shape_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5Shape_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5Shape_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Shape);
  __Pyx_DECREF(__pyx_v_self->Shape);
  __pyx_v_self->Shape = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":212
 *       ProtChSystem ProtChSystem
 *       object Shape
 *       int nd             # <<<<<<<<<<<<<<
 *       int i_start
 *       int i_end
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2nd_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2nd_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2nd___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2nd___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.nd.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2nd_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2nd_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2nd_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2nd_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L1_error)
  __pyx_v_self->nd = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.nd.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":213
 *       object Shape
 *       int nd
 *       int i_start             # <<<<<<<<<<<<<<
 *       int i_end
 *       double dt
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_7i_start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_7i_start_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_7i_start___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_7i_start___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->i_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.i_start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_7i_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_7i_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_7i_start_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_7i_start_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L1_error)
  __pyx_v_self->i_start = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.i_start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":214
 *       int nd
 *       int i_start
 *       int i_end             # <<<<<<<<<<<<<<
 *       double dt
 *       double width_2D
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5i_end_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5i_end_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5i_end___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5i_end___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->i_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.i_end.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5i_end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5i_end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5i_end_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5i_end_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L1_error)
  __pyx_v_self->i_end = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.i_end.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":215
 *       int i_start
 *       int i_end
 *       double dt             # <<<<<<<<<<<<<<
 *       double width_2D
 *       object record_dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2dt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2dt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2dt___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2dt___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->dt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.dt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2dt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2dt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2dt_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_2dt_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 215, __pyx_L1_error)
  __pyx_v_self->dt = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.dt.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":216
 *       int i_end
 *       double dt
 *       double width_2D             # <<<<<<<<<<<<<<
 *       object record_dict
 *       object prescribed_motion_function
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8width_2D_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8width_2D_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8width_2D___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8width_2D___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->width_2D); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.width_2D.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8width_2D_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8width_2D_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8width_2D_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8width_2D_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 216, __pyx_L1_error)
  __pyx_v_self->width_2D = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.width_2D.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":217
 *       double dt
 *       double width_2D
 *       object record_dict             # <<<<<<<<<<<<<<
 *       object prescribed_motion_function
 *       pych.ChBodyAddedMass ChBody
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_dict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_dict_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_dict___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_dict___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->record_dict);
  __pyx_r = __pyx_v_self->record_dict;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_dict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_dict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_dict_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_dict_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->record_dict);
  __Pyx_DECREF(__pyx_v_self->record_dict);
  __pyx_v_self->record_dict = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_dict_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_dict_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_dict_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11record_dict_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->record_dict);
  __Pyx_DECREF(__pyx_v_self->record_dict);
  __pyx_v_self->record_dict = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":218
 *       double width_2D
 *       object record_dict
 *       object prescribed_motion_function             # <<<<<<<<<<<<<<
 *       pych.ChBodyAddedMass ChBody
 *       np.ndarray position
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->prescribed_motion_function);
  __pyx_r = __pyx_v_self->prescribed_motion_function;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->prescribed_motion_function);
  __Pyx_DECREF(__pyx_v_self->prescribed_motion_function);
  __pyx_v_self->prescribed_motion_function = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->prescribed_motion_function);
  __Pyx_DECREF(__pyx_v_self->prescribed_motion_function);
  __pyx_v_self->prescribed_motion_function = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":219
 *       object record_dict
 *       object prescribed_motion_function
 *       pych.ChBodyAddedMass ChBody             # <<<<<<<<<<<<<<
 *       np.ndarray position
 *       np.ndarray position_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6ChBody_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6ChBody_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6ChBody___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6ChBody___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ChBody));
  __pyx_r = ((PyObject *)__pyx_v_self->ChBody);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6ChBody_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6ChBody_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6ChBody_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6ChBody_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass))))) __PYX_ERR(0, 219, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ChBody);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ChBody));
  __pyx_v_self->ChBody = ((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.ChBody.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6ChBody_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6ChBody_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6ChBody_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6ChBody_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ChBody);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ChBody));
  __pyx_v_self->ChBody = ((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":220
 *       object prescribed_motion_function
 *       pych.ChBodyAddedMass ChBody
 *       np.ndarray position             # <<<<<<<<<<<<<<
 *       np.ndarray position_last
 *       np.ndarray F  # force as retrieved from Chrono
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8position_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8position_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8position___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8position___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->position));
  __pyx_r = ((PyObject *)__pyx_v_self->position);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8position_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8position_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->position);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->position));
  __pyx_v_self->position = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.position.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8position_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8position_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8position_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8position_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->position);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->position));
  __pyx_v_self->position = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":221
 *       pych.ChBodyAddedMass ChBody
 *       np.ndarray position
 *       np.ndarray position_last             # <<<<<<<<<<<<<<
 *       np.ndarray F  # force as retrieved from Chrono
 *       np.ndarray M  # moment as retreived from Chrono
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13position_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13position_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13position_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13position_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->position_last));
  __pyx_r = ((PyObject *)__pyx_v_self->position_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13position_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13position_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13position_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13position_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->position_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->position_last));
  __pyx_v_self->position_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.position_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13position_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13position_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13position_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13position_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->position_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->position_last));
  __pyx_v_self->position_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":222
 *       np.ndarray position
 *       np.ndarray position_last
 *       np.ndarray F  # force as retrieved from Chrono             # <<<<<<<<<<<<<<
 *       np.ndarray M  # moment as retreived from Chrono
 *       np.ndarray F_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1F_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1F_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1F___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1F___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->F));
  __pyx_r = ((PyObject *)__pyx_v_self->F);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1F_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1F_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1F_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1F_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 222, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F));
  __pyx_v_self->F = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.F.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1F_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1F_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1F_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1F_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->F);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F));
  __pyx_v_self->F = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":223
 *       np.ndarray position_last
 *       np.ndarray F  # force as retrieved from Chrono
 *       np.ndarray M  # moment as retreived from Chrono             # <<<<<<<<<<<<<<
 *       np.ndarray F_last
 *       np.ndarray M_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1M_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1M_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1M___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1M___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->M));
  __pyx_r = ((PyObject *)__pyx_v_self->M);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1M_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1M_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1M_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1M_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 223, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M));
  __pyx_v_self->M = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.M.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1M_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1M_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1M_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_1M_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->M);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M));
  __pyx_v_self->M = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":224
 *       np.ndarray F  # force as retrieved from Chrono
 *       np.ndarray M  # moment as retreived from Chrono
 *       np.ndarray F_last             # <<<<<<<<<<<<<<
 *       np.ndarray M_last
 *       np.ndarray F_prot  # force retrieved from Proteus (fluid)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->F_last));
  __pyx_r = ((PyObject *)__pyx_v_self->F_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_last));
  __pyx_v_self->F_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.F_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->F_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_last));
  __pyx_v_self->F_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":225
 *       np.ndarray M  # moment as retreived from Chrono
 *       np.ndarray F_last
 *       np.ndarray M_last             # <<<<<<<<<<<<<<
 *       np.ndarray F_prot  # force retrieved from Proteus (fluid)
 *       np.ndarray M_prot  # moment retrieved from Proteus (fluid)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->M_last));
  __pyx_r = ((PyObject *)__pyx_v_self->M_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_last));
  __pyx_v_self->M_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.M_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->M_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_last));
  __pyx_v_self->M_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":226
 *       np.ndarray F_last
 *       np.ndarray M_last
 *       np.ndarray F_prot  # force retrieved from Proteus (fluid)             # <<<<<<<<<<<<<<
 *       np.ndarray M_prot  # moment retrieved from Proteus (fluid)
 *       np.ndarray F_prot_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_prot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_prot_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_prot___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_prot___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->F_prot));
  __pyx_r = ((PyObject *)__pyx_v_self->F_prot);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_prot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_prot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_prot_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_prot_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_prot);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_prot));
  __pyx_v_self->F_prot = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.F_prot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_prot_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_prot_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_prot_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6F_prot_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->F_prot);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_prot));
  __pyx_v_self->F_prot = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":227
 *       np.ndarray M_last
 *       np.ndarray F_prot  # force retrieved from Proteus (fluid)
 *       np.ndarray M_prot  # moment retrieved from Proteus (fluid)             # <<<<<<<<<<<<<<
 *       np.ndarray F_prot_last
 *       np.ndarray M_prot_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_prot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_prot_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_prot___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_prot___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->M_prot));
  __pyx_r = ((PyObject *)__pyx_v_self->M_prot);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_prot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_prot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_prot_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_prot_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_prot);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_prot));
  __pyx_v_self->M_prot = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.M_prot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_prot_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_prot_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_prot_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_6M_prot_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->M_prot);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_prot));
  __pyx_v_self->M_prot = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":228
 *       np.ndarray F_prot  # force retrieved from Proteus (fluid)
 *       np.ndarray M_prot  # moment retrieved from Proteus (fluid)
 *       np.ndarray F_prot_last             # <<<<<<<<<<<<<<
 *       np.ndarray M_prot_last
 *       np.ndarray F_applied  # force applied and passed to Chrono
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->F_prot_last));
  __pyx_r = ((PyObject *)__pyx_v_self->F_prot_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_prot_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_prot_last));
  __pyx_v_self->F_prot_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.F_prot_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->F_prot_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_prot_last));
  __pyx_v_self->F_prot_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":229
 *       np.ndarray M_prot  # moment retrieved from Proteus (fluid)
 *       np.ndarray F_prot_last
 *       np.ndarray M_prot_last             # <<<<<<<<<<<<<<
 *       np.ndarray F_applied  # force applied and passed to Chrono
 *       np.ndarray M_applied  # moment applied and passed to Chrono
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->M_prot_last));
  __pyx_r = ((PyObject *)__pyx_v_self->M_prot_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 229, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_prot_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_prot_last));
  __pyx_v_self->M_prot_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.M_prot_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->M_prot_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_prot_last));
  __pyx_v_self->M_prot_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":230
 *       np.ndarray F_prot_last
 *       np.ndarray M_prot_last
 *       np.ndarray F_applied  # force applied and passed to Chrono             # <<<<<<<<<<<<<<
 *       np.ndarray M_applied  # moment applied and passed to Chrono
 *       np.ndarray F_applied_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9F_applied_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9F_applied_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9F_applied___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9F_applied___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->F_applied));
  __pyx_r = ((PyObject *)__pyx_v_self->F_applied);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9F_applied_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9F_applied_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9F_applied_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9F_applied_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_applied);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_applied));
  __pyx_v_self->F_applied = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.F_applied.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9F_applied_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9F_applied_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9F_applied_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9F_applied_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->F_applied);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_applied));
  __pyx_v_self->F_applied = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":231
 *       np.ndarray M_prot_last
 *       np.ndarray F_applied  # force applied and passed to Chrono
 *       np.ndarray M_applied  # moment applied and passed to Chrono             # <<<<<<<<<<<<<<
 *       np.ndarray F_applied_last
 *       np.ndarray M_applied_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9M_applied_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9M_applied_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9M_applied___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9M_applied___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->M_applied));
  __pyx_r = ((PyObject *)__pyx_v_self->M_applied);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9M_applied_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9M_applied_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9M_applied_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9M_applied_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_applied);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_applied));
  __pyx_v_self->M_applied = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.M_applied.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9M_applied_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9M_applied_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9M_applied_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9M_applied_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->M_applied);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_applied));
  __pyx_v_self->M_applied = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":232
 *       np.ndarray F_applied  # force applied and passed to Chrono
 *       np.ndarray M_applied  # moment applied and passed to Chrono
 *       np.ndarray F_applied_last             # <<<<<<<<<<<<<<
 *       np.ndarray M_applied_last
 *       np.ndarray F_Aij
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->F_applied_last));
  __pyx_r = ((PyObject *)__pyx_v_self->F_applied_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 232, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_applied_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_applied_last));
  __pyx_v_self->F_applied_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.F_applied_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->F_applied_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_applied_last));
  __pyx_v_self->F_applied_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":233
 *       np.ndarray M_applied  # moment applied and passed to Chrono
 *       np.ndarray F_applied_last
 *       np.ndarray M_applied_last             # <<<<<<<<<<<<<<
 *       np.ndarray F_Aij
 *       np.ndarray M_Aij
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->M_applied_last));
  __pyx_r = ((PyObject *)__pyx_v_self->M_applied_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 233, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_applied_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_applied_last));
  __pyx_v_self->M_applied_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.M_applied_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->M_applied_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_applied_last));
  __pyx_v_self->M_applied_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":234
 *       np.ndarray F_applied_last
 *       np.ndarray M_applied_last
 *       np.ndarray F_Aij             # <<<<<<<<<<<<<<
 *       np.ndarray M_Aij
 *       np.ndarray F_Aij_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5F_Aij___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5F_Aij___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->F_Aij));
  __pyx_r = ((PyObject *)__pyx_v_self->F_Aij);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 234, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_Aij);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_Aij));
  __pyx_v_self->F_Aij = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.F_Aij.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->F_Aij);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_Aij));
  __pyx_v_self->F_Aij = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":235
 *       np.ndarray M_applied_last
 *       np.ndarray F_Aij
 *       np.ndarray M_Aij             # <<<<<<<<<<<<<<
 *       np.ndarray F_Aij_last
 *       np.ndarray M_Aij_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5M_Aij___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5M_Aij___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->M_Aij));
  __pyx_r = ((PyObject *)__pyx_v_self->M_Aij);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 235, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_Aij);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_Aij));
  __pyx_v_self->M_Aij = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.M_Aij.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->M_Aij);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_Aij));
  __pyx_v_self->M_Aij = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":236
 *       np.ndarray F_Aij
 *       np.ndarray M_Aij
 *       np.ndarray F_Aij_last             # <<<<<<<<<<<<<<
 *       np.ndarray M_Aij_last
 *       np.ndarray acceleration
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->F_Aij_last));
  __pyx_r = ((PyObject *)__pyx_v_self->F_Aij_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->F_Aij_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_Aij_last));
  __pyx_v_self->F_Aij_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.F_Aij_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->F_Aij_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->F_Aij_last));
  __pyx_v_self->F_Aij_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":237
 *       np.ndarray M_Aij
 *       np.ndarray F_Aij_last
 *       np.ndarray M_Aij_last             # <<<<<<<<<<<<<<
 *       np.ndarray acceleration
 *       np.ndarray acceleration_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->M_Aij_last));
  __pyx_r = ((PyObject *)__pyx_v_self->M_Aij_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 237, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->M_Aij_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_Aij_last));
  __pyx_v_self->M_Aij_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.M_Aij_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->M_Aij_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->M_Aij_last));
  __pyx_v_self->M_Aij_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":238
 *       np.ndarray F_Aij_last
 *       np.ndarray M_Aij_last
 *       np.ndarray acceleration             # <<<<<<<<<<<<<<
 *       np.ndarray acceleration_last
 *       np.ndarray velocity
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12acceleration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12acceleration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12acceleration___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12acceleration___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->acceleration));
  __pyx_r = ((PyObject *)__pyx_v_self->acceleration);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12acceleration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12acceleration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12acceleration_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12acceleration_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 238, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->acceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->acceleration));
  __pyx_v_self->acceleration = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.acceleration.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12acceleration_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12acceleration_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12acceleration_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12acceleration_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->acceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->acceleration));
  __pyx_v_self->acceleration = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":239
 *       np.ndarray M_Aij_last
 *       np.ndarray acceleration
 *       np.ndarray acceleration_last             # <<<<<<<<<<<<<<
 *       np.ndarray velocity
 *       np.ndarray velocity_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->acceleration_last));
  __pyx_r = ((PyObject *)__pyx_v_self->acceleration_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->acceleration_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->acceleration_last));
  __pyx_v_self->acceleration_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.acceleration_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->acceleration_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->acceleration_last));
  __pyx_v_self->acceleration_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":240
 *       np.ndarray acceleration
 *       np.ndarray acceleration_last
 *       np.ndarray velocity             # <<<<<<<<<<<<<<
 *       np.ndarray velocity_last
 *       np.ndarray ang_acceleration_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8velocity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8velocity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8velocity___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8velocity___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->velocity));
  __pyx_r = ((PyObject *)__pyx_v_self->velocity);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8velocity_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8velocity_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->velocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->velocity));
  __pyx_v_self->velocity = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.velocity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8velocity_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8velocity_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8velocity_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_8velocity_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->velocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->velocity));
  __pyx_v_self->velocity = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":241
 *       np.ndarray acceleration_last
 *       np.ndarray velocity
 *       np.ndarray velocity_last             # <<<<<<<<<<<<<<
 *       np.ndarray ang_acceleration_last
 *       np.ndarray ang_acceleration
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13velocity_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13velocity_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->velocity_last));
  __pyx_r = ((PyObject *)__pyx_v_self->velocity_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->velocity_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->velocity_last));
  __pyx_v_self->velocity_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.velocity_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->velocity_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->velocity_last));
  __pyx_v_self->velocity_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":242
 *       np.ndarray velocity
 *       np.ndarray velocity_last
 *       np.ndarray ang_acceleration_last             # <<<<<<<<<<<<<<
 *       np.ndarray ang_acceleration
 *       np.ndarray ang_velocity_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ang_acceleration_last));
  __pyx_r = ((PyObject *)__pyx_v_self->ang_acceleration_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ang_acceleration_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_acceleration_last));
  __pyx_v_self->ang_acceleration_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.ang_acceleration_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ang_acceleration_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_acceleration_last));
  __pyx_v_self->ang_acceleration_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":243
 *       np.ndarray velocity_last
 *       np.ndarray ang_acceleration_last
 *       np.ndarray ang_acceleration             # <<<<<<<<<<<<<<
 *       np.ndarray ang_velocity_last
 *       np.ndarray ang_velocity
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ang_acceleration));
  __pyx_r = ((PyObject *)__pyx_v_self->ang_acceleration);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 243, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ang_acceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_acceleration));
  __pyx_v_self->ang_acceleration = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.ang_acceleration.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ang_acceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_acceleration));
  __pyx_v_self->ang_acceleration = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":244
 *       np.ndarray ang_acceleration_last
 *       np.ndarray ang_acceleration
 *       np.ndarray ang_velocity_last             # <<<<<<<<<<<<<<
 *       np.ndarray ang_velocity
 *       double ang_vel_norm
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ang_velocity_last));
  __pyx_r = ((PyObject *)__pyx_v_self->ang_velocity_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ang_velocity_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_velocity_last));
  __pyx_v_self->ang_velocity_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.ang_velocity_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ang_velocity_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_velocity_last));
  __pyx_v_self->ang_velocity_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":245
 *       np.ndarray ang_acceleration
 *       np.ndarray ang_velocity_last
 *       np.ndarray ang_velocity             # <<<<<<<<<<<<<<
 *       double ang_vel_norm
 *       double ang_vel_norm_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ang_velocity));
  __pyx_r = ((PyObject *)__pyx_v_self->ang_velocity);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 245, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ang_velocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_velocity));
  __pyx_v_self->ang_velocity = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.ang_velocity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ang_velocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang_velocity));
  __pyx_v_self->ang_velocity = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":246
 *       np.ndarray ang_velocity_last
 *       np.ndarray ang_velocity
 *       double ang_vel_norm             # <<<<<<<<<<<<<<
 *       double ang_vel_norm_last
 *       np.ndarray barycenter0
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ang_vel_norm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.ang_vel_norm.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L1_error)
  __pyx_v_self->ang_vel_norm = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.ang_vel_norm.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":247
 *       np.ndarray ang_velocity
 *       double ang_vel_norm
 *       double ang_vel_norm_last             # <<<<<<<<<<<<<<
 *       np.ndarray barycenter0
 *       np.ndarray rotation_init
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ang_vel_norm_last); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.ang_vel_norm_last.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L1_error)
  __pyx_v_self->ang_vel_norm_last = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.ang_vel_norm_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":248
 *       double ang_vel_norm
 *       double ang_vel_norm_last
 *       np.ndarray barycenter0             # <<<<<<<<<<<<<<
 *       np.ndarray rotation_init
 *       np.ndarray rotm
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11barycenter0___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11barycenter0___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->barycenter0));
  __pyx_r = ((PyObject *)__pyx_v_self->barycenter0);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->barycenter0);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->barycenter0));
  __pyx_v_self->barycenter0 = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.barycenter0.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->barycenter0);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->barycenter0));
  __pyx_v_self->barycenter0 = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":249
 *       double ang_vel_norm_last
 *       np.ndarray barycenter0
 *       np.ndarray rotation_init             # <<<<<<<<<<<<<<
 *       np.ndarray rotm
 *       np.ndarray rotm_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13rotation_init___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13rotation_init___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->rotation_init));
  __pyx_r = ((PyObject *)__pyx_v_self->rotation_init);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rotation_init);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotation_init));
  __pyx_v_self->rotation_init = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.rotation_init.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->rotation_init);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotation_init));
  __pyx_v_self->rotation_init = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":250
 *       np.ndarray barycenter0
 *       np.ndarray rotation_init
 *       np.ndarray rotm             # <<<<<<<<<<<<<<
 *       np.ndarray rotm_last
 *       np.ndarray rotq
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotm_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotm_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotm___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotm___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->rotm));
  __pyx_r = ((PyObject *)__pyx_v_self->rotm);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotm_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotm_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 250, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rotm);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotm));
  __pyx_v_self->rotm = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.rotm.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotm_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotm_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotm_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotm_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->rotm);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotm));
  __pyx_v_self->rotm = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":251
 *       np.ndarray rotation_init
 *       np.ndarray rotm
 *       np.ndarray rotm_last             # <<<<<<<<<<<<<<
 *       np.ndarray rotq
 *       np.ndarray rotq_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotm_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotm_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->rotm_last));
  __pyx_r = ((PyObject *)__pyx_v_self->rotm_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 251, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rotm_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotm_last));
  __pyx_v_self->rotm_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.rotm_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->rotm_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotm_last));
  __pyx_v_self->rotm_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":252
 *       np.ndarray rotm
 *       np.ndarray rotm_last
 *       np.ndarray rotq             # <<<<<<<<<<<<<<
 *       np.ndarray rotq_last
 *       np.ndarray adams_vel
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotq_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotq_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotq___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotq___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->rotq));
  __pyx_r = ((PyObject *)__pyx_v_self->rotq);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotq_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotq_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotq_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotq_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rotq);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotq));
  __pyx_v_self->rotq = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.rotq.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotq_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotq_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotq_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4rotq_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->rotq);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotq));
  __pyx_v_self->rotq = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":253
 *       np.ndarray rotm_last
 *       np.ndarray rotq
 *       np.ndarray rotq_last             # <<<<<<<<<<<<<<
 *       np.ndarray adams_vel
 *       string name
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotq_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotq_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->rotq_last));
  __pyx_r = ((PyObject *)__pyx_v_self->rotq_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rotq_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotq_last));
  __pyx_v_self->rotq_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.rotq_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->rotq_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rotq_last));
  __pyx_v_self->rotq_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":254
 *       np.ndarray rotq
 *       np.ndarray rotq_last
 *       np.ndarray adams_vel             # <<<<<<<<<<<<<<
 *       string name
 *       bool predicted
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9adams_vel___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9adams_vel___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->adams_vel));
  __pyx_r = ((PyObject *)__pyx_v_self->adams_vel);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 254, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->adams_vel);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->adams_vel));
  __pyx_v_self->adams_vel = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.adams_vel.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->adams_vel);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->adams_vel));
  __pyx_v_self->adams_vel = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":255
 *       np.ndarray rotq_last
 *       np.ndarray adams_vel
 *       string name             # <<<<<<<<<<<<<<
 *       bool predicted
 *       double dt_predict
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4name___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4name___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4name_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_4name_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_v_self->name = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":256
 *       np.ndarray adams_vel
 *       string name
 *       bool predicted             # <<<<<<<<<<<<<<
 *       double dt_predict
 *       np.ndarray h_predict  # predicted displacement
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9predicted_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9predicted_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9predicted___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9predicted___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->predicted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.predicted.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9predicted_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9predicted_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9predicted_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9predicted_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 256, __pyx_L1_error)
  __pyx_v_self->predicted = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.predicted.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":257
 *       string name
 *       bool predicted
 *       double dt_predict             # <<<<<<<<<<<<<<
 *       np.ndarray h_predict  # predicted displacement
 *       double h_ang_predict  # predicted angular displacement (angle)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10dt_predict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10dt_predict_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10dt_predict___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10dt_predict___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->dt_predict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.dt_predict.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10dt_predict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10dt_predict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10dt_predict_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_10dt_predict_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_v_self->dt_predict = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.dt_predict.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":258
 *       bool predicted
 *       double dt_predict
 *       np.ndarray h_predict  # predicted displacement             # <<<<<<<<<<<<<<
 *       double h_ang_predict  # predicted angular displacement (angle)
 *       np.ndarray h_ang_vel_predict  # predicted angular velocity
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9h_predict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9h_predict_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9h_predict___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9h_predict___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->h_predict));
  __pyx_r = ((PyObject *)__pyx_v_self->h_predict);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9h_predict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9h_predict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9h_predict_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9h_predict_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 258, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->h_predict);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_predict));
  __pyx_v_self->h_predict = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.h_predict.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9h_predict_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9h_predict_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9h_predict_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_9h_predict_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->h_predict);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_predict));
  __pyx_v_self->h_predict = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":259
 *       double dt_predict
 *       np.ndarray h_predict  # predicted displacement
 *       double h_ang_predict  # predicted angular displacement (angle)             # <<<<<<<<<<<<<<
 *       np.ndarray h_ang_vel_predict  # predicted angular velocity
 *       np.ndarray h_predict_last  # predicted displacement
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->h_ang_predict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.h_ang_predict.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 259, __pyx_L1_error)
  __pyx_v_self->h_ang_predict = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.h_ang_predict.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":260
 *       np.ndarray h_predict  # predicted displacement
 *       double h_ang_predict  # predicted angular displacement (angle)
 *       np.ndarray h_ang_vel_predict  # predicted angular velocity             # <<<<<<<<<<<<<<
 *       np.ndarray h_predict_last  # predicted displacement
 *       double h_ang_predict_last  # predicted angular displacement (angle)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->h_ang_vel_predict));
  __pyx_r = ((PyObject *)__pyx_v_self->h_ang_vel_predict);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->h_ang_vel_predict);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_ang_vel_predict));
  __pyx_v_self->h_ang_vel_predict = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.h_ang_vel_predict.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->h_ang_vel_predict);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_ang_vel_predict));
  __pyx_v_self->h_ang_vel_predict = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":261
 *       double h_ang_predict  # predicted angular displacement (angle)
 *       np.ndarray h_ang_vel_predict  # predicted angular velocity
 *       np.ndarray h_predict_last  # predicted displacement             # <<<<<<<<<<<<<<
 *       double h_ang_predict_last  # predicted angular displacement (angle)
 *       np.ndarray h_ang_vel_predict_last  # predicted angular velocity
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->h_predict_last));
  __pyx_r = ((PyObject *)__pyx_v_self->h_predict_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 261, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->h_predict_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_predict_last));
  __pyx_v_self->h_predict_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.h_predict_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->h_predict_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_predict_last));
  __pyx_v_self->h_predict_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":262
 *       np.ndarray h_ang_vel_predict  # predicted angular velocity
 *       np.ndarray h_predict_last  # predicted displacement
 *       double h_ang_predict_last  # predicted angular displacement (angle)             # <<<<<<<<<<<<<<
 *       np.ndarray h_ang_vel_predict_last  # predicted angular velocity
 *       np.ndarray Aij  # added mass array
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->h_ang_predict_last); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.h_ang_predict_last.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
  __pyx_v_self->h_ang_predict_last = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.h_ang_predict_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":263
 *       np.ndarray h_predict_last  # predicted displacement
 *       double h_ang_predict_last  # predicted angular displacement (angle)
 *       np.ndarray h_ang_vel_predict_last  # predicted angular velocity             # <<<<<<<<<<<<<<
 *       np.ndarray Aij  # added mass array
 *       bool applyAddedMass  # will apply added mass if True (default)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->h_ang_vel_predict_last));
  __pyx_r = ((PyObject *)__pyx_v_self->h_ang_vel_predict_last);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 263, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->h_ang_vel_predict_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_ang_vel_predict_last));
  __pyx_v_self->h_ang_vel_predict_last = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.h_ang_vel_predict_last.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->h_ang_vel_predict_last);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h_ang_vel_predict_last));
  __pyx_v_self->h_ang_vel_predict_last = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":264
 *       double h_ang_predict_last  # predicted angular displacement (angle)
 *       np.ndarray h_ang_vel_predict_last  # predicted angular velocity
 *       np.ndarray Aij  # added mass array             # <<<<<<<<<<<<<<
 *       bool applyAddedMass  # will apply added mass if True (default)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3Aij_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3Aij_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_3Aij___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_3Aij___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Aij));
  __pyx_r = ((PyObject *)__pyx_v_self->Aij);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3Aij_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3Aij_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_3Aij_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_3Aij_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Aij);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Aij));
  __pyx_v_self->Aij = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.Aij.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3Aij_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3Aij_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_3Aij_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_3Aij_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Aij);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Aij));
  __pyx_v_self->Aij = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":265
 *       np.ndarray h_ang_vel_predict_last  # predicted angular velocity
 *       np.ndarray Aij  # added mass array
 *       bool applyAddedMass  # will apply added mass if True (default)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->applyAddedMass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.applyAddedMass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_v_self->applyAddedMass = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChBody.applyAddedMass.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1412
 *         int tCount
 * 
 *     def __cinit__(self, np.ndarray gravity, int nd=3, dt_init=0., sampleRate=0):             # <<<<<<<<<<<<<<
 *         self.thisptr = newSystem(<double*> gravity.data)
 *         self.subcomponents = []
 */

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_gravity = 0;
  int __pyx_v_nd;
  PyObject *__pyx_v_dt_init = 0;
  PyObject *__pyx_v_sampleRate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gravity,&__pyx_n_s_nd,&__pyx_n_s_dt_init,&__pyx_n_s_sampleRate,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)__pyx_float_0_);
    values[3] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gravity)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nd);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt_init);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sampleRate);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1412, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gravity = ((PyArrayObject *)values[0]);
    if (values[1]) {
      __pyx_v_nd = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_nd == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1412, __pyx_L3_error)
    } else {
      __pyx_v_nd = ((int)3);
    }
    __pyx_v_dt_init = values[2];
    __pyx_v_sampleRate = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1412, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gravity), __pyx_ptype_5numpy_ndarray, 1, "gravity", 0))) __PYX_ERR(0, 1412, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem___cinit__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), __pyx_v_gravity, __pyx_v_nd, __pyx_v_dt_init, __pyx_v_sampleRate);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyArrayObject *__pyx_v_gravity, int __pyx_v_nd, PyObject *__pyx_v_dt_init, PyObject *__pyx_v_sampleRate) {
  PyObject *__pyx_v_comm = NULL;
  int __pyx_v_parallel_mode;
  long __pyx_v_chrono_processor;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mbd/ChRigidBody.pyx":1413
 * 
 *     def __cinit__(self, np.ndarray gravity, int nd=3, dt_init=0., sampleRate=0):
 *         self.thisptr = newSystem(<double*> gravity.data)             # <<<<<<<<<<<<<<
 *         self.subcomponents = []
 *         self.dt_init = dt_init
 */
  __pyx_v_self->thisptr = newSystem(((double *)__pyx_v_gravity->data));

  /* "mbd/ChRigidBody.pyx":1414
 *     def __cinit__(self, np.ndarray gravity, int nd=3, dt_init=0., sampleRate=0):
 *         self.thisptr = newSystem(<double*> gravity.data)
 *         self.subcomponents = []             # <<<<<<<<<<<<<<
 *         self.dt_init = dt_init
 *         self.model = None
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->subcomponents);
  __Pyx_DECREF(__pyx_v_self->subcomponents);
  __pyx_v_self->subcomponents = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1415
 *         self.thisptr = newSystem(<double*> gravity.data)
 *         self.subcomponents = []
 *         self.dt_init = dt_init             # <<<<<<<<<<<<<<
 *         self.model = None
 *         self.nd = nd
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_dt_init); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1415, __pyx_L1_error)
  __pyx_v_self->dt_init = __pyx_t_2;

  /* "mbd/ChRigidBody.pyx":1416
 *         self.subcomponents = []
 *         self.dt_init = dt_init
 *         self.model = None             # <<<<<<<<<<<<<<
 *         self.nd = nd
 *         self.build_kdtree = True
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = Py_None;

  /* "mbd/ChRigidBody.pyx":1417
 *         self.dt_init = dt_init
 *         self.model = None
 *         self.nd = nd             # <<<<<<<<<<<<<<
 *         self.build_kdtree = True
 *         self.dist_search = True
 */
  __pyx_v_self->nd = __pyx_v_nd;

  /* "mbd/ChRigidBody.pyx":1418
 *         self.model = None
 *         self.nd = nd
 *         self.build_kdtree = True             # <<<<<<<<<<<<<<
 *         self.dist_search = True
 *         comm = Comm.get().comm.tompi4py()
 */
  __pyx_v_self->build_kdtree = 1;

  /* "mbd/ChRigidBody.pyx":1419
 *         self.nd = nd
 *         self.build_kdtree = True
 *         self.dist_search = True             # <<<<<<<<<<<<<<
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.Get_size() > 1:
 */
  __pyx_v_self->dist_search = 1;

  /* "mbd/ChRigidBody.pyx":1420
 *         self.build_kdtree = True
 *         self.dist_search = True
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         if comm.Get_size() > 1:
 *             parallel_mode = True
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1420, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1420, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_comm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1420, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1420, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_comm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1421
 *         self.dist_search = True
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.Get_size() > 1:             # <<<<<<<<<<<<<<
 *             parallel_mode = True
 *             chrono_processor = 1
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_Get_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1421, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "mbd/ChRigidBody.pyx":1422
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.Get_size() > 1:
 *             parallel_mode = True             # <<<<<<<<<<<<<<
 *             chrono_processor = 1
 *         else:
 */
    __pyx_v_parallel_mode = 1;

    /* "mbd/ChRigidBody.pyx":1423
 *         if comm.Get_size() > 1:
 *             parallel_mode = True
 *             chrono_processor = 1             # <<<<<<<<<<<<<<
 *         else:
 *             parallel_mode = False
 */
    __pyx_v_chrono_processor = 1;

    /* "mbd/ChRigidBody.pyx":1421
 *         self.dist_search = True
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.Get_size() > 1:             # <<<<<<<<<<<<<<
 *             parallel_mode = True
 *             chrono_processor = 1
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":1425
 *             chrono_processor = 1
 *         else:
 *             parallel_mode = False             # <<<<<<<<<<<<<<
 *             chrono_processor = 0
 *         self.parallel_mode = parallel_mode
 */
  /*else*/ {
    __pyx_v_parallel_mode = 0;

    /* "mbd/ChRigidBody.pyx":1426
 *         else:
 *             parallel_mode = False
 *             chrono_processor = 0             # <<<<<<<<<<<<<<
 *         self.parallel_mode = parallel_mode
 *         self.chrono_processor = chrono_processor
 */
    __pyx_v_chrono_processor = 0;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":1427
 *             parallel_mode = False
 *             chrono_processor = 0
 *         self.parallel_mode = parallel_mode             # <<<<<<<<<<<<<<
 *         self.chrono_processor = chrono_processor
 *         self.min_nb_steps = 1  # minimum number of chrono substeps
 */
  __pyx_v_self->parallel_mode = __pyx_v_parallel_mode;

  /* "mbd/ChRigidBody.pyx":1428
 *             chrono_processor = 0
 *         self.parallel_mode = parallel_mode
 *         self.chrono_processor = chrono_processor             # <<<<<<<<<<<<<<
 *         self.min_nb_steps = 1  # minimum number of chrono substeps
 *         self.proteus_dt = 0.
 */
  __pyx_v_self->chrono_processor = __pyx_v_chrono_processor;

  /* "mbd/ChRigidBody.pyx":1429
 *         self.parallel_mode = parallel_mode
 *         self.chrono_processor = chrono_processor
 *         self.min_nb_steps = 1  # minimum number of chrono substeps             # <<<<<<<<<<<<<<
 *         self.proteus_dt = 0.
 *         self.first_step = True  # just to know if first step
 */
  __pyx_v_self->min_nb_steps = 1;

  /* "mbd/ChRigidBody.pyx":1430
 *         self.chrono_processor = chrono_processor
 *         self.min_nb_steps = 1  # minimum number of chrono substeps
 *         self.proteus_dt = 0.             # <<<<<<<<<<<<<<
 *         self.first_step = True  # just to know if first step
 *         self.setCouplingScheme("CSS")
 */
  __pyx_v_self->proteus_dt = 0.;

  /* "mbd/ChRigidBody.pyx":1431
 *         self.min_nb_steps = 1  # minimum number of chrono substeps
 *         self.proteus_dt = 0.
 *         self.first_step = True  # just to know if first step             # <<<<<<<<<<<<<<
 *         self.setCouplingScheme("CSS")
 *         self.dt_fluid = 0
 */
  __pyx_v_self->first_step = 1;

  /* "mbd/ChRigidBody.pyx":1432
 *         self.proteus_dt = 0.
 *         self.first_step = True  # just to know if first step
 *         self.setCouplingScheme("CSS")             # <<<<<<<<<<<<<<
 *         self.dt_fluid = 0
 *         self.dt_fluid_next = 0
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setCouplingScheme); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1433
 *         self.first_step = True  # just to know if first step
 *         self.setCouplingScheme("CSS")
 *         self.dt_fluid = 0             # <<<<<<<<<<<<<<
 *         self.dt_fluid_next = 0
 *         self.proteus_dt_next = 0.
 */
  __pyx_v_self->dt_fluid = 0.0;

  /* "mbd/ChRigidBody.pyx":1434
 *         self.setCouplingScheme("CSS")
 *         self.dt_fluid = 0
 *         self.dt_fluid_next = 0             # <<<<<<<<<<<<<<
 *         self.proteus_dt_next = 0.
 *         self.dt = 0.
 */
  __pyx_v_self->dt_fluid_next = 0.0;

  /* "mbd/ChRigidBody.pyx":1435
 *         self.dt_fluid = 0
 *         self.dt_fluid_next = 0
 *         self.proteus_dt_next = 0.             # <<<<<<<<<<<<<<
 *         self.dt = 0.
 *         self.step_nb = 0
 */
  __pyx_v_self->proteus_dt_next = 0.;

  /* "mbd/ChRigidBody.pyx":1436
 *         self.dt_fluid_next = 0
 *         self.proteus_dt_next = 0.
 *         self.dt = 0.             # <<<<<<<<<<<<<<
 *         self.step_nb = 0
 *         self.step_start = 0
 */
  __pyx_v_self->dt = 0.;

  /* "mbd/ChRigidBody.pyx":1437
 *         self.proteus_dt_next = 0.
 *         self.dt = 0.
 *         self.step_nb = 0             # <<<<<<<<<<<<<<
 *         self.step_start = 0
 *         self.sampleRate = sampleRate
 */
  __pyx_v_self->step_nb = 0;

  /* "mbd/ChRigidBody.pyx":1438
 *         self.dt = 0.
 *         self.step_nb = 0
 *         self.step_start = 0             # <<<<<<<<<<<<<<
 *         self.sampleRate = sampleRate
 *         self.next_sample = 0.
 */
  __pyx_v_self->step_start = 0;

  /* "mbd/ChRigidBody.pyx":1439
 *         self.step_nb = 0
 *         self.step_start = 0
 *         self.sampleRate = sampleRate             # <<<<<<<<<<<<<<
 *         self.next_sample = 0.
 *         self.record_values = True
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_sampleRate); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1439, __pyx_L1_error)
  __pyx_v_self->sampleRate = __pyx_t_2;

  /* "mbd/ChRigidBody.pyx":1440
 *         self.step_start = 0
 *         self.sampleRate = sampleRate
 *         self.next_sample = 0.             # <<<<<<<<<<<<<<
 *         self.record_values = True
 *         self.t = 0.
 */
  __pyx_v_self->next_sample = 0.;

  /* "mbd/ChRigidBody.pyx":1441
 *         self.sampleRate = sampleRate
 *         self.next_sample = 0.
 *         self.record_values = True             # <<<<<<<<<<<<<<
 *         self.t = 0.
 *         self.chrono_dt = 1.
 */
  __pyx_v_self->record_values = 1;

  /* "mbd/ChRigidBody.pyx":1442
 *         self.next_sample = 0.
 *         self.record_values = True
 *         self.t = 0.             # <<<<<<<<<<<<<<
 *         self.chrono_dt = 1.
 *         self.ProtChAddedMass = ProtChAddedMass(self)
 */
  __pyx_v_self->t = 0.;

  /* "mbd/ChRigidBody.pyx":1443
 *         self.record_values = True
 *         self.t = 0.
 *         self.chrono_dt = 1.             # <<<<<<<<<<<<<<
 *         self.ProtChAddedMass = ProtChAddedMass(self)
 *         self.tCount = 0
 */
  __pyx_v_self->chrono_dt = 1.;

  /* "mbd/ChRigidBody.pyx":1444
 *         self.t = 0.
 *         self.chrono_dt = 1.
 *         self.ProtChAddedMass = ProtChAddedMass(self)             # <<<<<<<<<<<<<<
 *         self.tCount = 0
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3mbd_11ChRigidBody_ProtChAddedMass), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->ProtChAddedMass);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChAddedMass));
  __pyx_v_self->ProtChAddedMass = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":1445
 *         self.chrono_dt = 1.
 *         self.ProtChAddedMass = ProtChAddedMass(self)
 *         self.tCount = 0             # <<<<<<<<<<<<<<
 * 
 *     def GetChTime(self):
 */
  __pyx_v_self->tCount = 0;

  /* "mbd/ChRigidBody.pyx":1412
 *         int tCount
 * 
 *     def __cinit__(self, np.ndarray gravity, int nd=3, dt_init=0., sampleRate=0):             # <<<<<<<<<<<<<<
 *         self.thisptr = newSystem(<double*> gravity.data)
 *         self.subcomponents = []
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1447
 *         self.tCount = 0
 * 
 *     def GetChTime(self):             # <<<<<<<<<<<<<<
 *         """Gives time of Chrono system simulation
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_3GetChTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_2GetChTime[] = "Gives time of Chrono system simulation\n\n        Returns\n        -------\n        time: double\n            time of chrono system\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_3GetChTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetChTime (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_2GetChTime(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_2GetChTime(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  double __pyx_v_time;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetChTime", 0);

  /* "mbd/ChRigidBody.pyx":1455
 *             time of chrono system
 *         """
 *         time = self.thisptr.system.GetChTime()             # <<<<<<<<<<<<<<
 *         return time
 * 
 */
  __pyx_v_time = __pyx_v_self->thisptr->system.GetChTime();

  /* "mbd/ChRigidBody.pyx":1456
 *         """
 *         time = self.thisptr.system.GetChTime()
 *         return time             # <<<<<<<<<<<<<<
 * 
 *     def setCouplingScheme(self, string scheme, string prediction='backwardEuler'):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":1447
 *         self.tCount = 0
 * 
 *     def GetChTime(self):             # <<<<<<<<<<<<<<
 *         """Gives time of Chrono system simulation
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.GetChTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1458
 *         return time
 * 
 *     def setCouplingScheme(self, string scheme, string prediction='backwardEuler'):             # <<<<<<<<<<<<<<
 *         assert scheme == "CSS" or scheme == "ISS", "Coupling scheme requested unknown"
 *         assert prediction == "backwardEuler" or prediction == "forwardEuler" or prediction == "implicitOrder2", "Prediction requested unknown"
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5setCouplingScheme(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5setCouplingScheme(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_scheme;
  std::string __pyx_v_prediction;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCouplingScheme (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_scheme,&__pyx_n_s_prediction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_scheme)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_prediction);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setCouplingScheme") < 0)) __PYX_ERR(0, 1458, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_scheme = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1458, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_prediction = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1458, __pyx_L3_error)
    } else {
      __pyx_v_prediction = __pyx_k__84;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setCouplingScheme", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1458, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.setCouplingScheme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_4setCouplingScheme(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), __pyx_v_scheme, __pyx_v_prediction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_4setCouplingScheme(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, std::string __pyx_v_scheme, std::string __pyx_v_prediction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("setCouplingScheme", 0);

  /* "mbd/ChRigidBody.pyx":1459
 * 
 *     def setCouplingScheme(self, string scheme, string prediction='backwardEuler'):
 *         assert scheme == "CSS" or scheme == "ISS", "Coupling scheme requested unknown"             # <<<<<<<<<<<<<<
 *         assert prediction == "backwardEuler" or prediction == "forwardEuler" or prediction == "implicitOrder2", "Prediction requested unknown"
 *         self.scheme = scheme
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((__pyx_v_scheme == ((char *)"CSS")) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_scheme == ((char *)"ISS")) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Coupling_scheme_requested_unknow);
      __PYX_ERR(0, 1459, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":1460
 *     def setCouplingScheme(self, string scheme, string prediction='backwardEuler'):
 *         assert scheme == "CSS" or scheme == "ISS", "Coupling scheme requested unknown"
 *         assert prediction == "backwardEuler" or prediction == "forwardEuler" or prediction == "implicitOrder2", "Prediction requested unknown"             # <<<<<<<<<<<<<<
 *         self.scheme = scheme
 *         self.prediction = prediction
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((__pyx_v_prediction == ((char *)"backwardEuler")) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_prediction == ((char *)"forwardEuler")) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_prediction == ((char *)"implicitOrder2")) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Prediction_requested_unknown);
      __PYX_ERR(0, 1460, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":1461
 *         assert scheme == "CSS" or scheme == "ISS", "Coupling scheme requested unknown"
 *         assert prediction == "backwardEuler" or prediction == "forwardEuler" or prediction == "implicitOrder2", "Prediction requested unknown"
 *         self.scheme = scheme             # <<<<<<<<<<<<<<
 *         self.prediction = prediction
 * 
 */
  __pyx_v_self->scheme = __pyx_v_scheme;

  /* "mbd/ChRigidBody.pyx":1462
 *         assert prediction == "backwardEuler" or prediction == "forwardEuler" or prediction == "implicitOrder2", "Prediction requested unknown"
 *         self.scheme = scheme
 *         self.prediction = prediction             # <<<<<<<<<<<<<<
 * 
 *     def attachModel(self, model, ar):
 */
  __pyx_v_self->prediction = __pyx_v_prediction;

  /* "mbd/ChRigidBody.pyx":1458
 *         return time
 * 
 *     def setCouplingScheme(self, string scheme, string prediction='backwardEuler'):             # <<<<<<<<<<<<<<
 *         assert scheme == "CSS" or scheme == "ISS", "Coupling scheme requested unknown"
 *         assert prediction == "backwardEuler" or prediction == "forwardEuler" or prediction == "implicitOrder2", "Prediction requested unknown"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.setCouplingScheme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1464
 *         self.prediction = prediction
 * 
 *     def attachModel(self, model, ar):             # <<<<<<<<<<<<<<
 *         """Attaches Proteus model to auxiliary variable
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7attachModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_6attachModel[] = "Attaches Proteus model to auxiliary variable\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7attachModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_model = 0;
  CYTHON_UNUSED PyObject *__pyx_v_ar = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachModel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_model,&__pyx_n_s_ar,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_model)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ar)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("attachModel", 1, 2, 2, 1); __PYX_ERR(0, 1464, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "attachModel") < 0)) __PYX_ERR(0, 1464, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_model = values[0];
    __pyx_v_ar = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("attachModel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1464, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.attachModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6attachModel(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), __pyx_v_model, __pyx_v_ar);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6attachModel(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_model, CYTHON_UNUSED PyObject *__pyx_v_ar) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachModel", 0);

  /* "mbd/ChRigidBody.pyx":1467
 *         """Attaches Proteus model to auxiliary variable
 *         """
 *         self.model = model             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(__pyx_v_model);
  __Pyx_GIVEREF(__pyx_v_model);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = __pyx_v_model;

  /* "mbd/ChRigidBody.pyx":1468
 *         """
 *         self.model = model
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def attachAuxiliaryVariables(self,avDict):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":1464
 *         self.prediction = prediction
 * 
 *     def attachModel(self, model, ar):             # <<<<<<<<<<<<<<
 *         """Attaches Proteus model to auxiliary variable
 *         """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1470
 *         return self
 * 
 *     def attachAuxiliaryVariables(self,avDict):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_9attachAuxiliaryVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_avDict); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_9attachAuxiliaryVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_avDict) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachAuxiliaryVariables (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_8attachAuxiliaryVariables(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_avDict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_8attachAuxiliaryVariables(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_avDict) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachAuxiliaryVariables", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1473
 *         pass
 * 
 *     def setMinimumSubsteps(self, int nb):             # <<<<<<<<<<<<<<
 *         """Sets the minimum nb of chrono substeps per proteus step
 *         if prot_dt=0.001 and ch_dt=0.002, there will be <nb>
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11setMinimumSubsteps(PyObject *__pyx_v_self, PyObject *__pyx_arg_nb); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_10setMinimumSubsteps[] = "Sets the minimum nb of chrono substeps per proteus step\n        if prot_dt=0.001 and ch_dt=0.002, there will be <nb>\n        substeps of chrono instead of just 1.\n\n        Parameters\n        ----------\n        nb: int\n            Minimum number of chrono substeps.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11setMinimumSubsteps(PyObject *__pyx_v_self, PyObject *__pyx_arg_nb) {
  int __pyx_v_nb;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMinimumSubsteps (wrapper)", 0);
  assert(__pyx_arg_nb); {
    __pyx_v_nb = __Pyx_PyInt_As_int(__pyx_arg_nb); if (unlikely((__pyx_v_nb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1473, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.setMinimumSubsteps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10setMinimumSubsteps(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((int)__pyx_v_nb));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10setMinimumSubsteps(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, int __pyx_v_nb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMinimumSubsteps", 0);

  /* "mbd/ChRigidBody.pyx":1483
 *             Minimum number of chrono substeps.
 *         """
 *         self.min_nb_steps = nb             # <<<<<<<<<<<<<<
 * 
 *     def step(self, dt):
 */
  __pyx_v_self->min_nb_steps = __pyx_v_nb;

  /* "mbd/ChRigidBody.pyx":1473
 *         pass
 * 
 *     def setMinimumSubsteps(self, int nb):             # <<<<<<<<<<<<<<
 *         """Sets the minimum nb of chrono substeps per proteus step
 *         if prot_dt=0.001 and ch_dt=0.002, there will be <nb>
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1485
 *         self.min_nb_steps = nb
 * 
 *     def step(self, dt):             # <<<<<<<<<<<<<<
 *         self.dt_fluid_last = self.dt_fluid
 *         self.dt_fluid = dt
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13step(PyObject *__pyx_v_self, PyObject *__pyx_v_dt); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13step(PyObject *__pyx_v_self, PyObject *__pyx_v_dt) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_12step(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_dt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_12step(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_dt) {
  PyObject *__pyx_v_nb_steps = NULL;
  PyObject *__pyx_v_comm = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_dt_substep = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  __Pyx_RefNannySetupContext("step", 0);

  /* "mbd/ChRigidBody.pyx":1486
 * 
 *     def step(self, dt):
 *         self.dt_fluid_last = self.dt_fluid             # <<<<<<<<<<<<<<
 *         self.dt_fluid = dt
 *         self.dt_fluid_next = self.proteus_dt_next
 */
  __pyx_t_1 = __pyx_v_self->dt_fluid;
  __pyx_v_self->dt_fluid_last = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":1487
 *     def step(self, dt):
 *         self.dt_fluid_last = self.dt_fluid
 *         self.dt_fluid = dt             # <<<<<<<<<<<<<<
 *         self.dt_fluid_next = self.proteus_dt_next
 *         self.dt_last = self.dt
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1487, __pyx_L1_error)
  __pyx_v_self->dt_fluid = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":1488
 *         self.dt_fluid_last = self.dt_fluid
 *         self.dt_fluid = dt
 *         self.dt_fluid_next = self.proteus_dt_next             # <<<<<<<<<<<<<<
 *         self.dt_last = self.dt
 *         if self.scheme == "ISS":
 */
  __pyx_t_1 = __pyx_v_self->proteus_dt_next;
  __pyx_v_self->dt_fluid_next = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":1489
 *         self.dt_fluid = dt
 *         self.dt_fluid_next = self.proteus_dt_next
 *         self.dt_last = self.dt             # <<<<<<<<<<<<<<
 *         if self.scheme == "ISS":
 *             self.dt = (self.dt_fluid+self.dt_fluid_last)/2.
 */
  __pyx_t_1 = __pyx_v_self->dt;
  __pyx_v_self->dt_last = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":1490
 *         self.dt_fluid_next = self.proteus_dt_next
 *         self.dt_last = self.dt
 *         if self.scheme == "ISS":             # <<<<<<<<<<<<<<
 *             self.dt = (self.dt_fluid+self.dt_fluid_last)/2.
 *         elif self.scheme == "CSS":
 */
  __pyx_t_2 = ((__pyx_v_self->scheme == ((char *)"ISS")) != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1491
 *         self.dt_last = self.dt
 *         if self.scheme == "ISS":
 *             self.dt = (self.dt_fluid+self.dt_fluid_last)/2.             # <<<<<<<<<<<<<<
 *         elif self.scheme == "CSS":
 *             self.dt = dt
 */
    __pyx_v_self->dt = ((__pyx_v_self->dt_fluid + __pyx_v_self->dt_fluid_last) / 2.);

    /* "mbd/ChRigidBody.pyx":1490
 *         self.dt_fluid_next = self.proteus_dt_next
 *         self.dt_last = self.dt
 *         if self.scheme == "ISS":             # <<<<<<<<<<<<<<
 *             self.dt = (self.dt_fluid+self.dt_fluid_last)/2.
 *         elif self.scheme == "CSS":
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":1492
 *         if self.scheme == "ISS":
 *             self.dt = (self.dt_fluid+self.dt_fluid_last)/2.
 *         elif self.scheme == "CSS":             # <<<<<<<<<<<<<<
 *             self.dt = dt
 *         # calculate number of time steps
 */
  __pyx_t_2 = ((__pyx_v_self->scheme == ((char *)"CSS")) != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1493
 *             self.dt = (self.dt_fluid+self.dt_fluid_last)/2.
 *         elif self.scheme == "CSS":
 *             self.dt = dt             # <<<<<<<<<<<<<<
 *         # calculate number of time steps
 *         nb_steps = max(int(dt/self.chrono_dt), 1)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1493, __pyx_L1_error)
    __pyx_v_self->dt = __pyx_t_1;

    /* "mbd/ChRigidBody.pyx":1492
 *         if self.scheme == "ISS":
 *             self.dt = (self.dt_fluid+self.dt_fluid_last)/2.
 *         elif self.scheme == "CSS":             # <<<<<<<<<<<<<<
 *             self.dt = dt
 *         # calculate number of time steps
 */
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":1495
 *             self.dt = dt
 *         # calculate number of time steps
 *         nb_steps = max(int(dt/self.chrono_dt), 1)             # <<<<<<<<<<<<<<
 *         if nb_steps < self.min_nb_steps:
 *             nb_steps = self.min_nb_steps
 */
  __pyx_t_3 = 1;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->chrono_dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_dt, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_2) {
    __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __pyx_t_7;
    __pyx_t_7 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = __pyx_t_4;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_t_5;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_nb_steps = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1496
 *         # calculate number of time steps
 *         nb_steps = max(int(dt/self.chrono_dt), 1)
 *         if nb_steps < self.min_nb_steps:             # <<<<<<<<<<<<<<
 *             nb_steps = self.min_nb_steps
 *         # solve Chrono system
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->min_nb_steps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_nb_steps, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1497
 *         nb_steps = max(int(dt/self.chrono_dt), 1)
 *         if nb_steps < self.min_nb_steps:
 *             nb_steps = self.min_nb_steps             # <<<<<<<<<<<<<<
 *         # solve Chrono system
 *         self.step_nb += 1
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->min_nb_steps); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_nb_steps, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":1496
 *         # calculate number of time steps
 *         nb_steps = max(int(dt/self.chrono_dt), 1)
 *         if nb_steps < self.min_nb_steps:             # <<<<<<<<<<<<<<
 *             nb_steps = self.min_nb_steps
 *         # solve Chrono system
 */
  }

  /* "mbd/ChRigidBody.pyx":1499
 *             nb_steps = self.min_nb_steps
 *         # solve Chrono system
 *         self.step_nb += 1             # <<<<<<<<<<<<<<
 *         # self.thisptr.system.setChTime()
 *         comm = Comm.get().comm.tompi4py()
 */
  __pyx_v_self->step_nb = (__pyx_v_self->step_nb + 1);

  /* "mbd/ChRigidBody.pyx":1501
 *         self.step_nb += 1
 *         # self.thisptr.system.setChTime()
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         t = comm.bcast(self.thisptr.system.GetChTime(), self.chrono_processor)
 *         Profiling.logEvent('Solving Chrono system from t='
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1501, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1501, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_comm); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1501, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1501, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_comm = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":1502
 *         # self.thisptr.system.setChTime()
 *         comm = Comm.get().comm.tompi4py()
 *         t = comm.bcast(self.thisptr.system.GetChTime(), self.chrono_processor)             # <<<<<<<<<<<<<<
 *         Profiling.logEvent('Solving Chrono system from t='
 *                         +str(t)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->thisptr->system.GetChTime()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->chrono_processor); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1502, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1502, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_t = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":1503
 *         comm = Comm.get().comm.tompi4py()
 *         t = comm.bcast(self.thisptr.system.GetChTime(), self.chrono_processor)
 *         Profiling.logEvent('Solving Chrono system from t='             # <<<<<<<<<<<<<<
 *                         +str(t)
 *                         +' with dt='+str(self.dt)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1504
 *         t = comm.bcast(self.thisptr.system.GetChTime(), self.chrono_processor)
 *         Profiling.logEvent('Solving Chrono system from t='
 *                         +str(t)             # <<<<<<<<<<<<<<
 *                         +' with dt='+str(self.dt)
 *                         +'('+str(nb_steps)+' substeps)')
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_t);
  __Pyx_GIVEREF(__pyx_v_t);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_t);
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Solving_Chrono_system_from_t, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "mbd/ChRigidBody.pyx":1505
 *         Profiling.logEvent('Solving Chrono system from t='
 *                         +str(t)
 *                         +' with dt='+str(self.dt)             # <<<<<<<<<<<<<<
 *                         +'('+str(nb_steps)+' substeps)')
 *         if comm.rank == self.chrono_processor and dt > 0:
 */
  __pyx_t_7 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_with_dt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1506
 *                         +str(t)
 *                         +' with dt='+str(self.dt)
 *                         +'('+str(nb_steps)+' substeps)')             # <<<<<<<<<<<<<<
 *         if comm.rank == self.chrono_processor and dt > 0:
 *             dt_substep = self.dt/nb_steps
 */
  __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_kp_s__85); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_nb_steps);
  __Pyx_GIVEREF(__pyx_v_nb_steps);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_nb_steps);
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_substeps); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1503, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_7};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1503, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_7};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1503, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":1507
 *                         +' with dt='+str(self.dt)
 *                         +'('+str(nb_steps)+' substeps)')
 *         if comm.rank == self.chrono_processor and dt > 0:             # <<<<<<<<<<<<<<
 *             dt_substep = self.dt/nb_steps
 *             for i in range(nb_steps):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->chrono_processor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_11) {
  } else {
    __pyx_t_2 = __pyx_t_11;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_dt, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __pyx_t_11;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1508
 *                         +'('+str(nb_steps)+' substeps)')
 *         if comm.rank == self.chrono_processor and dt > 0:
 *             dt_substep = self.dt/nb_steps             # <<<<<<<<<<<<<<
 *             for i in range(nb_steps):
 *                 self.thisptr.step(<double> dt_substep, 1)
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_nb_steps); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_dt_substep = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "mbd/ChRigidBody.pyx":1509
 *         if comm.rank == self.chrono_processor and dt > 0:
 *             dt_substep = self.dt/nb_steps
 *             for i in range(nb_steps):             # <<<<<<<<<<<<<<
 *                 self.thisptr.step(<double> dt_substep, 1)
 *                 # tri: hack to update forces on cables
 */
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_v_nb_steps);
    __Pyx_GIVEREF(__pyx_v_nb_steps);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_nb_steps);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_10 = __pyx_t_4; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1509, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1509, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_10))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1509, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1509, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1509, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1509, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_13(__pyx_t_10);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1509, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":1510
 *             dt_substep = self.dt/nb_steps
 *             for i in range(nb_steps):
 *                 self.thisptr.step(<double> dt_substep, 1)             # <<<<<<<<<<<<<<
 *                 # tri: hack to update forces on cables
 *                 for s in self.subcomponents:
 */
      __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dt_substep); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1510, __pyx_L1_error)
      __pyx_v_self->thisptr->step(((double)__pyx_t_1), 1);

      /* "mbd/ChRigidBody.pyx":1512
 *                 self.thisptr.step(<double> dt_substep, 1)
 *                 # tri: hack to update forces on cables
 *                 for s in self.subcomponents:             # <<<<<<<<<<<<<<
 *                     if type(s) is ProtChMoorings:
 *                         # update forces keeping same fluid vel/acc
 */
      if (likely(PyList_CheckExact(__pyx_v_self->subcomponents)) || PyTuple_CheckExact(__pyx_v_self->subcomponents)) {
        __pyx_t_4 = __pyx_v_self->subcomponents; __Pyx_INCREF(__pyx_t_4); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_self->subcomponents); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1512, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1512, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_5); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1512, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1512, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_5); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1512, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1512, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_15(__pyx_t_4);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1512, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "mbd/ChRigidBody.pyx":1513
 *                 # tri: hack to update forces on cables
 *                 for s in self.subcomponents:
 *                     if type(s) is ProtChMoorings:             # <<<<<<<<<<<<<<
 *                         # update forces keeping same fluid vel/acc
 *                         s.updateForces()
 */
        __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_s)) == ((PyObject *)__pyx_ptype_3mbd_11ChRigidBody_ProtChMoorings));
        __pyx_t_11 = (__pyx_t_2 != 0);
        if (__pyx_t_11) {

          /* "mbd/ChRigidBody.pyx":1515
 *                     if type(s) is ProtChMoorings:
 *                         # update forces keeping same fluid vel/acc
 *                         s.updateForces()             # <<<<<<<<<<<<<<
 *         t = comm.bcast(self.thisptr.system.GetChTime(), self.chrono_processor)
 *         Profiling.logEvent('Solved Chrono system to t='+str(t))
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_updateForces); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1515, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          if (__pyx_t_6) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1515, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          } else {
            __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1515, __pyx_L1_error)
          }
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "mbd/ChRigidBody.pyx":1513
 *                 # tri: hack to update forces on cables
 *                 for s in self.subcomponents:
 *                     if type(s) is ProtChMoorings:             # <<<<<<<<<<<<<<
 *                         # update forces keeping same fluid vel/acc
 *                         s.updateForces()
 */
        }

        /* "mbd/ChRigidBody.pyx":1512
 *                 self.thisptr.step(<double> dt_substep, 1)
 *                 # tri: hack to update forces on cables
 *                 for s in self.subcomponents:             # <<<<<<<<<<<<<<
 *                     if type(s) is ProtChMoorings:
 *                         # update forces keeping same fluid vel/acc
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":1509
 *         if comm.rank == self.chrono_processor and dt > 0:
 *             dt_substep = self.dt/nb_steps
 *             for i in range(nb_steps):             # <<<<<<<<<<<<<<
 *                 self.thisptr.step(<double> dt_substep, 1)
 *                 # tri: hack to update forces on cables
 */
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "mbd/ChRigidBody.pyx":1507
 *                         +' with dt='+str(self.dt)
 *                         +'('+str(nb_steps)+' substeps)')
 *         if comm.rank == self.chrono_processor and dt > 0:             # <<<<<<<<<<<<<<
 *             dt_substep = self.dt/nb_steps
 *             for i in range(nb_steps):
 */
  }

  /* "mbd/ChRigidBody.pyx":1516
 *                         # update forces keeping same fluid vel/acc
 *                         s.updateForces()
 *         t = comm.bcast(self.thisptr.system.GetChTime(), self.chrono_processor)             # <<<<<<<<<<<<<<
 *         Profiling.logEvent('Solved Chrono system to t='+str(t))
 *         if self.scheme == "ISS":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->thisptr->system.GetChTime()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->chrono_processor); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_7};
    __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1516, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_7};
    __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1516, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_t, __pyx_t_10);
  __pyx_t_10 = 0;

  /* "mbd/ChRigidBody.pyx":1517
 *                         s.updateForces()
 *         t = comm.bcast(self.thisptr.system.GetChTime(), self.chrono_processor)
 *         Profiling.logEvent('Solved Chrono system to t='+str(t))             # <<<<<<<<<<<<<<
 *         if self.scheme == "ISS":
 *             Profiling.logEvent('Chrono system to t='+str(t+self.dt_fluid_next/2.))
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_t);
  __Pyx_GIVEREF(__pyx_v_t);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_t);
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Solved_Chrono_system_to_t, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_4};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1517, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_4};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1517, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "mbd/ChRigidBody.pyx":1518
 *         t = comm.bcast(self.thisptr.system.GetChTime(), self.chrono_processor)
 *         Profiling.logEvent('Solved Chrono system to t='+str(t))
 *         if self.scheme == "ISS":             # <<<<<<<<<<<<<<
 *             Profiling.logEvent('Chrono system to t='+str(t+self.dt_fluid_next/2.))
 * 
 */
  __pyx_t_11 = ((__pyx_v_self->scheme == ((char *)"ISS")) != 0);
  if (__pyx_t_11) {

    /* "mbd/ChRigidBody.pyx":1519
 *         Profiling.logEvent('Solved Chrono system to t='+str(t))
 *         if self.scheme == "ISS":
 *             Profiling.logEvent('Chrono system to t='+str(t+self.dt_fluid_next/2.))             # <<<<<<<<<<<<<<
 * 
 *     def calculate(self, proteus_dt=None):
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble((__pyx_v_self->dt_fluid_next / 2.)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = PyNumber_Add(__pyx_v_t, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Chrono_system_to_t, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1519, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_8};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1519, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_8};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1519, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1519, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1519, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "mbd/ChRigidBody.pyx":1518
 *         t = comm.bcast(self.thisptr.system.GetChTime(), self.chrono_processor)
 *         Profiling.logEvent('Solved Chrono system to t='+str(t))
 *         if self.scheme == "ISS":             # <<<<<<<<<<<<<<
 *             Profiling.logEvent('Chrono system to t='+str(t+self.dt_fluid_next/2.))
 * 
 */
  }

  /* "mbd/ChRigidBody.pyx":1485
 *         self.min_nb_steps = nb
 * 
 *     def step(self, dt):             # <<<<<<<<<<<<<<
 *         self.dt_fluid_last = self.dt_fluid
 *         self.dt_fluid = dt
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nb_steps);
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_dt_substep);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1521
 *             Profiling.logEvent('Chrono system to t='+str(t+self.dt_fluid_next/2.))
 * 
 *     def calculate(self, proteus_dt=None):             # <<<<<<<<<<<<<<
 *         """Does chrono system calculation for a Proteus time step
 *         Calls prestep and poststep on all subcomponents (bodies,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15calculate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_14calculate[] = "Does chrono system calculation for a Proteus time step\n        Calls prestep and poststep on all subcomponents (bodies,\n        moorings, etc) attached to the system.\n\n        Parameters\n        ----------\n        proteus_dt: Optional[proteus_dt]\n            Manually sets a time step. The time step is set\n            automatically when coupled with a Proteus simulation\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15calculate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_proteus_dt = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proteus_dt,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_proteus_dt);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculate") < 0)) __PYX_ERR(0, 1521, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_proteus_dt = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculate", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1521, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.calculate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_14calculate(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), __pyx_v_proteus_dt);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_14calculate(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_proteus_dt) {
  PyObject *__pyx_v_t = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_time = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  __Pyx_RefNannySetupContext("calculate", 0);

  /* "mbd/ChRigidBody.pyx":1532
 *             automatically when coupled with a Proteus simulation
 *         """
 *         self.proteus_dt_last = self.proteus_dt             # <<<<<<<<<<<<<<
 *         if self.model is not None:
 *             try:
 */
  __pyx_t_1 = __pyx_v_self->proteus_dt;
  __pyx_v_self->proteus_dt_last = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":1533
 *         """
 *         self.proteus_dt_last = self.proteus_dt
 *         if self.model is not None:             # <<<<<<<<<<<<<<
 *             try:
 *                 self.proteus_dt = self.model.levelModelList[-1].dt_last
 */
  __pyx_t_2 = (__pyx_v_self->model != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "mbd/ChRigidBody.pyx":1534
 *         self.proteus_dt_last = self.proteus_dt
 *         if self.model is not None:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.proteus_dt = self.model.levelModelList[-1].dt_last
 *                 self.proteus_dt_next = self.model.levelModelList[-1].dt_last  # wrong prediction is varying time step
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      /*try:*/ {

        /* "mbd/ChRigidBody.pyx":1535
 *         if self.model is not None:
 *             try:
 *                 self.proteus_dt = self.model.levelModelList[-1].dt_last             # <<<<<<<<<<<<<<
 *                 self.proteus_dt_next = self.model.levelModelList[-1].dt_last  # wrong prediction is varying time step
 *                 self.t = t = self.model.stepController.t_model_last
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1535, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1535, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_dt_last); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1535, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1535, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_self->proteus_dt = __pyx_t_1;

        /* "mbd/ChRigidBody.pyx":1536
 *             try:
 *                 self.proteus_dt = self.model.levelModelList[-1].dt_last
 *                 self.proteus_dt_next = self.model.levelModelList[-1].dt_last  # wrong prediction is varying time step             # <<<<<<<<<<<<<<
 *                 self.t = t = self.model.stepController.t_model_last
 *             except:
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1536, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1536, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_dt_last); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1536, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1536, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_self->proteus_dt_next = __pyx_t_1;

        /* "mbd/ChRigidBody.pyx":1537
 *                 self.proteus_dt = self.model.levelModelList[-1].dt_last
 *                 self.proteus_dt_next = self.model.levelModelList[-1].dt_last  # wrong prediction is varying time step
 *                 self.t = t = self.model.stepController.t_model_last             # <<<<<<<<<<<<<<
 *             except:
 *                 self.proteus_dt = self.dt_init
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->model, __pyx_n_s_stepController); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1537, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_t_model_last); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1537, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1537, __pyx_L4_error)
        __pyx_v_self->t = __pyx_t_1;
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_t = __pyx_t_8;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "mbd/ChRigidBody.pyx":1534
 *         self.proteus_dt_last = self.proteus_dt
 *         if self.model is not None:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.proteus_dt = self.model.levelModelList[-1].dt_last
 *                 self.proteus_dt_next = self.model.levelModelList[-1].dt_last  # wrong prediction is varying time step
 */
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "mbd/ChRigidBody.pyx":1538
 *                 self.proteus_dt_next = self.model.levelModelList[-1].dt_last  # wrong prediction is varying time step
 *                 self.t = t = self.model.stepController.t_model_last
 *             except:             # <<<<<<<<<<<<<<
 *                 self.proteus_dt = self.dt_init
 *                 self.t = t = 0.
 */
      /*except:*/ {
        __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.calculate", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_9) < 0) __PYX_ERR(0, 1538, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_9);

        /* "mbd/ChRigidBody.pyx":1539
 *                 self.t = t = self.model.stepController.t_model_last
 *             except:
 *                 self.proteus_dt = self.dt_init             # <<<<<<<<<<<<<<
 *                 self.t = t = 0.
 *         elif proteus_dt is not None:
 */
        __pyx_t_1 = __pyx_v_self->dt_init;
        __pyx_v_self->proteus_dt = __pyx_t_1;

        /* "mbd/ChRigidBody.pyx":1540
 *             except:
 *                 self.proteus_dt = self.dt_init
 *                 self.t = t = 0.             # <<<<<<<<<<<<<<
 *         elif proteus_dt is not None:
 *             self.proteus_dt = proteus_dt
 */
        __pyx_v_self->t = 0.;
        __Pyx_INCREF(__pyx_float_0_);
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_float_0_);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L5_exception_handled;
      }
      __pyx_L6_except_error:;

      /* "mbd/ChRigidBody.pyx":1534
 *         self.proteus_dt_last = self.proteus_dt
 *         if self.model is not None:
 *             try:             # <<<<<<<<<<<<<<
 *                 self.proteus_dt = self.model.levelModelList[-1].dt_last
 *                 self.proteus_dt_next = self.model.levelModelList[-1].dt_last  # wrong prediction is varying time step
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L1_error;
      __pyx_L5_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      __pyx_L11_try_end:;
    }

    /* "mbd/ChRigidBody.pyx":1533
 *         """
 *         self.proteus_dt_last = self.proteus_dt
 *         if self.model is not None:             # <<<<<<<<<<<<<<
 *             try:
 *                 self.proteus_dt = self.model.levelModelList[-1].dt_last
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":1541
 *                 self.proteus_dt = self.dt_init
 *                 self.t = t = 0.
 *         elif proteus_dt is not None:             # <<<<<<<<<<<<<<
 *             self.proteus_dt = proteus_dt
 *             self.proteus_dt_next = proteus_dt  # BAD PREDICTION IF TIME STEP NOT REGULAR
 */
  __pyx_t_3 = (__pyx_v_proteus_dt != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":1542
 *                 self.t = t = 0.
 *         elif proteus_dt is not None:
 *             self.proteus_dt = proteus_dt             # <<<<<<<<<<<<<<
 *             self.proteus_dt_next = proteus_dt  # BAD PREDICTION IF TIME STEP NOT REGULAR
 *             self.t = t = self.thisptr.system.GetChTime()
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_proteus_dt); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1542, __pyx_L1_error)
    __pyx_v_self->proteus_dt = __pyx_t_1;

    /* "mbd/ChRigidBody.pyx":1543
 *         elif proteus_dt is not None:
 *             self.proteus_dt = proteus_dt
 *             self.proteus_dt_next = proteus_dt  # BAD PREDICTION IF TIME STEP NOT REGULAR             # <<<<<<<<<<<<<<
 *             self.t = t = self.thisptr.system.GetChTime()
 *         else:
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_proteus_dt); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1543, __pyx_L1_error)
    __pyx_v_self->proteus_dt_next = __pyx_t_1;

    /* "mbd/ChRigidBody.pyx":1544
 *             self.proteus_dt = proteus_dt
 *             self.proteus_dt_next = proteus_dt  # BAD PREDICTION IF TIME STEP NOT REGULAR
 *             self.t = t = self.thisptr.system.GetChTime()             # <<<<<<<<<<<<<<
 *         else:
 *             sys.exit('no time step set')
 */
    __pyx_t_1 = __pyx_v_self->thisptr->system.GetChTime();
    __pyx_t_9 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_v_self->t = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_9);
    __pyx_v_t = __pyx_t_9;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "mbd/ChRigidBody.pyx":1541
 *                 self.proteus_dt = self.dt_init
 *                 self.t = t = 0.
 *         elif proteus_dt is not None:             # <<<<<<<<<<<<<<
 *             self.proteus_dt = proteus_dt
 *             self.proteus_dt_next = proteus_dt  # BAD PREDICTION IF TIME STEP NOT REGULAR
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":1546
 *             self.t = t = self.thisptr.system.GetChTime()
 *         else:
 *             sys.exit('no time step set')             # <<<<<<<<<<<<<<
 *         if self.model is not None:
 *             if self.build_kdtree is True and self.dist_search is False:
 */
  /*else*/ {
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":1547
 *         else:
 *             sys.exit('no time step set')
 *         if self.model is not None:             # <<<<<<<<<<<<<<
 *             if self.build_kdtree is True and self.dist_search is False:
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup")
 */
  __pyx_t_2 = (__pyx_v_self->model != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "mbd/ChRigidBody.pyx":1548
 *             sys.exit('no time step set')
 *         if self.model is not None:
 *             if self.build_kdtree is True and self.dist_search is False:             # <<<<<<<<<<<<<<
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup")
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 */
    __pyx_t_2 = ((__pyx_v_self->build_kdtree == 1) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_self->dist_search == 0) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_3) {

      /* "mbd/ChRigidBody.pyx":1549
 *         if self.model is not None:
 *             if self.build_kdtree is True and self.dist_search is False:
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup")             # <<<<<<<<<<<<<<
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 *         if t >= self.next_sample:
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "mbd/ChRigidBody.pyx":1550
 *             if self.build_kdtree is True and self.dist_search is False:
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup")
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)             # <<<<<<<<<<<<<<
 *         if t >= self.next_sample:
 *             self.record_values = True
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_spatial); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_cKDTree); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_7, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_mesh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_nodeArray); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1550, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_10};
          __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1550, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_10};
          __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1550, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1550, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1550, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GIVEREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_v_self->nodes_kdtree);
      __Pyx_DECREF(__pyx_v_self->nodes_kdtree);
      __pyx_v_self->nodes_kdtree = __pyx_t_9;
      __pyx_t_9 = 0;

      /* "mbd/ChRigidBody.pyx":1548
 *             sys.exit('no time step set')
 *         if self.model is not None:
 *             if self.build_kdtree is True and self.dist_search is False:             # <<<<<<<<<<<<<<
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup")
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 */
    }

    /* "mbd/ChRigidBody.pyx":1547
 *         else:
 *             sys.exit('no time step set')
 *         if self.model is not None:             # <<<<<<<<<<<<<<
 *             if self.build_kdtree is True and self.dist_search is False:
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup")
 */
  }

  /* "mbd/ChRigidBody.pyx":1551
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup")
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 *         if t >= self.next_sample:             # <<<<<<<<<<<<<<
 *             self.record_values = True
 *             self.next_sample += self.sampleRate
 */
  if (unlikely(!__pyx_v_t)) { __Pyx_RaiseUnboundLocalError("t"); __PYX_ERR(0, 1551, __pyx_L1_error) }
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->next_sample); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = PyObject_RichCompare(__pyx_v_t, __pyx_t_9, Py_GE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_3) {

    /* "mbd/ChRigidBody.pyx":1552
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 *         if t >= self.next_sample:
 *             self.record_values = True             # <<<<<<<<<<<<<<
 *             self.next_sample += self.sampleRate
 *         import time
 */
    __pyx_v_self->record_values = 1;

    /* "mbd/ChRigidBody.pyx":1553
 *         if t >= self.next_sample:
 *             self.record_values = True
 *             self.next_sample += self.sampleRate             # <<<<<<<<<<<<<<
 *         import time
 *         Profiling.logEvent("Chrono prestep")
 */
    __pyx_v_self->next_sample = (__pyx_v_self->next_sample + __pyx_v_self->sampleRate);

    /* "mbd/ChRigidBody.pyx":1551
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup")
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 *         if t >= self.next_sample:             # <<<<<<<<<<<<<<
 *             self.record_values = True
 *             self.next_sample += self.sampleRate
 */
  }

  /* "mbd/ChRigidBody.pyx":1554
 *             self.record_values = True
 *             self.next_sample += self.sampleRate
 *         import time             # <<<<<<<<<<<<<<
 *         Profiling.logEvent("Chrono prestep")
 *         for s in self.subcomponents:
 */
  __pyx_t_8 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_time = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "mbd/ChRigidBody.pyx":1555
 *             self.next_sample += self.sampleRate
 *         import time
 *         Profiling.logEvent("Chrono prestep")             # <<<<<<<<<<<<<<
 *         for s in self.subcomponents:
 *             s.prestep()
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__88, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mbd/ChRigidBody.pyx":1556
 *         import time
 *         Profiling.logEvent("Chrono prestep")
 *         for s in self.subcomponents:             # <<<<<<<<<<<<<<
 *             s.prestep()
 *         self.step(self.proteus_dt)
 */
  if (likely(PyList_CheckExact(__pyx_v_self->subcomponents)) || PyTuple_CheckExact(__pyx_v_self->subcomponents)) {
    __pyx_t_8 = __pyx_v_self->subcomponents; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_self->subcomponents); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1556, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1556, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1556, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1556, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1556, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_13(__pyx_t_8);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1556, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "mbd/ChRigidBody.pyx":1557
 *         Profiling.logEvent("Chrono prestep")
 *         for s in self.subcomponents:
 *             s.prestep()             # <<<<<<<<<<<<<<
 *         self.step(self.proteus_dt)
 *         Profiling.logEvent("Chrono poststep")
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_prestep); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    if (__pyx_t_10) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else {
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1557, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "mbd/ChRigidBody.pyx":1556
 *         import time
 *         Profiling.logEvent("Chrono prestep")
 *         for s in self.subcomponents:             # <<<<<<<<<<<<<<
 *             s.prestep()
 *         self.step(self.proteus_dt)
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mbd/ChRigidBody.pyx":1558
 *         for s in self.subcomponents:
 *             s.prestep()
 *         self.step(self.proteus_dt)             # <<<<<<<<<<<<<<
 *         Profiling.logEvent("Chrono poststep")
 *         for s in self.subcomponents:
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = PyFloat_FromDouble(__pyx_v_self->proteus_dt); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_10) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1558, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_8);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_11};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_11};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mbd/ChRigidBody.pyx":1559
 *             s.prestep()
 *         self.step(self.proteus_dt)
 *         Profiling.logEvent("Chrono poststep")             # <<<<<<<<<<<<<<
 *         for s in self.subcomponents:
 *             s.poststep()
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__89, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mbd/ChRigidBody.pyx":1560
 *         self.step(self.proteus_dt)
 *         Profiling.logEvent("Chrono poststep")
 *         for s in self.subcomponents:             # <<<<<<<<<<<<<<
 *             s.poststep()
 *         self.record_values = False
 */
  if (likely(PyList_CheckExact(__pyx_v_self->subcomponents)) || PyTuple_CheckExact(__pyx_v_self->subcomponents)) {
    __pyx_t_8 = __pyx_v_self->subcomponents; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_self->subcomponents); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1560, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1560, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1560, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1560, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1560, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_13(__pyx_t_8);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1560, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "mbd/ChRigidBody.pyx":1561
 *         Profiling.logEvent("Chrono poststep")
 *         for s in self.subcomponents:
 *             s.poststep()             # <<<<<<<<<<<<<<
 *         self.record_values = False
 *         self.first_step = False  # first step passed
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_poststep); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_11) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1561, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else {
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1561, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "mbd/ChRigidBody.pyx":1560
 *         self.step(self.proteus_dt)
 *         Profiling.logEvent("Chrono poststep")
 *         for s in self.subcomponents:             # <<<<<<<<<<<<<<
 *             s.poststep()
 *         self.record_values = False
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mbd/ChRigidBody.pyx":1562
 *         for s in self.subcomponents:
 *             s.poststep()
 *         self.record_values = False             # <<<<<<<<<<<<<<
 *         self.first_step = False  # first step passed
 *         self.tCount += 1
 */
  __pyx_v_self->record_values = 0;

  /* "mbd/ChRigidBody.pyx":1563
 *             s.poststep()
 *         self.record_values = False
 *         self.first_step = False  # first step passed             # <<<<<<<<<<<<<<
 *         self.tCount += 1
 * 
 */
  __pyx_v_self->first_step = 0;

  /* "mbd/ChRigidBody.pyx":1564
 *         self.record_values = False
 *         self.first_step = False  # first step passed
 *         self.tCount += 1             # <<<<<<<<<<<<<<
 * 
 *     def addBodyEasyBox(self, pych.ChBodyEasyBox body):
 */
  __pyx_v_self->tCount = (__pyx_v_self->tCount + 1);

  /* "mbd/ChRigidBody.pyx":1521
 *             Profiling.logEvent('Chrono system to t='+str(t+self.dt_fluid_next/2.))
 * 
 *     def calculate(self, proteus_dt=None):             # <<<<<<<<<<<<<<
 *         """Does chrono system calculation for a Proteus time step
 *         Calls prestep and poststep on all subcomponents (bodies,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.calculate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_time);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1566
 *         self.tCount += 1
 * 
 *     def addBodyEasyBox(self, pych.ChBodyEasyBox body):             # <<<<<<<<<<<<<<
 *         """Hack to add BodyEasyBox
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_17addBodyEasyBox(PyObject *__pyx_v_self, PyObject *__pyx_v_body); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_16addBodyEasyBox[] = "Hack to add BodyEasyBox\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_17addBodyEasyBox(PyObject *__pyx_v_self, PyObject *__pyx_v_body) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addBodyEasyBox (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_body), __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox, 1, "body", 0))) __PYX_ERR(0, 1566, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_16addBodyEasyBox(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox *)__pyx_v_body));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_16addBodyEasyBox(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox *__pyx_v_body) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addBodyEasyBox", 0);

  /* "mbd/ChRigidBody.pyx":1569
 *         """Hack to add BodyEasyBox
 *         """
 *         self.thisptr.system.AddBody(body.sharedptr_chbody)             # <<<<<<<<<<<<<<
 * 
 *     def calculate_init(self):
 */
  __pyx_v_self->thisptr->system.AddBody(((std::shared_ptr<ChBody> )__pyx_v_body->__pyx_base.sharedptr_chbody));

  /* "mbd/ChRigidBody.pyx":1566
 *         self.tCount += 1
 * 
 *     def addBodyEasyBox(self, pych.ChBodyEasyBox body):             # <<<<<<<<<<<<<<
 *         """Hack to add BodyEasyBox
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1571
 *         self.thisptr.system.AddBody(body.sharedptr_chbody)
 * 
 *     def calculate_init(self):             # <<<<<<<<<<<<<<
 *         """Does chrono system initialisation
 *         (!) Must be called before the first calculate() call.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_19calculate_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_18calculate_init[] = "Does chrono system initialisation\n        (!) Must be called before the first calculate() call.\n        Calls calculate_init and poststep on all subcomponents\n        (bodies, moorings, etc) attached to the system.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_19calculate_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_init (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_18calculate_init(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_18calculate_init(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  __Pyx_RefNannySetupContext("calculate_init", 0);

  /* "mbd/ChRigidBody.pyx":1577
 *         (bodies, moorings, etc) attached to the system.
 *         """
 *         Profiling.logEvent("Starting init"+str(self.next_sample))             # <<<<<<<<<<<<<<
 *         self.directory = str(Profiling.logDir)+'/'
 *         self.thisptr.setDirectory(self.directory)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->next_sample); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Starting_init, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1577, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1578
 *         """
 *         Profiling.logEvent("Starting init"+str(self.next_sample))
 *         self.directory = str(Profiling.logDir)+'/'             # <<<<<<<<<<<<<<
 *         self.thisptr.setDirectory(self.directory)
 *         if self.model is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_logDir); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__90); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->directory = __pyx_t_6;

  /* "mbd/ChRigidBody.pyx":1579
 *         Profiling.logEvent("Starting init"+str(self.next_sample))
 *         self.directory = str(Profiling.logDir)+'/'
 *         self.thisptr.setDirectory(self.directory)             # <<<<<<<<<<<<<<
 *         if self.model is not None:
 *             self.model_mesh = self.model.levelModelList[-1].mesh
 */
  __pyx_v_self->thisptr->setDirectory(__pyx_v_self->directory);

  /* "mbd/ChRigidBody.pyx":1580
 *         self.directory = str(Profiling.logDir)+'/'
 *         self.thisptr.setDirectory(self.directory)
 *         if self.model is not None:             # <<<<<<<<<<<<<<
 *             self.model_mesh = self.model.levelModelList[-1].mesh
 *             if self.build_kdtree is True:
 */
  __pyx_t_7 = (__pyx_v_self->model != Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "mbd/ChRigidBody.pyx":1581
 *         self.thisptr.setDirectory(self.directory)
 *         if self.model is not None:
 *             self.model_mesh = self.model.levelModelList[-1].mesh             # <<<<<<<<<<<<<<
 *             if self.build_kdtree is True:
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup on first time step")
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mesh); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->model_mesh);
    __Pyx_DECREF(__pyx_v_self->model_mesh);
    __pyx_v_self->model_mesh = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1582
 *         if self.model is not None:
 *             self.model_mesh = self.model.levelModelList[-1].mesh
 *             if self.build_kdtree is True:             # <<<<<<<<<<<<<<
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup on first time step")
 *                 self.u = self.model.levelModelList[-1].u
 */
    __pyx_t_8 = ((__pyx_v_self->build_kdtree == 1) != 0);
    if (__pyx_t_8) {

      /* "mbd/ChRigidBody.pyx":1583
 *             self.model_mesh = self.model.levelModelList[-1].mesh
 *             if self.build_kdtree is True:
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup on first time step")             # <<<<<<<<<<<<<<
 *                 self.u = self.model.levelModelList[-1].u
 *                 # finite element space (! linear for p, quadratic for velocity)
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":1584
 *             if self.build_kdtree is True:
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup on first time step")
 *                 self.u = self.model.levelModelList[-1].u             # <<<<<<<<<<<<<<
 *                 # finite element space (! linear for p, quadratic for velocity)
 *                 self.femSpace_velocity = self.u[1].femSpace
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->u);
      __Pyx_DECREF(__pyx_v_self->u);
      __pyx_v_self->u = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":1586
 *                 self.u = self.model.levelModelList[-1].u
 *                 # finite element space (! linear for p, quadratic for velocity)
 *                 self.femSpace_velocity = self.u[1].femSpace             # <<<<<<<<<<<<<<
 *                 self.femSpace_pressure = self.u[0].femSpace
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->u, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1586, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_femSpace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1586, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->femSpace_velocity);
      __Pyx_DECREF(__pyx_v_self->femSpace_velocity);
      __pyx_v_self->femSpace_velocity = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":1587
 *                 # finite element space (! linear for p, quadratic for velocity)
 *                 self.femSpace_velocity = self.u[1].femSpace
 *                 self.femSpace_pressure = self.u[0].femSpace             # <<<<<<<<<<<<<<
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 *         for s in self.subcomponents:
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_self->u, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1587, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_femSpace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1587, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->femSpace_pressure);
      __Pyx_DECREF(__pyx_v_self->femSpace_pressure);
      __pyx_v_self->femSpace_pressure = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":1588
 *                 self.femSpace_velocity = self.u[1].femSpace
 *                 self.femSpace_pressure = self.u[0].femSpace
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)             # <<<<<<<<<<<<<<
 *         for s in self.subcomponents:
 *             s.calculate_init()
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_spatial); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cKDTree); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_mesh); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_nodeArray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1588, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1588, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1588, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1588, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1588, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->nodes_kdtree);
      __Pyx_DECREF(__pyx_v_self->nodes_kdtree);
      __pyx_v_self->nodes_kdtree = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":1582
 *         if self.model is not None:
 *             self.model_mesh = self.model.levelModelList[-1].mesh
 *             if self.build_kdtree is True:             # <<<<<<<<<<<<<<
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup on first time step")
 *                 self.u = self.model.levelModelList[-1].u
 */
    }

    /* "mbd/ChRigidBody.pyx":1580
 *         self.directory = str(Profiling.logDir)+'/'
 *         self.thisptr.setDirectory(self.directory)
 *         if self.model is not None:             # <<<<<<<<<<<<<<
 *             self.model_mesh = self.model.levelModelList[-1].mesh
 *             if self.build_kdtree is True:
 */
  }

  /* "mbd/ChRigidBody.pyx":1589
 *                 self.femSpace_pressure = self.u[0].femSpace
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 *         for s in self.subcomponents:             # <<<<<<<<<<<<<<
 *             s.calculate_init()
 *         Profiling.logEvent("Setup initial"+str(self.next_sample))
 */
  if (likely(PyList_CheckExact(__pyx_v_self->subcomponents)) || PyTuple_CheckExact(__pyx_v_self->subcomponents)) {
    __pyx_t_1 = __pyx_v_self->subcomponents; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_self->subcomponents); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1589, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1589, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1589, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1589, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1589, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_10(__pyx_t_1);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1589, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":1590
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 *         for s in self.subcomponents:
 *             s.calculate_init()             # <<<<<<<<<<<<<<
 *         Profiling.logEvent("Setup initial"+str(self.next_sample))
 *         self.thisptr.system.SetupInitial()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_calculate_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1590, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1590, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":1589
 *                 self.femSpace_pressure = self.u[0].femSpace
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 *         for s in self.subcomponents:             # <<<<<<<<<<<<<<
 *             s.calculate_init()
 *         Profiling.logEvent("Setup initial"+str(self.next_sample))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1591
 *         for s in self.subcomponents:
 *             s.calculate_init()
 *         Profiling.logEvent("Setup initial"+str(self.next_sample))             # <<<<<<<<<<<<<<
 *         self.thisptr.system.SetupInitial()
 *         Profiling.logEvent("Finished init"+str(self.next_sample))
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->next_sample); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Setup_initial, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1591, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1591, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1591, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1592
 *             s.calculate_init()
 *         Profiling.logEvent("Setup initial"+str(self.next_sample))
 *         self.thisptr.system.SetupInitial()             # <<<<<<<<<<<<<<
 *         Profiling.logEvent("Finished init"+str(self.next_sample))
 *         for s in self.subcomponents:
 */
  __pyx_v_self->thisptr->system.SetupInitial();

  /* "mbd/ChRigidBody.pyx":1593
 *         Profiling.logEvent("Setup initial"+str(self.next_sample))
 *         self.thisptr.system.SetupInitial()
 *         Profiling.logEvent("Finished init"+str(self.next_sample))             # <<<<<<<<<<<<<<
 *         for s in self.subcomponents:
 *             s.poststep()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->next_sample); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Finished_init, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1593, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1593, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1593, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1594
 *         self.thisptr.system.SetupInitial()
 *         Profiling.logEvent("Finished init"+str(self.next_sample))
 *         for s in self.subcomponents:             # <<<<<<<<<<<<<<
 *             s.poststep()
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_self->subcomponents)) || PyTuple_CheckExact(__pyx_v_self->subcomponents)) {
    __pyx_t_1 = __pyx_v_self->subcomponents; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_self->subcomponents); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1594, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1594, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1594, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1594, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1594, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_10(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1594, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1595
 *         Profiling.logEvent("Finished init"+str(self.next_sample))
 *         for s in self.subcomponents:
 *             s.poststep()             # <<<<<<<<<<<<<<
 * 
 *     def setTimestepperType(self, string tstype, bool verbose=False):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_poststep); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1595, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1595, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1594
 *         self.thisptr.system.SetupInitial()
 *         Profiling.logEvent("Finished init"+str(self.next_sample))
 *         for s in self.subcomponents:             # <<<<<<<<<<<<<<
 *             s.poststep()
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1571
 *         self.thisptr.system.AddBody(body.sharedptr_chbody)
 * 
 *     def calculate_init(self):             # <<<<<<<<<<<<<<
 *         """Does chrono system initialisation
 *         (!) Must be called before the first calculate() call.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.calculate_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1597
 *             s.poststep()
 * 
 *     def setTimestepperType(self, string tstype, bool verbose=False):             # <<<<<<<<<<<<<<
 *         """Change timestepper (default: Euler)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_21setTimestepperType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_20setTimestepperType[] = "Change timestepper (default: Euler)\n\n        Parameters\n        ----------\n        tstype: str\n            type of timestepper ('Euler' or 'HHT')\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_21setTimestepperType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_tstype;
  bool __pyx_v_verbose;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTimestepperType (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tstype,&__pyx_n_s_verbose,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tstype)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setTimestepperType") < 0)) __PYX_ERR(0, 1597, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tstype = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1597, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_verbose = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_verbose == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1597, __pyx_L3_error)
    } else {
      __pyx_v_verbose = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setTimestepperType", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1597, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.setTimestepperType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_20setTimestepperType(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), __pyx_v_tstype, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_20setTimestepperType(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, std::string __pyx_v_tstype, bool __pyx_v_verbose) {
  PyObject *__pyx_v_tstypes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("setTimestepperType", 0);

  /* "mbd/ChRigidBody.pyx":1605
 *             type of timestepper ('Euler' or 'HHT')
 *         """
 *         tstypes = ["Euler", "HHT", "Trapezoidal"]             # <<<<<<<<<<<<<<
 *         assert str(tstype) in tstypes, str(tstype)+" not a valid choice."
 *         self.thisptr.setTimestepperType(tstype, verbose)
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Euler);
  __Pyx_GIVEREF(__pyx_n_s_Euler);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Euler);
  __Pyx_INCREF(__pyx_n_s_HHT);
  __Pyx_GIVEREF(__pyx_n_s_HHT);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_HHT);
  __Pyx_INCREF(__pyx_n_s_Trapezoidal);
  __Pyx_GIVEREF(__pyx_n_s_Trapezoidal);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_Trapezoidal);
  __pyx_v_tstypes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1606
 *         """
 *         tstypes = ["Euler", "HHT", "Trapezoidal"]
 *         assert str(tstype) in tstypes, str(tstype)+" not a valid choice."             # <<<<<<<<<<<<<<
 *         self.thisptr.setTimestepperType(tstype, verbose)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_tstype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_tstypes, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_3 != 0))) {
      __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_tstype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_not_a_valid_choice); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 1606, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":1607
 *         tstypes = ["Euler", "HHT", "Trapezoidal"]
 *         assert str(tstype) in tstypes, str(tstype)+" not a valid choice."
 *         self.thisptr.setTimestepperType(tstype, verbose)             # <<<<<<<<<<<<<<
 * 
 *     def setTimeStep(self, double dt):
 */
  __pyx_v_self->thisptr->setTimestepperType(__pyx_v_tstype, __pyx_v_verbose);

  /* "mbd/ChRigidBody.pyx":1597
 *             s.poststep()
 * 
 *     def setTimestepperType(self, string tstype, bool verbose=False):             # <<<<<<<<<<<<<<
 *         """Change timestepper (default: Euler)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.setTimestepperType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tstypes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1609
 *         self.thisptr.setTimestepperType(tstype, verbose)
 * 
 *     def setTimeStep(self, double dt):             # <<<<<<<<<<<<<<
 *         """Sets time step for Chrono solver.
 *         Calculations in Chrono will use this time step within the
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_23setTimeStep(PyObject *__pyx_v_self, PyObject *__pyx_arg_dt); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_22setTimeStep[] = "Sets time step for Chrono solver.\n        Calculations in Chrono will use this time step within the\n        Proteus time step (if bigger)\n\n        Parameters\n        ----------\n        dt: float\n            Chrono time step size\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_23setTimeStep(PyObject *__pyx_v_self, PyObject *__pyx_arg_dt) {
  double __pyx_v_dt;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTimeStep (wrapper)", 0);
  assert(__pyx_arg_dt); {
    __pyx_v_dt = __pyx_PyFloat_AsDouble(__pyx_arg_dt); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1609, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.setTimeStep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_22setTimeStep(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((double)__pyx_v_dt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_22setTimeStep(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, double __pyx_v_dt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTimeStep", 0);

  /* "mbd/ChRigidBody.pyx":1619
 *             Chrono time step size
 *         """
 *         self.chrono_dt = dt             # <<<<<<<<<<<<<<
 *         self.thisptr.setChTimeStep(dt)
 * 
 */
  __pyx_v_self->chrono_dt = __pyx_v_dt;

  /* "mbd/ChRigidBody.pyx":1620
 *         """
 *         self.chrono_dt = dt
 *         self.thisptr.setChTimeStep(dt)             # <<<<<<<<<<<<<<
 * 
 *     def setGravity(self, np.ndarray gravity):
 */
  __pyx_v_self->thisptr->setChTimeStep(__pyx_v_dt);

  /* "mbd/ChRigidBody.pyx":1609
 *         self.thisptr.setTimestepperType(tstype, verbose)
 * 
 *     def setTimeStep(self, double dt):             # <<<<<<<<<<<<<<
 *         """Sets time step for Chrono solver.
 *         Calculations in Chrono will use this time step within the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1622
 *         self.thisptr.setChTimeStep(dt)
 * 
 *     def setGravity(self, np.ndarray gravity):             # <<<<<<<<<<<<<<
 *         """Sets gravity acceleration of the Chrono system
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_25setGravity(PyObject *__pyx_v_self, PyObject *__pyx_v_gravity); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_24setGravity[] = "Sets gravity acceleration of the Chrono system\n\n        Parameters\n        ----------\n        gravity: array_like\n            Gravity acceleration (array of length 3)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_25setGravity(PyObject *__pyx_v_self, PyObject *__pyx_v_gravity) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setGravity (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gravity), __pyx_ptype_5numpy_ndarray, 1, "gravity", 0))) __PYX_ERR(0, 1622, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_24setGravity(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyArrayObject *)__pyx_v_gravity));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_24setGravity(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyArrayObject *__pyx_v_gravity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setGravity", 0);

  /* "mbd/ChRigidBody.pyx":1630
 *             Gravity acceleration (array of length 3)
 *         """
 *         self.thisptr.setGravity(<double*> gravity.data)             # <<<<<<<<<<<<<<
 * 
 *     def addSubcomponent(self, subcomponent):
 */
  __pyx_v_self->thisptr->setGravity(((double *)__pyx_v_gravity->data));

  /* "mbd/ChRigidBody.pyx":1622
 *         self.thisptr.setChTimeStep(dt)
 * 
 *     def setGravity(self, np.ndarray gravity):             # <<<<<<<<<<<<<<
 *         """Sets gravity acceleration of the Chrono system
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1632
 *         self.thisptr.setGravity(<double*> gravity.data)
 * 
 *     def addSubcomponent(self, subcomponent):             # <<<<<<<<<<<<<<
 *         """Adds subcomponent to system
 *         calculate_init() of subcomponent called before initial timestep
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_27addSubcomponent(PyObject *__pyx_v_self, PyObject *__pyx_v_subcomponent); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_26addSubcomponent[] = "Adds subcomponent to system\n        calculate_init() of subcomponent called before initial timestep\n        prestep() and poststep of subcomponent() called at all timestep\n\n        Parameters\n        ----------\n        subcomponent: class instance\n            class instance of subcomponent\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_27addSubcomponent(PyObject *__pyx_v_self, PyObject *__pyx_v_subcomponent) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addSubcomponent (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_26addSubcomponent(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_subcomponent));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_26addSubcomponent(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_subcomponent) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("addSubcomponent", 0);

  /* "mbd/ChRigidBody.pyx":1642
 *             class instance of subcomponent
 *         """
 *         self.subcomponents += [subcomponent]             # <<<<<<<<<<<<<<
 * 
 *     def findElementContainingCoordsKD(self, coords):
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_subcomponent);
  __Pyx_GIVEREF(__pyx_v_subcomponent);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_subcomponent);
  __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_self->subcomponents, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->subcomponents);
  __Pyx_DECREF(__pyx_v_self->subcomponents);
  __pyx_v_self->subcomponents = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":1632
 *         self.thisptr.setGravity(<double*> gravity.data)
 * 
 *     def addSubcomponent(self, subcomponent):             # <<<<<<<<<<<<<<
 *         """Adds subcomponent to system
 *         calculate_init() of subcomponent called before initial timestep
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.addSubcomponent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1644
 *         self.subcomponents += [subcomponent]
 * 
 *     def findElementContainingCoordsKD(self, coords):             # <<<<<<<<<<<<<<
 *         """
 *         k-d tree search of nearest node, element containing coords, and owning
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_29findElementContainingCoordsKD(PyObject *__pyx_v_self, PyObject *__pyx_v_coords); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_28findElementContainingCoordsKD[] = "\n        k-d tree search of nearest node, element containing coords, and owning\n        rank.\n\n        Parameters\n        ----------\n        coords: array_like\n            global coordinates to look for\n\n        Returns\n        -------\n        xi:\n            local coordinates\n        node: int\n            nearest node\n        eN: int\n            (local) element number\n        rank: int\n            processor rank containing element\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_29findElementContainingCoordsKD(PyObject *__pyx_v_self, PyObject *__pyx_v_coords) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findElementContainingCoordsKD (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_28findElementContainingCoordsKD(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_coords));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_28findElementContainingCoordsKD(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_coords) {
  PyObject *__pyx_v_comm = NULL;
  PyObject *__pyx_v_owning_proc = NULL;
  PyObject *__pyx_v_xi = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_element = NULL;
  PyObject *__pyx_v_local_element = NULL;
  PyObject *__pyx_v_nearest_node = NULL;
  PyObject *__pyx_v_nearest_node_distance = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_eN = NULL;
  PyObject *__pyx_v_rank = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("findElementContainingCoordsKD", 0);

  /* "mbd/ChRigidBody.pyx":1665
 *             processor rank containing element
 *         """
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         owning_proc = 0
 *         xi = element = None  # initialised as None
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1665, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1665, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_comm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1666
 *         """
 *         comm = Comm.get().comm.tompi4py()
 *         owning_proc = 0             # <<<<<<<<<<<<<<
 *         xi = element = None  # initialised as None
 *         local_element = None
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_owning_proc = __pyx_int_0;

  /* "mbd/ChRigidBody.pyx":1667
 *         comm = Comm.get().comm.tompi4py()
 *         owning_proc = 0
 *         xi = element = None  # initialised as None             # <<<<<<<<<<<<<<
 *         local_element = None
 *         # get nearest node on each processor
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_xi = Py_None;
  __Pyx_INCREF(Py_None);
  __pyx_v_element = Py_None;

  /* "mbd/ChRigidBody.pyx":1668
 *         owning_proc = 0
 *         xi = element = None  # initialised as None
 *         local_element = None             # <<<<<<<<<<<<<<
 *         # get nearest node on each processor
 *         comm.barrier()
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_local_element = Py_None;

  /* "mbd/ChRigidBody.pyx":1670
 *         local_element = None
 *         # get nearest node on each processor
 *         comm.barrier()             # <<<<<<<<<<<<<<
 *         nearest_node, nearest_node_distance = getLocalNearestNode(coords, self.nodes_kdtree)
 *         # look for element containing coords on each processor (if it exists)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_barrier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1670, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1670, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1671
 *         # get nearest node on each processor
 *         comm.barrier()
 *         nearest_node, nearest_node_distance = getLocalNearestNode(coords, self.nodes_kdtree)             # <<<<<<<<<<<<<<
 *         # look for element containing coords on each processor (if it exists)
 *         comm.barrier()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_getLocalNearestNode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_coords, __pyx_v_self->nodes_kdtree};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1671, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_coords, __pyx_v_self->nodes_kdtree};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1671, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_coords);
    __Pyx_GIVEREF(__pyx_v_coords);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_v_coords);
    __Pyx_INCREF(__pyx_v_self->nodes_kdtree);
    __Pyx_GIVEREF(__pyx_v_self->nodes_kdtree);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_v_self->nodes_kdtree);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1671, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1671, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1671, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_nearest_node = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_nearest_node_distance = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":1673
 *         nearest_node, nearest_node_distance = getLocalNearestNode(coords, self.nodes_kdtree)
 *         # look for element containing coords on each processor (if it exists)
 *         comm.barrier()             # <<<<<<<<<<<<<<
 *         # make sure that processor owns nearest node
 *         if nearest_node < self.model_mesh.nNodes_owned:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_barrier); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1673, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1673, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1675
 *         comm.barrier()
 *         # make sure that processor owns nearest node
 *         if nearest_node < self.model_mesh.nNodes_owned:             # <<<<<<<<<<<<<<
 *             local_element = getLocalElement(self.femSpace_velocity, coords, nearest_node)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->model_mesh, __pyx_n_s_nNodes_owned); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_nearest_node, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {

    /* "mbd/ChRigidBody.pyx":1676
 *         # make sure that processor owns nearest node
 *         if nearest_node < self.model_mesh.nNodes_owned:
 *             local_element = getLocalElement(self.femSpace_velocity, coords, nearest_node)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_getLocalElement); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_self->femSpace_velocity, __pyx_v_coords, __pyx_v_nearest_node};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1676, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_self->femSpace_velocity, __pyx_v_coords, __pyx_v_nearest_node};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1676, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_self->femSpace_velocity);
      __Pyx_GIVEREF(__pyx_v_self->femSpace_velocity);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_self->femSpace_velocity);
      __Pyx_INCREF(__pyx_v_coords);
      __Pyx_GIVEREF(__pyx_v_coords);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_coords);
      __Pyx_INCREF(__pyx_v_nearest_node);
      __Pyx_GIVEREF(__pyx_v_nearest_node);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_5, __pyx_v_nearest_node);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_local_element, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":1675
 *         comm.barrier()
 *         # make sure that processor owns nearest node
 *         if nearest_node < self.model_mesh.nNodes_owned:             # <<<<<<<<<<<<<<
 *             local_element = getLocalElement(self.femSpace_velocity, coords, nearest_node)
 * 
 */
    goto __pyx_L5;
  }

  /* "mbd/ChRigidBody.pyx":1679
 * 
 *         else:
 *             nearest_node_distance = 0             # <<<<<<<<<<<<<<
 *         _, owning_proc = comm.allreduce((-nearest_node_distance, comm.rank),
 *                                         op=MPI.MINLOC)
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_DECREF_SET(__pyx_v_nearest_node_distance, __pyx_int_0);
  }
  __pyx_L5:;

  /* "mbd/ChRigidBody.pyx":1680
 *         else:
 *             nearest_node_distance = 0
 *         _, owning_proc = comm.allreduce((-nearest_node_distance, comm.rank),             # <<<<<<<<<<<<<<
 *                                         op=MPI.MINLOC)
 *         comm.barrier()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_allreduce); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Negative(__pyx_v_nearest_node_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":1681
 *             nearest_node_distance = 0
 *         _, owning_proc = comm.allreduce((-nearest_node_distance, comm.rank),
 *                                         op=MPI.MINLOC)             # <<<<<<<<<<<<<<
 *         comm.barrier()
 *         if comm.rank == owning_proc and local_element:
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MPI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MINLOC); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_op, __pyx_t_8) < 0) __PYX_ERR(0, 1681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mbd/ChRigidBody.pyx":1680
 *         else:
 *             nearest_node_distance = 0
 *         _, owning_proc = comm.allreduce((-nearest_node_distance, comm.rank),             # <<<<<<<<<<<<<<
 *                                         op=MPI.MINLOC)
 *         comm.barrier()
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
    PyObject* sequence = __pyx_t_8;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1680, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_3); if (unlikely(!__pyx_t_4)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_3), 2) < 0) __PYX_ERR(0, 1680, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L7_unpacking_done;
    __pyx_L6_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1680, __pyx_L1_error)
    __pyx_L7_unpacking_done:;
  }
  __pyx_v__ = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_owning_proc, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1682
 *         _, owning_proc = comm.allreduce((-nearest_node_distance, comm.rank),
 *                                         op=MPI.MINLOC)
 *         comm.barrier()             # <<<<<<<<<<<<<<
 *         if comm.rank == owning_proc and local_element:
 *             xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_barrier); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1682, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1682, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mbd/ChRigidBody.pyx":1683
 *                                         op=MPI.MINLOC)
 *         comm.barrier()
 *         if comm.rank == owning_proc and local_element:             # <<<<<<<<<<<<<<
 *             xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element,
 *                                                                     coords)
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_8, __pyx_v_owning_proc, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_9) {
  } else {
    __pyx_t_7 = __pyx_t_9;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_local_element); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __pyx_t_7 = __pyx_t_9;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_7) {

    /* "mbd/ChRigidBody.pyx":1684
 *         comm.barrier()
 *         if comm.rank == owning_proc and local_element:
 *             xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element,             # <<<<<<<<<<<<<<
 *                                                                     coords)
 *         comm.barrier()
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->femSpace_velocity, __pyx_n_s_elementMaps); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_getInverseValue); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":1685
 *         if comm.rank == owning_proc and local_element:
 *             xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element,
 *                                                                     coords)             # <<<<<<<<<<<<<<
 *         comm.barrier()
 *         xi = comm.bcast(xi, owning_proc)
 */
    __pyx_t_8 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_local_element, __pyx_v_coords};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1684, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_local_element, __pyx_v_coords};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1684, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1684, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_local_element);
      __Pyx_GIVEREF(__pyx_v_local_element);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_v_local_element);
      __Pyx_INCREF(__pyx_v_coords);
      __Pyx_GIVEREF(__pyx_v_coords);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_v_coords);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1684, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_xi, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":1683
 *                                         op=MPI.MINLOC)
 *         comm.barrier()
 *         if comm.rank == owning_proc and local_element:             # <<<<<<<<<<<<<<
 *             xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element,
 *                                                                     coords)
 */
  }

  /* "mbd/ChRigidBody.pyx":1686
 *             xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element,
 *                                                                     coords)
 *         comm.barrier()             # <<<<<<<<<<<<<<
 *         xi = comm.bcast(xi, owning_proc)
 *         eN = comm.bcast(local_element, owning_proc)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_barrier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1686, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1687
 *                                                                     coords)
 *         comm.barrier()
 *         xi = comm.bcast(xi, owning_proc)             # <<<<<<<<<<<<<<
 *         eN = comm.bcast(local_element, owning_proc)
 *         rank = comm.bcast(owning_proc, owning_proc)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_xi, __pyx_v_owning_proc};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1687, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_xi, __pyx_v_owning_proc};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1687, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xi);
    __Pyx_GIVEREF(__pyx_v_xi);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_v_xi);
    __Pyx_INCREF(__pyx_v_owning_proc);
    __Pyx_GIVEREF(__pyx_v_owning_proc);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_v_owning_proc);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_xi, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1688
 *         comm.barrier()
 *         xi = comm.bcast(xi, owning_proc)
 *         eN = comm.bcast(local_element, owning_proc)             # <<<<<<<<<<<<<<
 *         rank = comm.bcast(owning_proc, owning_proc)
 *         node = comm.bcast(nearest_node, owning_proc)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_local_element, __pyx_v_owning_proc};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_local_element, __pyx_v_owning_proc};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_local_element);
    __Pyx_GIVEREF(__pyx_v_local_element);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_v_local_element);
    __Pyx_INCREF(__pyx_v_owning_proc);
    __Pyx_GIVEREF(__pyx_v_owning_proc);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_v_owning_proc);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_eN = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1689
 *         xi = comm.bcast(xi, owning_proc)
 *         eN = comm.bcast(local_element, owning_proc)
 *         rank = comm.bcast(owning_proc, owning_proc)             # <<<<<<<<<<<<<<
 *         node = comm.bcast(nearest_node, owning_proc)
 *         return xi, node, eN, rank
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_owning_proc, __pyx_v_owning_proc};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_owning_proc, __pyx_v_owning_proc};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_owning_proc);
    __Pyx_GIVEREF(__pyx_v_owning_proc);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_v_owning_proc);
    __Pyx_INCREF(__pyx_v_owning_proc);
    __Pyx_GIVEREF(__pyx_v_owning_proc);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_v_owning_proc);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_rank = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1690
 *         eN = comm.bcast(local_element, owning_proc)
 *         rank = comm.bcast(owning_proc, owning_proc)
 *         node = comm.bcast(nearest_node, owning_proc)             # <<<<<<<<<<<<<<
 *         return xi, node, eN, rank
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_nearest_node, __pyx_v_owning_proc};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1690, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_nearest_node, __pyx_v_owning_proc};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1690, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nearest_node);
    __Pyx_GIVEREF(__pyx_v_nearest_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_v_nearest_node);
    __Pyx_INCREF(__pyx_v_owning_proc);
    __Pyx_GIVEREF(__pyx_v_owning_proc);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_v_owning_proc);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_node = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1691
 *         rank = comm.bcast(owning_proc, owning_proc)
 *         node = comm.bcast(nearest_node, owning_proc)
 *         return xi, node, eN, rank             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_xi);
  __Pyx_GIVEREF(__pyx_v_xi);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_xi);
  __Pyx_INCREF(__pyx_v_node);
  __Pyx_GIVEREF(__pyx_v_node);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_node);
  __Pyx_INCREF(__pyx_v_eN);
  __Pyx_GIVEREF(__pyx_v_eN);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_eN);
  __Pyx_INCREF(__pyx_v_rank);
  __Pyx_GIVEREF(__pyx_v_rank);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_rank);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":1644
 *         self.subcomponents += [subcomponent]
 * 
 *     def findElementContainingCoordsKD(self, coords):             # <<<<<<<<<<<<<<
 *         """
 *         k-d tree search of nearest node, element containing coords, and owning
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.findElementContainingCoordsKD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XDECREF(__pyx_v_owning_proc);
  __Pyx_XDECREF(__pyx_v_xi);
  __Pyx_XDECREF(__pyx_v_element);
  __Pyx_XDECREF(__pyx_v_local_element);
  __Pyx_XDECREF(__pyx_v_nearest_node);
  __Pyx_XDECREF(__pyx_v_nearest_node_distance);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_eN);
  __Pyx_XDECREF(__pyx_v_rank);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1694
 * 
 * 
 *     def findElementContainingCoordsDist(self,             # <<<<<<<<<<<<<<
 *                                         coords,
 *                                         node_guess,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_31findElementContainingCoordsDist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_30findElementContainingCoordsDist[] = "\n        Distance search of nearest node, element containing coords, and owning\n        rank.\n\n        Parameters\n        ----------\n        coords: array_like\n            global coordinates to look for\n        node_guess: int\n            first guess of closest node\n        eN_guess: int\n            first guess of element containing coords\n        rank_guess: int\n            first guess of rank containing coords\n\n        Returns\n        -------\n        xi:\n            local coordinates\n        node: int\n            nearest node\n        eN: int\n            (local) element number\n        rank: int\n            processor rank containing element\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_31findElementContainingCoordsDist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_coords = 0;
  PyObject *__pyx_v_node_guess = 0;
  PyObject *__pyx_v_eN_guess = 0;
  PyObject *__pyx_v_rank_guess = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findElementContainingCoordsDist (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coords,&__pyx_n_s_node_guess,&__pyx_n_s_eN_guess,&__pyx_n_s_rank_guess,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coords)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_node_guess)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findElementContainingCoordsDist", 1, 4, 4, 1); __PYX_ERR(0, 1694, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eN_guess)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findElementContainingCoordsDist", 1, 4, 4, 2); __PYX_ERR(0, 1694, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rank_guess)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findElementContainingCoordsDist", 1, 4, 4, 3); __PYX_ERR(0, 1694, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "findElementContainingCoordsDist") < 0)) __PYX_ERR(0, 1694, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_coords = values[0];
    __pyx_v_node_guess = values[1];
    __pyx_v_eN_guess = values[2];
    __pyx_v_rank_guess = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findElementContainingCoordsDist", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1694, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.findElementContainingCoordsDist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_30findElementContainingCoordsDist(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), __pyx_v_coords, __pyx_v_node_guess, __pyx_v_eN_guess, __pyx_v_rank_guess);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_30findElementContainingCoordsDist(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_coords, PyObject *__pyx_v_node_guess, PyObject *__pyx_v_eN_guess, PyObject *__pyx_v_rank_guess) {
  PyObject *__pyx_v_mm = NULL;
  PyObject *__pyx_v_mg = NULL;
  PyObject *__pyx_v_comm = NULL;
  PyObject *__pyx_v_xi = NULL;
  PyObject *__pyx_v_local_element = NULL;
  PyObject *__pyx_v_rank_owning = NULL;
  PyObject *__pyx_v_nearest_node = NULL;
  int __pyx_v_coords_outside;
  PyObject *__pyx_v_rank_owning_previous = NULL;
  int __pyx_v_owning_rank;
  CYTHON_UNUSED PyObject *__pyx_v_dist = NULL;
  PyObject *__pyx_v_node_nb_global = NULL;
  PyObject *__pyx_v_new_rank = NULL;
  PyObject *__pyx_v_i = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_eN = NULL;
  PyObject *__pyx_v_rank = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_11 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_12 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  __Pyx_RefNannySetupContext("findElementContainingCoordsDist", 0);

  /* "mbd/ChRigidBody.pyx":1725
 *             processor rank containing element
 *         """
 *         mm = self.model_mesh  # local mesh             # <<<<<<<<<<<<<<
 *         mg = self.model_mesh.globalMesh  # global mesh
 *         comm = Comm.get().comm.tompi4py()
 */
  __pyx_t_1 = __pyx_v_self->model_mesh;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_mm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1726
 *         """
 *         mm = self.model_mesh  # local mesh
 *         mg = self.model_mesh.globalMesh  # global mesh             # <<<<<<<<<<<<<<
 *         comm = Comm.get().comm.tompi4py()
 *         xi = None  # initialised as None
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->model_mesh, __pyx_n_s_globalMesh); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mg = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1727
 *         mm = self.model_mesh  # local mesh
 *         mg = self.model_mesh.globalMesh  # global mesh
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         xi = None  # initialised as None
 *         # get nearest node on each processor
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1727, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1727, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1727, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1727, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_comm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1728
 *         mg = self.model_mesh.globalMesh  # global mesh
 *         comm = Comm.get().comm.tompi4py()
 *         xi = None  # initialised as None             # <<<<<<<<<<<<<<
 *         # get nearest node on each processor
 *         local_element = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_xi = Py_None;

  /* "mbd/ChRigidBody.pyx":1730
 *         xi = None  # initialised as None
 *         # get nearest node on each processor
 *         local_element = None             # <<<<<<<<<<<<<<
 *         # first check if element still containing coords
 *         rank_owning = rank_guess
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_local_element = Py_None;

  /* "mbd/ChRigidBody.pyx":1732
 *         local_element = None
 *         # first check if element still containing coords
 *         rank_owning = rank_guess             # <<<<<<<<<<<<<<
 *         nearest_node = node_guess
 *         if comm.rank == rank_owning:
 */
  __Pyx_INCREF(__pyx_v_rank_guess);
  __pyx_v_rank_owning = __pyx_v_rank_guess;

  /* "mbd/ChRigidBody.pyx":1733
 *         # first check if element still containing coords
 *         rank_owning = rank_guess
 *         nearest_node = node_guess             # <<<<<<<<<<<<<<
 *         if comm.rank == rank_owning:
 *             if 0 <= eN_guess < mm.nElements_global:
 */
  __Pyx_INCREF(__pyx_v_node_guess);
  __pyx_v_nearest_node = __pyx_v_node_guess;

  /* "mbd/ChRigidBody.pyx":1734
 *         rank_owning = rank_guess
 *         nearest_node = node_guess
 *         if comm.rank == rank_owning:             # <<<<<<<<<<<<<<
 *             if 0 <= eN_guess < mm.nElements_global:
 *                 xi = self.femSpace_velocity.elementMaps.getInverseValue(eN_guess, coords)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_rank_owning, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "mbd/ChRigidBody.pyx":1735
 *         nearest_node = node_guess
 *         if comm.rank == rank_owning:
 *             if 0 <= eN_guess < mm.nElements_global:             # <<<<<<<<<<<<<<
 *                 xi = self.femSpace_velocity.elementMaps.getInverseValue(eN_guess, coords)
 *                 if self.femSpace_velocity.elementMaps.referenceElement.onElement(xi):
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_int_0, __pyx_v_eN_guess, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1735, __pyx_L1_error)
    if (__Pyx_PyObject_IsTrue(__pyx_t_2)) {
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_mm, __pyx_n_s_nElements_global); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_eN_guess, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1735, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1735, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":1736
 *         if comm.rank == rank_owning:
 *             if 0 <= eN_guess < mm.nElements_global:
 *                 xi = self.femSpace_velocity.elementMaps.getInverseValue(eN_guess, coords)             # <<<<<<<<<<<<<<
 *                 if self.femSpace_velocity.elementMaps.referenceElement.onElement(xi):
 *                     local_element = eN_guess
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->femSpace_velocity, __pyx_n_s_elementMaps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_getInverseValue); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_eN_guess, __pyx_v_coords};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1736, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_eN_guess, __pyx_v_coords};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1736, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(__pyx_v_eN_guess);
        __Pyx_GIVEREF(__pyx_v_eN_guess);
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_eN_guess);
        __Pyx_INCREF(__pyx_v_coords);
        __Pyx_GIVEREF(__pyx_v_coords);
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_coords);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_xi, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":1737
 *             if 0 <= eN_guess < mm.nElements_global:
 *                 xi = self.femSpace_velocity.elementMaps.getInverseValue(eN_guess, coords)
 *                 if self.femSpace_velocity.elementMaps.referenceElement.onElement(xi):             # <<<<<<<<<<<<<<
 *                     local_element = eN_guess
 *                 else:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->femSpace_velocity, __pyx_n_s_elementMaps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1737, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_referenceElement); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1737, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_onElement); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1737, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_xi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_xi};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1737, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_xi};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1737, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1737, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
          __Pyx_INCREF(__pyx_v_xi);
          __Pyx_GIVEREF(__pyx_v_xi);
          PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_xi);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1737, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1737, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {

        /* "mbd/ChRigidBody.pyx":1738
 *                 xi = self.femSpace_velocity.elementMaps.getInverseValue(eN_guess, coords)
 *                 if self.femSpace_velocity.elementMaps.referenceElement.onElement(xi):
 *                     local_element = eN_guess             # <<<<<<<<<<<<<<
 *                 else:
 *                     xi = None
 */
        __Pyx_INCREF(__pyx_v_eN_guess);
        __Pyx_DECREF_SET(__pyx_v_local_element, __pyx_v_eN_guess);

        /* "mbd/ChRigidBody.pyx":1737
 *             if 0 <= eN_guess < mm.nElements_global:
 *                 xi = self.femSpace_velocity.elementMaps.getInverseValue(eN_guess, coords)
 *                 if self.femSpace_velocity.elementMaps.referenceElement.onElement(xi):             # <<<<<<<<<<<<<<
 *                     local_element = eN_guess
 *                 else:
 */
        goto __pyx_L5;
      }

      /* "mbd/ChRigidBody.pyx":1740
 *                     local_element = eN_guess
 *                 else:
 *                     xi = None             # <<<<<<<<<<<<<<
 *         local_element = comm.bcast(local_element, rank_owning)
 *         # if not, find new nearest node, element, and owning processor
 */
      /*else*/ {
        __Pyx_INCREF(Py_None);
        __Pyx_DECREF_SET(__pyx_v_xi, Py_None);
      }
      __pyx_L5:;

      /* "mbd/ChRigidBody.pyx":1735
 *         nearest_node = node_guess
 *         if comm.rank == rank_owning:
 *             if 0 <= eN_guess < mm.nElements_global:             # <<<<<<<<<<<<<<
 *                 xi = self.femSpace_velocity.elementMaps.getInverseValue(eN_guess, coords)
 *                 if self.femSpace_velocity.elementMaps.referenceElement.onElement(xi):
 */
    }

    /* "mbd/ChRigidBody.pyx":1734
 *         rank_owning = rank_guess
 *         nearest_node = node_guess
 *         if comm.rank == rank_owning:             # <<<<<<<<<<<<<<
 *             if 0 <= eN_guess < mm.nElements_global:
 *                 xi = self.femSpace_velocity.elementMaps.getInverseValue(eN_guess, coords)
 */
  }

  /* "mbd/ChRigidBody.pyx":1741
 *                 else:
 *                     xi = None
 *         local_element = comm.bcast(local_element, rank_owning)             # <<<<<<<<<<<<<<
 *         # if not, find new nearest node, element, and owning processor
 *         coords_outside = False
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_local_element, __pyx_v_rank_owning};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_local_element, __pyx_v_rank_owning};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_local_element);
    __Pyx_GIVEREF(__pyx_v_local_element);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_local_element);
    __Pyx_INCREF(__pyx_v_rank_owning);
    __Pyx_GIVEREF(__pyx_v_rank_owning);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_rank_owning);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_local_element, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":1743
 *         local_element = comm.bcast(local_element, rank_owning)
 *         # if not, find new nearest node, element, and owning processor
 *         coords_outside = False             # <<<<<<<<<<<<<<
 *         while local_element is None and coords_outside is False:
 *             rank_owning_previous = rank_owning
 */
  __pyx_v_coords_outside = 0;

  /* "mbd/ChRigidBody.pyx":1744
 *         # if not, find new nearest node, element, and owning processor
 *         coords_outside = False
 *         while local_element is None and coords_outside is False:             # <<<<<<<<<<<<<<
 *             rank_owning_previous = rank_owning
 *             owning_rank = False
 */
  while (1) {
    __pyx_t_7 = (__pyx_v_local_element == Py_None);
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_5 = __pyx_t_8;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_8 = ((__pyx_v_coords_outside == 0) != 0);
    __pyx_t_5 = __pyx_t_8;
    __pyx_L8_bool_binop_done:;
    if (!__pyx_t_5) break;

    /* "mbd/ChRigidBody.pyx":1745
 *         coords_outside = False
 *         while local_element is None and coords_outside is False:
 *             rank_owning_previous = rank_owning             # <<<<<<<<<<<<<<
 *             owning_rank = False
 *             if comm.rank == rank_owning:
 */
    __Pyx_INCREF(__pyx_v_rank_owning);
    __Pyx_XDECREF_SET(__pyx_v_rank_owning_previous, __pyx_v_rank_owning);

    /* "mbd/ChRigidBody.pyx":1746
 *         while local_element is None and coords_outside is False:
 *             rank_owning_previous = rank_owning
 *             owning_rank = False             # <<<<<<<<<<<<<<
 *             if comm.rank == rank_owning:
 *                 owning_rank = True
 */
    __pyx_v_owning_rank = 0;

    /* "mbd/ChRigidBody.pyx":1747
 *             rank_owning_previous = rank_owning
 *             owning_rank = False
 *             if comm.rank == rank_owning:             # <<<<<<<<<<<<<<
 *                 owning_rank = True
 *                 nearest_node, dist = pyxGetLocalNearestNode(coords=coords,
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_v_rank_owning, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1747, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1747, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":1748
 *             owning_rank = False
 *             if comm.rank == rank_owning:
 *                 owning_rank = True             # <<<<<<<<<<<<<<
 *                 nearest_node, dist = pyxGetLocalNearestNode(coords=coords,
 *                                                       nodeArray=mm.nodeArray,
 */
      __pyx_v_owning_rank = 1;

      /* "mbd/ChRigidBody.pyx":1749
 *             if comm.rank == rank_owning:
 *                 owning_rank = True
 *                 nearest_node, dist = pyxGetLocalNearestNode(coords=coords,             # <<<<<<<<<<<<<<
 *                                                       nodeArray=mm.nodeArray,
 *                                                       nodeStarOffsets=mm.nodeStarOffsets,
 */
      __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_coords);
      if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1749, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":1750
 *                 owning_rank = True
 *                 nearest_node, dist = pyxGetLocalNearestNode(coords=coords,
 *                                                       nodeArray=mm.nodeArray,             # <<<<<<<<<<<<<<
 *                                                       nodeStarOffsets=mm.nodeStarOffsets,
 *                                                       nodeStarArray=mm.nodeStarArray,
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mm, __pyx_n_s_nodeArray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_4);
      if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 1750, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":1751
 *                 nearest_node, dist = pyxGetLocalNearestNode(coords=coords,
 *                                                       nodeArray=mm.nodeArray,
 *                                                       nodeStarOffsets=mm.nodeStarOffsets,             # <<<<<<<<<<<<<<
 *                                                       nodeStarArray=mm.nodeStarArray,
 *                                                       node=nearest_node,
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mm, __pyx_n_s_nodeStarOffsets); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_t_4);
      if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 1751, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":1752
 *                                                       nodeArray=mm.nodeArray,
 *                                                       nodeStarOffsets=mm.nodeStarOffsets,
 *                                                       nodeStarArray=mm.nodeStarArray,             # <<<<<<<<<<<<<<
 *                                                       node=nearest_node,
 *                                                       rank=rank_owning)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mm, __pyx_n_s_nodeStarArray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_t_4);
      if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(0, 1752, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":1753
 *                                                       nodeStarOffsets=mm.nodeStarOffsets,
 *                                                       nodeStarArray=mm.nodeStarArray,
 *                                                       node=nearest_node,             # <<<<<<<<<<<<<<
 *                                                       rank=rank_owning)
 *                 if nearest_node >= mm.nNodes_owned:
 */
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_nearest_node); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1753, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":1754
 *                                                       nodeStarArray=mm.nodeStarArray,
 *                                                       node=nearest_node,
 *                                                       rank=rank_owning)             # <<<<<<<<<<<<<<
 *                 if nearest_node >= mm.nNodes_owned:
 *                     # change rank ownership
 */
      __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_rank_owning); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1754, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":1749
 *             if comm.rank == rank_owning:
 *                 owning_rank = True
 *                 nearest_node, dist = pyxGetLocalNearestNode(coords=coords,             # <<<<<<<<<<<<<<
 *                                                       nodeArray=mm.nodeArray,
 *                                                       nodeStarOffsets=mm.nodeStarOffsets,
 */
      __pyx_t_4 = __pyx_f_3mbd_11ChRigidBody_pyxGetLocalNearestNode(__pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_6, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
      __pyx_t_9.memview = NULL;
      __pyx_t_9.data = NULL;
      __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
      __pyx_t_10.memview = NULL;
      __pyx_t_10.data = NULL;
      __PYX_XDEC_MEMVIEW(&__pyx_t_11, 1);
      __pyx_t_11.memview = NULL;
      __pyx_t_11.data = NULL;
      __PYX_XDEC_MEMVIEW(&__pyx_t_12, 1);
      __pyx_t_12.memview = NULL;
      __pyx_t_12.data = NULL;
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        #if !CYTHON_COMPILING_IN_PYPY
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1749, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_14 = Py_TYPE(__pyx_t_1)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_14(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_3 = __pyx_t_14(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_1), 2) < 0) __PYX_ERR(0, 1749, __pyx_L1_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1749, __pyx_L1_error)
        __pyx_L12_unpacking_done:;
      }
      __Pyx_DECREF_SET(__pyx_v_nearest_node, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_dist, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":1755
 *                                                       node=nearest_node,
 *                                                       rank=rank_owning)
 *                 if nearest_node >= mm.nNodes_owned:             # <<<<<<<<<<<<<<
 *                     # change rank ownership
 *                     node_nb_global = mg.nodeNumbering_subdomain2global[nearest_node]
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mm, __pyx_n_s_nNodes_owned); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_nearest_node, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1755, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1755, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "mbd/ChRigidBody.pyx":1757
 *                 if nearest_node >= mm.nNodes_owned:
 *                     # change rank ownership
 *                     node_nb_global = mg.nodeNumbering_subdomain2global[nearest_node]             # <<<<<<<<<<<<<<
 *                     if not mg.nodeOffsets_subdomain_owned[comm.rank] <= node_nb_global < mg.nodeOffsets_subdomain_owned[comm.rank+1]:
 *                         new_rank = None
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_nodeNumbering_subdomain2global); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1757, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_v_nearest_node); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1757, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_node_nb_global, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "mbd/ChRigidBody.pyx":1758
 *                     # change rank ownership
 *                     node_nb_global = mg.nodeNumbering_subdomain2global[nearest_node]
 *                     if not mg.nodeOffsets_subdomain_owned[comm.rank] <= node_nb_global < mg.nodeOffsets_subdomain_owned[comm.rank+1]:             # <<<<<<<<<<<<<<
 *                         new_rank = None
 *                         for i in range(len(mg.nodeOffsets_subdomain_owned)):
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_nodeOffsets_subdomain_owned); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyObject_GetItem(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_node_nb_global, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1758, __pyx_L1_error)
        if (__Pyx_PyObject_IsTrue(__pyx_t_3)) {
          __Pyx_DECREF(__pyx_t_3);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_nodeOffsets_subdomain_owned); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1758, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1758, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_15 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1758, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyObject_GetItem(__pyx_t_4, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1758, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_3 = PyObject_RichCompare(__pyx_v_node_nb_global, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1758, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1758, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = ((!__pyx_t_5) != 0);
        if (__pyx_t_8) {

          /* "mbd/ChRigidBody.pyx":1759
 *                     node_nb_global = mg.nodeNumbering_subdomain2global[nearest_node]
 *                     if not mg.nodeOffsets_subdomain_owned[comm.rank] <= node_nb_global < mg.nodeOffsets_subdomain_owned[comm.rank+1]:
 *                         new_rank = None             # <<<<<<<<<<<<<<
 *                         for i in range(len(mg.nodeOffsets_subdomain_owned)):
 *                             if mg.nodeOffsets_subdomain_owned[i] > node_nb_global:
 */
          __Pyx_INCREF(Py_None);
          __Pyx_XDECREF_SET(__pyx_v_new_rank, Py_None);

          /* "mbd/ChRigidBody.pyx":1760
 *                     if not mg.nodeOffsets_subdomain_owned[comm.rank] <= node_nb_global < mg.nodeOffsets_subdomain_owned[comm.rank+1]:
 *                         new_rank = None
 *                         for i in range(len(mg.nodeOffsets_subdomain_owned)):             # <<<<<<<<<<<<<<
 *                             if mg.nodeOffsets_subdomain_owned[i] > node_nb_global:
 *                                 # changing processor
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_nodeOffsets_subdomain_owned); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1760, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_16 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 1760, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1760, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1760, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1760, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
            __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_16 = 0;
            __pyx_t_17 = NULL;
          } else {
            __pyx_t_16 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1760, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_17 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1760, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          for (;;) {
            if (likely(!__pyx_t_17)) {
              if (likely(PyList_CheckExact(__pyx_t_2))) {
                if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_16); __Pyx_INCREF(__pyx_t_3); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1760, __pyx_L1_error)
                #else
                __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1760, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              } else {
                if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_16); __Pyx_INCREF(__pyx_t_3); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 1760, __pyx_L1_error)
                #else
                __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1760, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              }
            } else {
              __pyx_t_3 = __pyx_t_17(__pyx_t_2);
              if (unlikely(!__pyx_t_3)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1760, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_3);
            }
            __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "mbd/ChRigidBody.pyx":1761
 *                         new_rank = None
 *                         for i in range(len(mg.nodeOffsets_subdomain_owned)):
 *                             if mg.nodeOffsets_subdomain_owned[i] > node_nb_global:             # <<<<<<<<<<<<<<
 *                                 # changing processor
 *                                 if new_rank is None:
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_nodeOffsets_subdomain_owned); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1761, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = PyObject_GetItem(__pyx_t_3, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1761, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_v_node_nb_global, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1761, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1761, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (__pyx_t_8) {

              /* "mbd/ChRigidBody.pyx":1763
 *                             if mg.nodeOffsets_subdomain_owned[i] > node_nb_global:
 *                                 # changing processor
 *                                 if new_rank is None:             # <<<<<<<<<<<<<<
 *                                     new_rank = i-1
 *                             # getting nearest node number on new rank
 */
              __pyx_t_8 = (__pyx_v_new_rank == Py_None);
              __pyx_t_5 = (__pyx_t_8 != 0);
              if (__pyx_t_5) {

                /* "mbd/ChRigidBody.pyx":1764
 *                                 # changing processor
 *                                 if new_rank is None:
 *                                     new_rank = i-1             # <<<<<<<<<<<<<<
 *                             # getting nearest node number on new rank
 *                         if new_rank is not None:
 */
                __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1764, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF_SET(__pyx_v_new_rank, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "mbd/ChRigidBody.pyx":1763
 *                             if mg.nodeOffsets_subdomain_owned[i] > node_nb_global:
 *                                 # changing processor
 *                                 if new_rank is None:             # <<<<<<<<<<<<<<
 *                                     new_rank = i-1
 *                             # getting nearest node number on new rank
 */
              }

              /* "mbd/ChRigidBody.pyx":1761
 *                         new_rank = None
 *                         for i in range(len(mg.nodeOffsets_subdomain_owned)):
 *                             if mg.nodeOffsets_subdomain_owned[i] > node_nb_global:             # <<<<<<<<<<<<<<
 *                                 # changing processor
 *                                 if new_rank is None:
 */
            }

            /* "mbd/ChRigidBody.pyx":1760
 *                     if not mg.nodeOffsets_subdomain_owned[comm.rank] <= node_nb_global < mg.nodeOffsets_subdomain_owned[comm.rank+1]:
 *                         new_rank = None
 *                         for i in range(len(mg.nodeOffsets_subdomain_owned)):             # <<<<<<<<<<<<<<
 *                             if mg.nodeOffsets_subdomain_owned[i] > node_nb_global:
 *                                 # changing processor
 */
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "mbd/ChRigidBody.pyx":1766
 *                                     new_rank = i-1
 *                             # getting nearest node number on new rank
 *                         if new_rank is not None:             # <<<<<<<<<<<<<<
 *                             nearest_node = node_nb_global-mg.nodeOffsets_subdomain_owned[new_rank]
 *                             rank_owning = new_rank
 */
          __pyx_t_5 = (__pyx_v_new_rank != Py_None);
          __pyx_t_8 = (__pyx_t_5 != 0);
          if (__pyx_t_8) {

            /* "mbd/ChRigidBody.pyx":1767
 *                             # getting nearest node number on new rank
 *                         if new_rank is not None:
 *                             nearest_node = node_nb_global-mg.nodeOffsets_subdomain_owned[new_rank]             # <<<<<<<<<<<<<<
 *                             rank_owning = new_rank
 *                 else:
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mg, __pyx_n_s_nodeOffsets_subdomain_owned); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1767, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_v_new_rank); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1767, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = PyNumber_Subtract(__pyx_v_node_nb_global, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1767, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF_SET(__pyx_v_nearest_node, __pyx_t_2);
            __pyx_t_2 = 0;

            /* "mbd/ChRigidBody.pyx":1768
 *                         if new_rank is not None:
 *                             nearest_node = node_nb_global-mg.nodeOffsets_subdomain_owned[new_rank]
 *                             rank_owning = new_rank             # <<<<<<<<<<<<<<
 *                 else:
 *                     # find local element
 */
            __Pyx_INCREF(__pyx_v_new_rank);
            __Pyx_DECREF_SET(__pyx_v_rank_owning, __pyx_v_new_rank);

            /* "mbd/ChRigidBody.pyx":1766
 *                                     new_rank = i-1
 *                             # getting nearest node number on new rank
 *                         if new_rank is not None:             # <<<<<<<<<<<<<<
 *                             nearest_node = node_nb_global-mg.nodeOffsets_subdomain_owned[new_rank]
 *                             rank_owning = new_rank
 */
          }

          /* "mbd/ChRigidBody.pyx":1758
 *                     # change rank ownership
 *                     node_nb_global = mg.nodeNumbering_subdomain2global[nearest_node]
 *                     if not mg.nodeOffsets_subdomain_owned[comm.rank] <= node_nb_global < mg.nodeOffsets_subdomain_owned[comm.rank+1]:             # <<<<<<<<<<<<<<
 *                         new_rank = None
 *                         for i in range(len(mg.nodeOffsets_subdomain_owned)):
 */
        }

        /* "mbd/ChRigidBody.pyx":1755
 *                                                       node=nearest_node,
 *                                                       rank=rank_owning)
 *                 if nearest_node >= mm.nNodes_owned:             # <<<<<<<<<<<<<<
 *                     # change rank ownership
 *                     node_nb_global = mg.nodeNumbering_subdomain2global[nearest_node]
 */
        goto __pyx_L13;
      }

      /* "mbd/ChRigidBody.pyx":1771
 *                 else:
 *                     # find local element
 *                     local_element = getLocalElement(self.femSpace_velocity,             # <<<<<<<<<<<<<<
 *                                                     coords,
 *                                                     nearest_node)
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_getLocalElement); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1771, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "mbd/ChRigidBody.pyx":1773
 *                     local_element = getLocalElement(self.femSpace_velocity,
 *                                                     coords,
 *                                                     nearest_node)             # <<<<<<<<<<<<<<
 *                     if local_element is not None:
 *                         xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element, coords)
 */
        __pyx_t_1 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_13 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_self->femSpace_velocity, __pyx_v_coords, __pyx_v_nearest_node};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1771, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_self->femSpace_velocity, __pyx_v_coords, __pyx_v_nearest_node};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1771, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_15 = PyTuple_New(3+__pyx_t_13); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1771, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          if (__pyx_t_1) {
            __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_1); __pyx_t_1 = NULL;
          }
          __Pyx_INCREF(__pyx_v_self->femSpace_velocity);
          __Pyx_GIVEREF(__pyx_v_self->femSpace_velocity);
          PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_13, __pyx_v_self->femSpace_velocity);
          __Pyx_INCREF(__pyx_v_coords);
          __Pyx_GIVEREF(__pyx_v_coords);
          PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_13, __pyx_v_coords);
          __Pyx_INCREF(__pyx_v_nearest_node);
          __Pyx_GIVEREF(__pyx_v_nearest_node);
          PyTuple_SET_ITEM(__pyx_t_15, 2+__pyx_t_13, __pyx_v_nearest_node);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1771, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF_SET(__pyx_v_local_element, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "mbd/ChRigidBody.pyx":1774
 *                                                     coords,
 *                                                     nearest_node)
 *                     if local_element is not None:             # <<<<<<<<<<<<<<
 *                         xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element, coords)
 *             # ownership might have changed here
 */
        __pyx_t_8 = (__pyx_v_local_element != Py_None);
        __pyx_t_5 = (__pyx_t_8 != 0);
        if (__pyx_t_5) {

          /* "mbd/ChRigidBody.pyx":1775
 *                                                     nearest_node)
 *                     if local_element is not None:
 *                         xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element, coords)             # <<<<<<<<<<<<<<
 *             # ownership might have changed here
 *             comm.barrier()
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->femSpace_velocity, __pyx_n_s_elementMaps); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1775, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_getInverseValue); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1775, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_13 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_15)) {
            PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_local_element, __pyx_v_coords};
            __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1775, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_2);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
            PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_local_element, __pyx_v_coords};
            __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1775, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_2);
          } else
          #endif
          {
            __pyx_t_1 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1775, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (__pyx_t_3) {
              __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
            }
            __Pyx_INCREF(__pyx_v_local_element);
            __Pyx_GIVEREF(__pyx_v_local_element);
            PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_13, __pyx_v_local_element);
            __Pyx_INCREF(__pyx_v_coords);
            __Pyx_GIVEREF(__pyx_v_coords);
            PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_13, __pyx_v_coords);
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1775, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF_SET(__pyx_v_xi, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "mbd/ChRigidBody.pyx":1774
 *                                                     coords,
 *                                                     nearest_node)
 *                     if local_element is not None:             # <<<<<<<<<<<<<<
 *                         xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element, coords)
 *             # ownership might have changed here
 */
        }
      }
      __pyx_L13:;

      /* "mbd/ChRigidBody.pyx":1747
 *             rank_owning_previous = rank_owning
 *             owning_rank = False
 *             if comm.rank == rank_owning:             # <<<<<<<<<<<<<<
 *                 owning_rank = True
 *                 nearest_node, dist = pyxGetLocalNearestNode(coords=coords,
 */
    }

    /* "mbd/ChRigidBody.pyx":1777
 *                         xi = self.femSpace_velocity.elementMaps.getInverseValue(local_element, coords)
 *             # ownership might have changed here
 *             comm.barrier()             # <<<<<<<<<<<<<<
 *             _, rank_owning = comm.allreduce((owning_rank, rank_owning),
 *                                             op=MPI.MAXLOC)
 */
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_barrier); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1777, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1777, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1778
 *             # ownership might have changed here
 *             comm.barrier()
 *             _, rank_owning = comm.allreduce((owning_rank, rank_owning),             # <<<<<<<<<<<<<<
 *                                             op=MPI.MAXLOC)
 *             nearest_node = comm.bcast(nearest_node, rank_owning)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_allreduce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_15 = __Pyx_PyBool_FromLong(__pyx_v_owning_rank); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_15);
    __Pyx_INCREF(__pyx_v_rank_owning);
    __Pyx_GIVEREF(__pyx_v_rank_owning);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_rank_owning);
    __pyx_t_15 = 0;
    __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":1779
 *             comm.barrier()
 *             _, rank_owning = comm.allreduce((owning_rank, rank_owning),
 *                                             op=MPI.MAXLOC)             # <<<<<<<<<<<<<<
 *             nearest_node = comm.bcast(nearest_node, rank_owning)
 *             comm.barrier()
 */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_MPI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MAXLOC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_op, __pyx_t_4) < 0) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":1778
 *             # ownership might have changed here
 *             comm.barrier()
 *             _, rank_owning = comm.allreduce((owning_rank, rank_owning),             # <<<<<<<<<<<<<<
 *                                             op=MPI.MAXLOC)
 *             nearest_node = comm.bcast(nearest_node, rank_owning)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_15, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1778, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_15 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_15 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_15);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_15 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_14 = Py_TYPE(__pyx_t_2)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_14(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_15 = __pyx_t_14(__pyx_t_2); if (unlikely(!__pyx_t_15)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_15);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1778, __pyx_L1_error)
      __pyx_t_14 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L22_unpacking_done;
      __pyx_L21_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_14 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1778, __pyx_L1_error)
      __pyx_L22_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_rank_owning, __pyx_t_15);
    __pyx_t_15 = 0;

    /* "mbd/ChRigidBody.pyx":1780
 *             _, rank_owning = comm.allreduce((owning_rank, rank_owning),
 *                                             op=MPI.MAXLOC)
 *             nearest_node = comm.bcast(nearest_node, rank_owning)             # <<<<<<<<<<<<<<
 *             comm.barrier()
 *             # if ownership is the same after 1 loop and local_element not found
 */
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_1 = NULL;
    __pyx_t_13 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
        __pyx_t_13 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_15)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_nearest_node, __pyx_v_rank_owning};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_nearest_node, __pyx_v_rank_owning};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_nearest_node);
      __Pyx_GIVEREF(__pyx_v_nearest_node);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_13, __pyx_v_nearest_node);
      __Pyx_INCREF(__pyx_v_rank_owning);
      __Pyx_GIVEREF(__pyx_v_rank_owning);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_13, __pyx_v_rank_owning);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF_SET(__pyx_v_nearest_node, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":1781
 *                                             op=MPI.MAXLOC)
 *             nearest_node = comm.bcast(nearest_node, rank_owning)
 *             comm.barrier()             # <<<<<<<<<<<<<<
 *             # if ownership is the same after 1 loop and local_element not found
 *             # => coords must be outside domain
 */
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_barrier); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1781, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1781, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":1784
 *             # if ownership is the same after 1 loop and local_element not found
 *             # => coords must be outside domain
 *             if rank_owning == rank_owning_previous and local_element is None:             # <<<<<<<<<<<<<<
 *                 coords_outside = True
 *                 break
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_rank_owning, __pyx_v_rank_owning_previous, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_8) {
    } else {
      __pyx_t_5 = __pyx_t_8;
      goto __pyx_L24_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_local_element == Py_None);
    __pyx_t_7 = (__pyx_t_8 != 0);
    __pyx_t_5 = __pyx_t_7;
    __pyx_L24_bool_binop_done:;
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":1785
 *             # => coords must be outside domain
 *             if rank_owning == rank_owning_previous and local_element is None:
 *                 coords_outside = True             # <<<<<<<<<<<<<<
 *                 break
 *         comm.barrier()
 */
      __pyx_v_coords_outside = 1;

      /* "mbd/ChRigidBody.pyx":1786
 *             if rank_owning == rank_owning_previous and local_element is None:
 *                 coords_outside = True
 *                 break             # <<<<<<<<<<<<<<
 *         comm.barrier()
 *         xi = comm.bcast(xi, rank_owning)
 */
      goto __pyx_L7_break;

      /* "mbd/ChRigidBody.pyx":1784
 *             # if ownership is the same after 1 loop and local_element not found
 *             # => coords must be outside domain
 *             if rank_owning == rank_owning_previous and local_element is None:             # <<<<<<<<<<<<<<
 *                 coords_outside = True
 *                 break
 */
    }
  }
  __pyx_L7_break:;

  /* "mbd/ChRigidBody.pyx":1787
 *                 coords_outside = True
 *                 break
 *         comm.barrier()             # <<<<<<<<<<<<<<
 *         xi = comm.bcast(xi, rank_owning)
 *         eN = comm.bcast(local_element, rank_owning)
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_barrier); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1787, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1787, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1788
 *                 break
 *         comm.barrier()
 *         xi = comm.bcast(xi, rank_owning)             # <<<<<<<<<<<<<<
 *         eN = comm.bcast(local_element, rank_owning)
 *         rank = rank_owning
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_2 = NULL;
  __pyx_t_13 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
      __pyx_t_13 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_15)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_xi, __pyx_v_rank_owning};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1788, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_xi, __pyx_v_rank_owning};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1788, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xi);
    __Pyx_GIVEREF(__pyx_v_xi);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_13, __pyx_v_xi);
    __Pyx_INCREF(__pyx_v_rank_owning);
    __Pyx_GIVEREF(__pyx_v_rank_owning);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_13, __pyx_v_rank_owning);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF_SET(__pyx_v_xi, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1789
 *         comm.barrier()
 *         xi = comm.bcast(xi, rank_owning)
 *         eN = comm.bcast(local_element, rank_owning)             # <<<<<<<<<<<<<<
 *         rank = rank_owning
 *         node = comm.bcast(nearest_node, rank_owning)
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_1 = NULL;
  __pyx_t_13 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
      __pyx_t_13 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_15)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_local_element, __pyx_v_rank_owning};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1789, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_local_element, __pyx_v_rank_owning};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1789, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_local_element);
    __Pyx_GIVEREF(__pyx_v_local_element);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_13, __pyx_v_local_element);
    __Pyx_INCREF(__pyx_v_rank_owning);
    __Pyx_GIVEREF(__pyx_v_rank_owning);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_13, __pyx_v_rank_owning);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_v_eN = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1790
 *         xi = comm.bcast(xi, rank_owning)
 *         eN = comm.bcast(local_element, rank_owning)
 *         rank = rank_owning             # <<<<<<<<<<<<<<
 *         node = comm.bcast(nearest_node, rank_owning)
 *         return xi, node, eN, rank
 */
  __Pyx_INCREF(__pyx_v_rank_owning);
  __pyx_v_rank = __pyx_v_rank_owning;

  /* "mbd/ChRigidBody.pyx":1791
 *         eN = comm.bcast(local_element, rank_owning)
 *         rank = rank_owning
 *         node = comm.bcast(nearest_node, rank_owning)             # <<<<<<<<<<<<<<
 *         return xi, node, eN, rank
 * 
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_2 = NULL;
  __pyx_t_13 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
      __pyx_t_13 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_15)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_nearest_node, __pyx_v_rank_owning};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1791, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_nearest_node, __pyx_v_rank_owning};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1791, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_nearest_node);
    __Pyx_GIVEREF(__pyx_v_nearest_node);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_13, __pyx_v_nearest_node);
    __Pyx_INCREF(__pyx_v_rank_owning);
    __Pyx_GIVEREF(__pyx_v_rank_owning);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_13, __pyx_v_rank_owning);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_v_node = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":1792
 *         rank = rank_owning
 *         node = comm.bcast(nearest_node, rank_owning)
 *         return xi, node, eN, rank             # <<<<<<<<<<<<<<
 * 
 *     def getFluidVelocityLocalCoords(self, xi, element, rank):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_xi);
  __Pyx_GIVEREF(__pyx_v_xi);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_xi);
  __Pyx_INCREF(__pyx_v_node);
  __Pyx_GIVEREF(__pyx_v_node);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_node);
  __Pyx_INCREF(__pyx_v_eN);
  __Pyx_GIVEREF(__pyx_v_eN);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_eN);
  __Pyx_INCREF(__pyx_v_rank);
  __Pyx_GIVEREF(__pyx_v_rank);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_rank);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":1694
 * 
 * 
 *     def findElementContainingCoordsDist(self,             # <<<<<<<<<<<<<<
 *                                         coords,
 *                                         node_guess,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_11, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_12, 1);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.findElementContainingCoordsDist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mm);
  __Pyx_XDECREF(__pyx_v_mg);
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XDECREF(__pyx_v_xi);
  __Pyx_XDECREF(__pyx_v_local_element);
  __Pyx_XDECREF(__pyx_v_rank_owning);
  __Pyx_XDECREF(__pyx_v_nearest_node);
  __Pyx_XDECREF(__pyx_v_rank_owning_previous);
  __Pyx_XDECREF(__pyx_v_dist);
  __Pyx_XDECREF(__pyx_v_node_nb_global);
  __Pyx_XDECREF(__pyx_v_new_rank);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_eN);
  __Pyx_XDECREF(__pyx_v_rank);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1794
 *         return xi, node, eN, rank
 * 
 *     def getFluidVelocityLocalCoords(self, xi, element, rank):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_33getFluidVelocityLocalCoords(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_32getFluidVelocityLocalCoords[] = "\n        Parameters\n        ----------\n        xi:\n            local coords in element\n        element: int\n            element number (local to processor 'rank')\n        rank: int\n            rank of processor owning the element\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_33getFluidVelocityLocalCoords(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xi = 0;
  PyObject *__pyx_v_element = 0;
  PyObject *__pyx_v_rank = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFluidVelocityLocalCoords (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xi,&__pyx_n_s_element,&__pyx_n_s_rank,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xi)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_element)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getFluidVelocityLocalCoords", 1, 3, 3, 1); __PYX_ERR(0, 1794, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rank)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getFluidVelocityLocalCoords", 1, 3, 3, 2); __PYX_ERR(0, 1794, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getFluidVelocityLocalCoords") < 0)) __PYX_ERR(0, 1794, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xi = values[0];
    __pyx_v_element = values[1];
    __pyx_v_rank = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getFluidVelocityLocalCoords", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1794, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.getFluidVelocityLocalCoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_32getFluidVelocityLocalCoords(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), __pyx_v_xi, __pyx_v_element, __pyx_v_rank);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_32getFluidVelocityLocalCoords(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_xi, PyObject *__pyx_v_element, PyObject *__pyx_v_rank) {
  PyObject *__pyx_v_comm = NULL;
  PyObject *__pyx_v_u = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("getFluidVelocityLocalCoords", 0);

  /* "mbd/ChRigidBody.pyx":1806
 *         """
 *         #log Profiling.logEvent("FINDING VELOCITY AT RANK "+str(rank)+", "+str(element) + ", " + str(xi))
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         if comm.rank == rank:
 *             u = self.u[1].getValue(element, xi)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1806, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_comm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1807
 *         #log Profiling.logEvent("FINDING VELOCITY AT RANK "+str(rank)+", "+str(element) + ", " + str(xi))
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == rank:             # <<<<<<<<<<<<<<
 *             u = self.u[1].getValue(element, xi)
 *             v = self.u[2].getValue(element, xi)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_rank, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "mbd/ChRigidBody.pyx":1808
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == rank:
 *             u = self.u[1].getValue(element, xi)             # <<<<<<<<<<<<<<
 *             v = self.u[2].getValue(element, xi)
 *             if self.nd > 2:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->u, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_getValue); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_element, __pyx_v_xi};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1808, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_element, __pyx_v_xi};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1808, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_element);
      __Pyx_GIVEREF(__pyx_v_element);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_element);
      __Pyx_INCREF(__pyx_v_xi);
      __Pyx_GIVEREF(__pyx_v_xi);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_xi);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_u = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1809
 *         if comm.rank == rank:
 *             u = self.u[1].getValue(element, xi)
 *             v = self.u[2].getValue(element, xi)             # <<<<<<<<<<<<<<
 *             if self.nd > 2:
 *                 w = self.u[3].getValue(element, xi)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_self->u, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getValue); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_element, __pyx_v_xi};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1809, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_element, __pyx_v_xi};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1809, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1809, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_element);
      __Pyx_GIVEREF(__pyx_v_element);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_6, __pyx_v_element);
      __Pyx_INCREF(__pyx_v_xi);
      __Pyx_GIVEREF(__pyx_v_xi);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_6, __pyx_v_xi);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1809, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_v = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1810
 *             u = self.u[1].getValue(element, xi)
 *             v = self.u[2].getValue(element, xi)
 *             if self.nd > 2:             # <<<<<<<<<<<<<<
 *                 w = self.u[3].getValue(element, xi)
 *             if self.nd <= 2:
 */
    __pyx_t_5 = ((__pyx_v_self->nd > 2) != 0);
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":1811
 *             v = self.u[2].getValue(element, xi)
 *             if self.nd > 2:
 *                 w = self.u[3].getValue(element, xi)             # <<<<<<<<<<<<<<
 *             if self.nd <= 2:
 *                 w = 0
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_self->u, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_getValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_element, __pyx_v_xi};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1811, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_element, __pyx_v_xi};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1811, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1811, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_v_element);
        __Pyx_GIVEREF(__pyx_v_element);
        PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_element);
        __Pyx_INCREF(__pyx_v_xi);
        __Pyx_GIVEREF(__pyx_v_xi);
        PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_xi);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1811, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_w = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":1810
 *             u = self.u[1].getValue(element, xi)
 *             v = self.u[2].getValue(element, xi)
 *             if self.nd > 2:             # <<<<<<<<<<<<<<
 *                 w = self.u[3].getValue(element, xi)
 *             if self.nd <= 2:
 */
    }

    /* "mbd/ChRigidBody.pyx":1812
 *             if self.nd > 2:
 *                 w = self.u[3].getValue(element, xi)
 *             if self.nd <= 2:             # <<<<<<<<<<<<<<
 *                 w = 0
 *             # broadcast to all processors
 */
    __pyx_t_5 = ((__pyx_v_self->nd <= 2) != 0);
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":1813
 *                 w = self.u[3].getValue(element, xi)
 *             if self.nd <= 2:
 *                 w = 0             # <<<<<<<<<<<<<<
 *             # broadcast to all processors
 *         else:
 */
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_XDECREF_SET(__pyx_v_w, __pyx_int_0);

      /* "mbd/ChRigidBody.pyx":1812
 *             if self.nd > 2:
 *                 w = self.u[3].getValue(element, xi)
 *             if self.nd <= 2:             # <<<<<<<<<<<<<<
 *                 w = 0
 *             # broadcast to all processors
 */
    }

    /* "mbd/ChRigidBody.pyx":1807
 *         #log Profiling.logEvent("FINDING VELOCITY AT RANK "+str(rank)+", "+str(element) + ", " + str(xi))
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == rank:             # <<<<<<<<<<<<<<
 *             u = self.u[1].getValue(element, xi)
 *             v = self.u[2].getValue(element, xi)
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":1816
 *             # broadcast to all processors
 *         else:
 *             u = v = w = None             # <<<<<<<<<<<<<<
 *         u = comm.bcast(u, rank)
 *         v = comm.bcast(v, rank)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_u = Py_None;
    __Pyx_INCREF(Py_None);
    __pyx_v_v = Py_None;
    __Pyx_INCREF(Py_None);
    __pyx_v_w = Py_None;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":1817
 *         else:
 *             u = v = w = None
 *         u = comm.bcast(u, rank)             # <<<<<<<<<<<<<<
 *         v = comm.bcast(v, rank)
 *         w = comm.bcast(w, rank)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_u, __pyx_v_rank};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_u, __pyx_v_rank};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_u);
    __Pyx_GIVEREF(__pyx_v_u);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_u);
    __Pyx_INCREF(__pyx_v_rank);
    __Pyx_GIVEREF(__pyx_v_rank);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_rank);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_u, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":1818
 *             u = v = w = None
 *         u = comm.bcast(u, rank)
 *         v = comm.bcast(v, rank)             # <<<<<<<<<<<<<<
 *         w = comm.bcast(w, rank)
 *         #log Profiling.logEvent("FOUND VELOCITY")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_v, __pyx_v_rank};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1818, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_v, __pyx_v_rank};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1818, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_v);
    __Pyx_INCREF(__pyx_v_rank);
    __Pyx_GIVEREF(__pyx_v_rank);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_rank);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_v, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":1819
 *         u = comm.bcast(u, rank)
 *         v = comm.bcast(v, rank)
 *         w = comm.bcast(w, rank)             # <<<<<<<<<<<<<<
 *         #log Profiling.logEvent("FOUND VELOCITY")
 *         return u, v, w
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_v_w)) { __Pyx_RaiseUnboundLocalError("w"); __PYX_ERR(0, 1819, __pyx_L1_error) }
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_w, __pyx_v_rank};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_w, __pyx_v_rank};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_w);
    __Pyx_GIVEREF(__pyx_v_w);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_w);
    __Pyx_INCREF(__pyx_v_rank);
    __Pyx_GIVEREF(__pyx_v_rank);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_rank);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":1821
 *         w = comm.bcast(w, rank)
 *         #log Profiling.logEvent("FOUND VELOCITY")
 *         return u, v, w             # <<<<<<<<<<<<<<
 * 
 *     def getFluidVelocityGradientLocalCoords(self, xi, element, rank):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_u);
  __Pyx_GIVEREF(__pyx_v_u);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_u);
  __Pyx_INCREF(__pyx_v_v);
  __Pyx_GIVEREF(__pyx_v_v);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_v);
  __Pyx_INCREF(__pyx_v_w);
  __Pyx_GIVEREF(__pyx_v_w);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_w);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":1794
 *         return xi, node, eN, rank
 * 
 *     def getFluidVelocityLocalCoords(self, xi, element, rank):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.getFluidVelocityLocalCoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XDECREF(__pyx_v_u);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1823
 *         return u, v, w
 * 
 *     def getFluidVelocityGradientLocalCoords(self, xi, element, rank):             # <<<<<<<<<<<<<<
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == rank:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_35getFluidVelocityGradientLocalCoords(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_35getFluidVelocityGradientLocalCoords(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xi = 0;
  PyObject *__pyx_v_element = 0;
  PyObject *__pyx_v_rank = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFluidVelocityGradientLocalCoords (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xi,&__pyx_n_s_element,&__pyx_n_s_rank,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xi)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_element)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getFluidVelocityGradientLocalCoords", 1, 3, 3, 1); __PYX_ERR(0, 1823, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rank)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getFluidVelocityGradientLocalCoords", 1, 3, 3, 2); __PYX_ERR(0, 1823, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getFluidVelocityGradientLocalCoords") < 0)) __PYX_ERR(0, 1823, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xi = values[0];
    __pyx_v_element = values[1];
    __pyx_v_rank = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getFluidVelocityGradientLocalCoords", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1823, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.getFluidVelocityGradientLocalCoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_34getFluidVelocityGradientLocalCoords(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), __pyx_v_xi, __pyx_v_element, __pyx_v_rank);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_34getFluidVelocityGradientLocalCoords(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_xi, PyObject *__pyx_v_element, PyObject *__pyx_v_rank) {
  PyObject *__pyx_v_comm = NULL;
  PyObject *__pyx_v_u_grad = NULL;
  PyObject *__pyx_v_v_grad = NULL;
  PyObject *__pyx_v_w_grad = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("getFluidVelocityGradientLocalCoords", 0);

  /* "mbd/ChRigidBody.pyx":1824
 * 
 *     def getFluidVelocityGradientLocalCoords(self, xi, element, rank):
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         if comm.rank == rank:
 *             u_grad = self.u_grad[1].getGradientValue(element, xi)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1824, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1824, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1824, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1824, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_comm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":1825
 *     def getFluidVelocityGradientLocalCoords(self, xi, element, rank):
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == rank:             # <<<<<<<<<<<<<<
 *             u_grad = self.u_grad[1].getGradientValue(element, xi)
 *             u_grad = comm.bcast(u_grad, rank)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_rank, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "mbd/ChRigidBody.pyx":1826
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == rank:
 *             u_grad = self.u_grad[1].getGradientValue(element, xi)             # <<<<<<<<<<<<<<
 *             u_grad = comm.bcast(u_grad, rank)
 *             v_grad = self.u[2].getGradientValue(element, xi)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u_grad); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getGradientValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_element, __pyx_v_xi};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_element, __pyx_v_xi};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_element);
      __Pyx_GIVEREF(__pyx_v_element);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_element);
      __Pyx_INCREF(__pyx_v_xi);
      __Pyx_GIVEREF(__pyx_v_xi);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_xi);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_u_grad = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1827
 *         if comm.rank == rank:
 *             u_grad = self.u_grad[1].getGradientValue(element, xi)
 *             u_grad = comm.bcast(u_grad, rank)             # <<<<<<<<<<<<<<
 *             v_grad = self.u[2].getGradientValue(element, xi)
 *             v_grad = comm.bcast(v_grad, rank)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_u_grad, __pyx_v_rank};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_u_grad, __pyx_v_rank};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_u_grad);
      __Pyx_GIVEREF(__pyx_v_u_grad);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_u_grad);
      __Pyx_INCREF(__pyx_v_rank);
      __Pyx_GIVEREF(__pyx_v_rank);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_rank);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_u_grad, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1828
 *             u_grad = self.u_grad[1].getGradientValue(element, xi)
 *             u_grad = comm.bcast(u_grad, rank)
 *             v_grad = self.u[2].getGradientValue(element, xi)             # <<<<<<<<<<<<<<
 *             v_grad = comm.bcast(v_grad, rank)
 *             if self.nd > 2:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->u, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_getGradientValue); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_element, __pyx_v_xi};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1828, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_element, __pyx_v_xi};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1828, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_element);
      __Pyx_GIVEREF(__pyx_v_element);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_element);
      __Pyx_INCREF(__pyx_v_xi);
      __Pyx_GIVEREF(__pyx_v_xi);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_xi);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_v_grad = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1829
 *             u_grad = comm.bcast(u_grad, rank)
 *             v_grad = self.u[2].getGradientValue(element, xi)
 *             v_grad = comm.bcast(v_grad, rank)             # <<<<<<<<<<<<<<
 *             if self.nd > 2:
 *                 w_grad = self.u[3].getGradientValue(element, xi)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_v_grad, __pyx_v_rank};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1829, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_v_grad, __pyx_v_rank};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1829, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_v_grad);
      __Pyx_GIVEREF(__pyx_v_v_grad);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_6, __pyx_v_v_grad);
      __Pyx_INCREF(__pyx_v_rank);
      __Pyx_GIVEREF(__pyx_v_rank);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_6, __pyx_v_rank);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_v_grad, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1830
 *             v_grad = self.u[2].getGradientValue(element, xi)
 *             v_grad = comm.bcast(v_grad, rank)
 *             if self.nd > 2:             # <<<<<<<<<<<<<<
 *                 w_grad = self.u[3].getGradientValue(element, xi)
 *             if self.nd <= 2:
 */
    __pyx_t_5 = ((__pyx_v_self->nd > 2) != 0);
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":1831
 *             v_grad = comm.bcast(v_grad, rank)
 *             if self.nd > 2:
 *                 w_grad = self.u[3].getGradientValue(element, xi)             # <<<<<<<<<<<<<<
 *             if self.nd <= 2:
 *                 w_grad = 0
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_self->u, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getGradientValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_element, __pyx_v_xi};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1831, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_element, __pyx_v_xi};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1831, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1831, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_v_element);
        __Pyx_GIVEREF(__pyx_v_element);
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_element);
        __Pyx_INCREF(__pyx_v_xi);
        __Pyx_GIVEREF(__pyx_v_xi);
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_xi);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1831, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_w_grad = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":1830
 *             v_grad = self.u[2].getGradientValue(element, xi)
 *             v_grad = comm.bcast(v_grad, rank)
 *             if self.nd > 2:             # <<<<<<<<<<<<<<
 *                 w_grad = self.u[3].getGradientValue(element, xi)
 *             if self.nd <= 2:
 */
    }

    /* "mbd/ChRigidBody.pyx":1832
 *             if self.nd > 2:
 *                 w_grad = self.u[3].getGradientValue(element, xi)
 *             if self.nd <= 2:             # <<<<<<<<<<<<<<
 *                 w_grad = 0
 *             # broadcast to all processors
 */
    __pyx_t_5 = ((__pyx_v_self->nd <= 2) != 0);
    if (__pyx_t_5) {

      /* "mbd/ChRigidBody.pyx":1833
 *                 w_grad = self.u[3].getGradientValue(element, xi)
 *             if self.nd <= 2:
 *                 w_grad = 0             # <<<<<<<<<<<<<<
 *             # broadcast to all processors
 *             w_grad = comm.bcast(w_grad, rank)
 */
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_XDECREF_SET(__pyx_v_w_grad, __pyx_int_0);

      /* "mbd/ChRigidBody.pyx":1832
 *             if self.nd > 2:
 *                 w_grad = self.u[3].getGradientValue(element, xi)
 *             if self.nd <= 2:             # <<<<<<<<<<<<<<
 *                 w_grad = 0
 *             # broadcast to all processors
 */
    }

    /* "mbd/ChRigidBody.pyx":1835
 *                 w_grad = 0
 *             # broadcast to all processors
 *             w_grad = comm.bcast(w_grad, rank)             # <<<<<<<<<<<<<<
 *         return u_grad, v_grad, w_grad
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1835, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(!__pyx_v_w_grad)) { __Pyx_RaiseUnboundLocalError("w_grad"); __PYX_ERR(0, 1835, __pyx_L1_error) }
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_w_grad, __pyx_v_rank};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1835, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_w_grad, __pyx_v_rank};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1835, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_w_grad);
      __Pyx_GIVEREF(__pyx_v_w_grad);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_w_grad);
      __Pyx_INCREF(__pyx_v_rank);
      __Pyx_GIVEREF(__pyx_v_rank);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_rank);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_w_grad, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":1825
 *     def getFluidVelocityGradientLocalCoords(self, xi, element, rank):
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == rank:             # <<<<<<<<<<<<<<
 *             u_grad = self.u_grad[1].getGradientValue(element, xi)
 *             u_grad = comm.bcast(u_grad, rank)
 */
  }

  /* "mbd/ChRigidBody.pyx":1836
 *             # broadcast to all processors
 *             w_grad = comm.bcast(w_grad, rank)
 *         return u_grad, v_grad, w_grad             # <<<<<<<<<<<<<<
 * 
 *     def setCollisionEnvelopeMargin(self, double envelope, double margin):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_u_grad)) { __Pyx_RaiseUnboundLocalError("u_grad"); __PYX_ERR(0, 1836, __pyx_L1_error) }
  if (unlikely(!__pyx_v_v_grad)) { __Pyx_RaiseUnboundLocalError("v_grad"); __PYX_ERR(0, 1836, __pyx_L1_error) }
  if (unlikely(!__pyx_v_w_grad)) { __Pyx_RaiseUnboundLocalError("w_grad"); __PYX_ERR(0, 1836, __pyx_L1_error) }
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_u_grad);
  __Pyx_GIVEREF(__pyx_v_u_grad);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_u_grad);
  __Pyx_INCREF(__pyx_v_v_grad);
  __Pyx_GIVEREF(__pyx_v_v_grad);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_v_grad);
  __Pyx_INCREF(__pyx_v_w_grad);
  __Pyx_GIVEREF(__pyx_v_w_grad);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_w_grad);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":1823
 *         return u, v, w
 * 
 *     def getFluidVelocityGradientLocalCoords(self, xi, element, rank):             # <<<<<<<<<<<<<<
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == rank:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.getFluidVelocityGradientLocalCoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XDECREF(__pyx_v_u_grad);
  __Pyx_XDECREF(__pyx_v_v_grad);
  __Pyx_XDECREF(__pyx_v_w_grad);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1838
 *         return u_grad, v_grad, w_grad
 * 
 *     def setCollisionEnvelopeMargin(self, double envelope, double margin):             # <<<<<<<<<<<<<<
 *         self.thisptr.setCollisionEnvelopeMargin(envelope, margin)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_37setCollisionEnvelopeMargin(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_37setCollisionEnvelopeMargin(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_envelope;
  double __pyx_v_margin;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCollisionEnvelopeMargin (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_envelope,&__pyx_n_s_margin,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_envelope)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_margin)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCollisionEnvelopeMargin", 1, 2, 2, 1); __PYX_ERR(0, 1838, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setCollisionEnvelopeMargin") < 0)) __PYX_ERR(0, 1838, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_envelope = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_envelope == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1838, __pyx_L3_error)
    __pyx_v_margin = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_margin == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1838, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setCollisionEnvelopeMargin", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1838, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.setCollisionEnvelopeMargin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_36setCollisionEnvelopeMargin(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), __pyx_v_envelope, __pyx_v_margin);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_36setCollisionEnvelopeMargin(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, double __pyx_v_envelope, double __pyx_v_margin) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCollisionEnvelopeMargin", 0);

  /* "mbd/ChRigidBody.pyx":1839
 * 
 *     def setCollisionEnvelopeMargin(self, double envelope, double margin):
 *         self.thisptr.setCollisionEnvelopeMargin(envelope, margin)             # <<<<<<<<<<<<<<
 * 
 *     # def findFluidVelocityAtCoords(self, coords):
 */
  __pyx_v_self->thisptr->setCollisionEnvelopeMargin(__pyx_v_envelope, __pyx_v_margin);

  /* "mbd/ChRigidBody.pyx":1838
 *         return u_grad, v_grad, w_grad
 * 
 *     def setCollisionEnvelopeMargin(self, double envelope, double margin):             # <<<<<<<<<<<<<<
 *         self.thisptr.setCollisionEnvelopeMargin(envelope, margin)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1374
 * cdef class ProtChSystem:
 *     cdef cppSystem * thisptr
 *     cdef public object model             # <<<<<<<<<<<<<<
 *     cdef public double dt_init
 *     cdef double proteus_dt
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5model_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_5model___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_5model___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->model);
  __pyx_r = __pyx_v_self->model;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_5model_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_5model_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5model_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5model_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_5model_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_5model_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1375
 *     cdef cppSystem * thisptr
 *     cdef public object model
 *     cdef public double dt_init             # <<<<<<<<<<<<<<
 *     cdef double proteus_dt
 *     cdef double proteus_dt_last
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7dt_init_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7dt_init_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7dt_init___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7dt_init___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->dt_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.dt_init.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7dt_init_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7dt_init_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7dt_init_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7dt_init_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1375, __pyx_L1_error)
  __pyx_v_self->dt_init = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.dt_init.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1393
 *     cdef double t
 *     cdef public:
 *         cdef object subcomponents             # <<<<<<<<<<<<<<
 *         double chrono_dt
 *         bool build_kdtree
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->subcomponents);
  __pyx_r = __pyx_v_self->subcomponents;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->subcomponents);
  __Pyx_DECREF(__pyx_v_self->subcomponents);
  __pyx_v_self->subcomponents = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->subcomponents);
  __Pyx_DECREF(__pyx_v_self->subcomponents);
  __pyx_v_self->subcomponents = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1394
 *     cdef public:
 *         cdef object subcomponents
 *         double chrono_dt             # <<<<<<<<<<<<<<
 *         bool build_kdtree
 *         bool dist_search
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->chrono_dt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.chrono_dt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1394, __pyx_L1_error)
  __pyx_v_self->chrono_dt = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.chrono_dt.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1395
 *         cdef object subcomponents
 *         double chrono_dt
 *         bool build_kdtree             # <<<<<<<<<<<<<<
 *         bool dist_search
 *         bool parallel_mode
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->build_kdtree); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.build_kdtree.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1395, __pyx_L1_error)
  __pyx_v_self->build_kdtree = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.build_kdtree.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1396
 *         double chrono_dt
 *         bool build_kdtree
 *         bool dist_search             # <<<<<<<<<<<<<<
 *         bool parallel_mode
 *         int chrono_processor
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11dist_search_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11dist_search_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11dist_search___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11dist_search___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->dist_search); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.dist_search.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11dist_search_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11dist_search_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11dist_search_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11dist_search_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1396, __pyx_L1_error)
  __pyx_v_self->dist_search = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.dist_search.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1397
 *         bool build_kdtree
 *         bool dist_search
 *         bool parallel_mode             # <<<<<<<<<<<<<<
 *         int chrono_processor
 *         bool first_step
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->parallel_mode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.parallel_mode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1397, __pyx_L1_error)
  __pyx_v_self->parallel_mode = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.parallel_mode.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1398
 *         bool dist_search
 *         bool parallel_mode
 *         int chrono_processor             # <<<<<<<<<<<<<<
 *         bool first_step
 *         string scheme  # coupling scheme
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->chrono_processor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.chrono_processor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1398, __pyx_L1_error)
  __pyx_v_self->chrono_processor = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.chrono_processor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1399
 *         bool parallel_mode
 *         int chrono_processor
 *         bool first_step             # <<<<<<<<<<<<<<
 *         string scheme  # coupling scheme
 *         string prediction  # force for prediction
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10first_step_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10first_step_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10first_step___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10first_step___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->first_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.first_step.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10first_step_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10first_step_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10first_step_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10first_step_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1399, __pyx_L1_error)
  __pyx_v_self->first_step = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.first_step.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1400
 *         int chrono_processor
 *         bool first_step
 *         string scheme  # coupling scheme             # <<<<<<<<<<<<<<
 *         string prediction  # force for prediction
 *         int step_nb  # number of steps
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6scheme_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6scheme_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6scheme___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6scheme___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->scheme); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.scheme.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6scheme_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6scheme_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6scheme_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6scheme_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1400, __pyx_L1_error)
  __pyx_v_self->scheme = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.scheme.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1401
 *         bool first_step
 *         string scheme  # coupling scheme
 *         string prediction  # force for prediction             # <<<<<<<<<<<<<<
 *         int step_nb  # number of steps
 *         int step_start  # starting step
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10prediction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10prediction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10prediction___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10prediction___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->prediction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.prediction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10prediction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10prediction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10prediction_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10prediction_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1401, __pyx_L1_error)
  __pyx_v_self->prediction = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.prediction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1402
 *         string scheme  # coupling scheme
 *         string prediction  # force for prediction
 *         int step_nb  # number of steps             # <<<<<<<<<<<<<<
 *         int step_start  # starting step
 *         double sampleRate
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7step_nb_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7step_nb_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7step_nb___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7step_nb___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->step_nb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.step_nb.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7step_nb_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7step_nb_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7step_nb_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_7step_nb_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1402, __pyx_L1_error)
  __pyx_v_self->step_nb = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.step_nb.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1403
 *         string prediction  # force for prediction
 *         int step_nb  # number of steps
 *         int step_start  # starting step             # <<<<<<<<<<<<<<
 *         double sampleRate
 *         double next_sample
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10step_start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10step_start_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10step_start___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10step_start___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->step_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.step_start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10step_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10step_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10step_start_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10step_start_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L1_error)
  __pyx_v_self->step_start = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.step_start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1404
 *         int step_nb  # number of steps
 *         int step_start  # starting step
 *         double sampleRate             # <<<<<<<<<<<<<<
 *         double next_sample
 *         bool record_values
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->sampleRate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.sampleRate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1404, __pyx_L1_error)
  __pyx_v_self->sampleRate = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.sampleRate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1405
 *         int step_start  # starting step
 *         double sampleRate
 *         double next_sample             # <<<<<<<<<<<<<<
 *         bool record_values
 *         object model_mesh
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11next_sample_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11next_sample_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11next_sample___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11next_sample___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->next_sample); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.next_sample.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11next_sample_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11next_sample_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11next_sample_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_11next_sample_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1405, __pyx_L1_error)
  __pyx_v_self->next_sample = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.next_sample.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1406
 *         double sampleRate
 *         double next_sample
 *         bool record_values             # <<<<<<<<<<<<<<
 *         object model_mesh
 *         object model_addedmass
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13record_values_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13record_values_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13record_values___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13record_values___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->record_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.record_values.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13record_values_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13record_values_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13record_values_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_13record_values_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1406, __pyx_L1_error)
  __pyx_v_self->record_values = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.record_values.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1407
 *         double next_sample
 *         bool record_values
 *         object model_mesh             # <<<<<<<<<<<<<<
 *         object model_addedmass
 *         ProtChAddedMass ProtChAddedMass
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->model_mesh);
  __pyx_r = __pyx_v_self->model_mesh;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->model_mesh);
  __Pyx_DECREF(__pyx_v_self->model_mesh);
  __pyx_v_self->model_mesh = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->model_mesh);
  __Pyx_DECREF(__pyx_v_self->model_mesh);
  __pyx_v_self->model_mesh = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1408
 *         bool record_values
 *         object model_mesh
 *         object model_addedmass             # <<<<<<<<<<<<<<
 *         ProtChAddedMass ProtChAddedMass
 *         int tCount
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->model_addedmass);
  __pyx_r = __pyx_v_self->model_addedmass;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->model_addedmass);
  __Pyx_DECREF(__pyx_v_self->model_addedmass);
  __pyx_v_self->model_addedmass = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->model_addedmass);
  __Pyx_DECREF(__pyx_v_self->model_addedmass);
  __pyx_v_self->model_addedmass = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1409
 *         object model_mesh
 *         object model_addedmass
 *         ProtChAddedMass ProtChAddedMass             # <<<<<<<<<<<<<<
 *         int tCount
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ProtChAddedMass));
  __pyx_r = ((PyObject *)__pyx_v_self->ProtChAddedMass);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3mbd_11ChRigidBody_ProtChAddedMass))))) __PYX_ERR(0, 1409, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ProtChAddedMass);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChAddedMass));
  __pyx_v_self->ProtChAddedMass = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.ProtChAddedMass.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ProtChAddedMass);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChAddedMass));
  __pyx_v_self->ProtChAddedMass = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1410
 *         object model_addedmass
 *         ProtChAddedMass ProtChAddedMass
 *         int tCount             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, np.ndarray gravity, int nd=3, dt_init=0., sampleRate=0):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6tCount_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6tCount_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6tCount___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6tCount___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->tCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.tCount.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6tCount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6tCount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6tCount_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_12ProtChSystem_6tCount_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1410, __pyx_L1_error)
  __pyx_v_self->tCount = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChSystem.tCount.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1903
 * cdef class Mesh:
 *     cdef cppMesh * thisptr
 *     def __cinit__(self, ProtChSystem system):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[ch.ChMesh] mesh = make_shared[ch.ChMesh]()
 *         self.thisptr = newMesh(system.thisptr.system, mesh)
 */

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_4Mesh_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_4Mesh_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_system,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_system)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1903, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_system = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1903, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.Mesh.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_system), __pyx_ptype_3mbd_11ChRigidBody_ProtChSystem, 1, "system", 0))) __PYX_ERR(0, 1903, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_4Mesh___cinit__(((struct __pyx_obj_3mbd_11ChRigidBody_Mesh *)__pyx_v_self), __pyx_v_system);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_4Mesh___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_Mesh *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system) {
  std::shared_ptr<ChMesh>  __pyx_v_mesh;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<ChMesh>  __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mbd/ChRigidBody.pyx":1904
 *     cdef cppMesh * thisptr
 *     def __cinit__(self, ProtChSystem system):
 *         cdef shared_ptr[ch.ChMesh] mesh = make_shared[ch.ChMesh]()             # <<<<<<<<<<<<<<
 *         self.thisptr = newMesh(system.thisptr.system, mesh)
 *     def setAutomaticGravity(self, bool val):
 */
  try {
    __pyx_t_1 = std::make_shared<ChMesh>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1904, __pyx_L1_error)
  }
  __pyx_v_mesh = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":1905
 *     def __cinit__(self, ProtChSystem system):
 *         cdef shared_ptr[ch.ChMesh] mesh = make_shared[ch.ChMesh]()
 *         self.thisptr = newMesh(system.thisptr.system, mesh)             # <<<<<<<<<<<<<<
 *     def setAutomaticGravity(self, bool val):
 *         self.thisptr.SetAutomaticGravity(val)
 */
  __pyx_v_self->thisptr = newMesh(__pyx_v_system->thisptr->system, __pyx_v_mesh);

  /* "mbd/ChRigidBody.pyx":1903
 * cdef class Mesh:
 *     cdef cppMesh * thisptr
 *     def __cinit__(self, ProtChSystem system):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[ch.ChMesh] mesh = make_shared[ch.ChMesh]()
 *         self.thisptr = newMesh(system.thisptr.system, mesh)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.Mesh.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1906
 *         cdef shared_ptr[ch.ChMesh] mesh = make_shared[ch.ChMesh]()
 *         self.thisptr = newMesh(system.thisptr.system, mesh)
 *     def setAutomaticGravity(self, bool val):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetAutomaticGravity(val)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_4Mesh_3setAutomaticGravity(PyObject *__pyx_v_self, PyObject *__pyx_arg_val); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_4Mesh_3setAutomaticGravity(PyObject *__pyx_v_self, PyObject *__pyx_arg_val) {
  bool __pyx_v_val;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAutomaticGravity (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __Pyx_PyObject_IsTrue(__pyx_arg_val); if (unlikely((__pyx_v_val == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1906, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.Mesh.setAutomaticGravity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_4Mesh_2setAutomaticGravity(((struct __pyx_obj_3mbd_11ChRigidBody_Mesh *)__pyx_v_self), ((bool)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_4Mesh_2setAutomaticGravity(struct __pyx_obj_3mbd_11ChRigidBody_Mesh *__pyx_v_self, bool __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAutomaticGravity", 0);

  /* "mbd/ChRigidBody.pyx":1907
 *         self.thisptr = newMesh(system.thisptr.system, mesh)
 *     def setAutomaticGravity(self, bool val):
 *         self.thisptr.SetAutomaticGravity(val)             # <<<<<<<<<<<<<<
 * 
 * cdef class SurfaceBoxNodesCloud:
 */
  __pyx_v_self->thisptr->SetAutomaticGravity(__pyx_v_val);

  /* "mbd/ChRigidBody.pyx":1906
 *         cdef shared_ptr[ch.ChMesh] mesh = make_shared[ch.ChMesh]()
 *         self.thisptr = newMesh(system.thisptr.system, mesh)
 *     def setAutomaticGravity(self, bool val):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetAutomaticGravity(val)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1911
 * cdef class SurfaceBoxNodesCloud:
 *     cdef cppSurfaceBoxNodesCloud * thisptr
 *     def __cinit__(self, ProtChSystem system, Mesh mesh, np.ndarray position, np.ndarray dimensions):             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector[double] pos = ch.ChVector[double](position[0], position[1], position[2])
 *         cdef ch.ChVector[double] dim = ch.ChVector[double](dimensions[0], dimensions[1], dimensions[2])
 */

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system = 0;
  struct __pyx_obj_3mbd_11ChRigidBody_Mesh *__pyx_v_mesh = 0;
  PyArrayObject *__pyx_v_position = 0;
  PyArrayObject *__pyx_v_dimensions = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_system,&__pyx_n_s_mesh,&__pyx_n_s_position,&__pyx_n_s_dimensions,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_system)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); __PYX_ERR(0, 1911, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_position)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); __PYX_ERR(0, 1911, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dimensions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); __PYX_ERR(0, 1911, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1911, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_system = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3mbd_11ChRigidBody_Mesh *)values[1]);
    __pyx_v_position = ((PyArrayObject *)values[2]);
    __pyx_v_dimensions = ((PyArrayObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1911, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.SurfaceBoxNodesCloud.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_system), __pyx_ptype_3mbd_11ChRigidBody_ProtChSystem, 1, "system", 0))) __PYX_ERR(0, 1911, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3mbd_11ChRigidBody_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 1911, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_position), __pyx_ptype_5numpy_ndarray, 1, "position", 0))) __PYX_ERR(0, 1911, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dimensions), __pyx_ptype_5numpy_ndarray, 1, "dimensions", 0))) __PYX_ERR(0, 1911, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud___cinit__(((struct __pyx_obj_3mbd_11ChRigidBody_SurfaceBoxNodesCloud *)__pyx_v_self), __pyx_v_system, __pyx_v_mesh, __pyx_v_position, __pyx_v_dimensions);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_SurfaceBoxNodesCloud *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system, struct __pyx_obj_3mbd_11ChRigidBody_Mesh *__pyx_v_mesh, PyArrayObject *__pyx_v_position, PyArrayObject *__pyx_v_dimensions) {
  ChVector<double>  __pyx_v_pos;
  ChVector<double>  __pyx_v_dim;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mbd/ChRigidBody.pyx":1912
 *     cdef cppSurfaceBoxNodesCloud * thisptr
 *     def __cinit__(self, ProtChSystem system, Mesh mesh, np.ndarray position, np.ndarray dimensions):
 *         cdef ch.ChVector[double] pos = ch.ChVector[double](position[0], position[1], position[2])             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector[double] dim = ch.ChVector[double](dimensions[0], dimensions[1], dimensions[2])
 *         self.thisptr = newSurfaceBoxNodesCloud(system.thisptr.system,
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_position), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_position), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_position), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pos = ChVector<double> (__pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "mbd/ChRigidBody.pyx":1913
 *     def __cinit__(self, ProtChSystem system, Mesh mesh, np.ndarray position, np.ndarray dimensions):
 *         cdef ch.ChVector[double] pos = ch.ChVector[double](position[0], position[1], position[2])
 *         cdef ch.ChVector[double] dim = ch.ChVector[double](dimensions[0], dimensions[1], dimensions[2])             # <<<<<<<<<<<<<<
 *         self.thisptr = newSurfaceBoxNodesCloud(system.thisptr.system,
 *                                                mesh.thisptr.mesh,
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_dimensions), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_dimensions), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_dimensions), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = ChVector<double> (__pyx_t_4, __pyx_t_3, __pyx_t_2);

  /* "mbd/ChRigidBody.pyx":1914
 *         cdef ch.ChVector[double] pos = ch.ChVector[double](position[0], position[1], position[2])
 *         cdef ch.ChVector[double] dim = ch.ChVector[double](dimensions[0], dimensions[1], dimensions[2])
 *         self.thisptr = newSurfaceBoxNodesCloud(system.thisptr.system,             # <<<<<<<<<<<<<<
 *                                                mesh.thisptr.mesh,
 *                                                pos,
 */
  __pyx_v_self->thisptr = newSurfaceBoxNodesCloud(__pyx_v_system->thisptr->system, __pyx_v_mesh->thisptr->mesh, ((ChVector<double> )__pyx_v_pos), ((ChVector<double> )__pyx_v_dim));

  /* "mbd/ChRigidBody.pyx":1911
 * cdef class SurfaceBoxNodesCloud:
 *     cdef cppSurfaceBoxNodesCloud * thisptr
 *     def __cinit__(self, ProtChSystem system, Mesh mesh, np.ndarray position, np.ndarray dimensions):             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector[double] pos = ch.ChVector[double](position[0], position[1], position[2])
 *         cdef ch.ChVector[double] dim = ch.ChVector[double](dimensions[0], dimensions[1], dimensions[2])
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.SurfaceBoxNodesCloud.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1919
 *                                                dim)
 *         # self.System.addBody(self)
 *     def setNodesSize(self, double size):             # <<<<<<<<<<<<<<
 *         self.thisptr.setNodesSize(size)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud_3setNodesSize(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud_3setNodesSize(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  double __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodesSize (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __pyx_PyFloat_AsDouble(__pyx_arg_size); if (unlikely((__pyx_v_size == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1919, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.SurfaceBoxNodesCloud.setNodesSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud_2setNodesSize(((struct __pyx_obj_3mbd_11ChRigidBody_SurfaceBoxNodesCloud *)__pyx_v_self), ((double)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud_2setNodesSize(struct __pyx_obj_3mbd_11ChRigidBody_SurfaceBoxNodesCloud *__pyx_v_self, double __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodesSize", 0);

  /* "mbd/ChRigidBody.pyx":1920
 *         # self.System.addBody(self)
 *     def setNodesSize(self, double size):
 *         self.thisptr.setNodesSize(size)             # <<<<<<<<<<<<<<
 * 
 * # def linkMoorings(System system, Moorings mooringA, int nodeA_ind, Moorings mooringB, int nodeB_ind):
 */
  __pyx_v_self->thisptr->setNodesSize(__pyx_v_size);

  /* "mbd/ChRigidBody.pyx":1919
 *                                                dim)
 *         # self.System.addBody(self)
 *     def setNodesSize(self, double size):             # <<<<<<<<<<<<<<
 *         self.thisptr.setNodesSize(size)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2000
 *       int[:] owning_rank
 *       string hdfFileName
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   ProtChSystem system,
 *                   Mesh mesh,
 */

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system = 0;
  struct __pyx_obj_3mbd_11ChRigidBody_Mesh *__pyx_v_mesh = 0;
  __Pyx_memviewslice __pyx_v_length = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyArrayObject *__pyx_v_nb_elems = 0;
  __Pyx_memviewslice __pyx_v_d = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rho = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_E = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::string __pyx_v_beam_type;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_system,&__pyx_n_s_mesh,&__pyx_n_s_length,&__pyx_n_s_nb_elems,&__pyx_n_s_d,&__pyx_n_s_rho,&__pyx_n_s_E,&__pyx_n_s_beam_type,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_system)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 1); __PYX_ERR(0, 2000, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 2); __PYX_ERR(0, 2000, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nb_elems)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 3); __PYX_ERR(0, 2000, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 4); __PYX_ERR(0, 2000, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 5); __PYX_ERR(0, 2000, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_E)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 6); __PYX_ERR(0, 2000, __pyx_L3_error)
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beam_type);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2000, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_system = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3mbd_11ChRigidBody_Mesh *)values[1]);
    __pyx_v_length = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2]); if (unlikely(!__pyx_v_length.memview)) __PYX_ERR(0, 2003, __pyx_L3_error)
    __pyx_v_nb_elems = ((PyArrayObject *)values[3]);
    __pyx_v_d = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[4]); if (unlikely(!__pyx_v_d.memview)) __PYX_ERR(0, 2005, __pyx_L3_error)
    __pyx_v_rho = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[5]); if (unlikely(!__pyx_v_rho.memview)) __PYX_ERR(0, 2006, __pyx_L3_error)
    __pyx_v_E = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[6]); if (unlikely(!__pyx_v_E.memview)) __PYX_ERR(0, 2007, __pyx_L3_error)
    if (values[7]) {
      __pyx_v_beam_type = __pyx_convert_string_from_py_std__in_string(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2008, __pyx_L3_error)
    } else {
      __pyx_v_beam_type = __pyx_k__92;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2000, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_system), __pyx_ptype_3mbd_11ChRigidBody_ProtChSystem, 1, "system", 0))) __PYX_ERR(0, 2001, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3mbd_11ChRigidBody_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 2002, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nb_elems), __pyx_ptype_5numpy_ndarray, 1, "nb_elems", 0))) __PYX_ERR(0, 2004, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings___cinit__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), __pyx_v_system, __pyx_v_mesh, __pyx_v_length, __pyx_v_nb_elems, __pyx_v_d, __pyx_v_rho, __pyx_v_E, __pyx_v_beam_type);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "mbd/ChRigidBody.pyx":2010
 *                   string beam_type="CableANCF"):
 *         check_arrays = [len(length), len(nb_elems), len(d), len(rho), len(E)]
 *         assert all(v == len(length) for v in check_arrays), 'arrays are not of same length'             # <<<<<<<<<<<<<<
 *         self.ProtChSystem = system
 *         self.ProtChSystem.addSubcomponent(self)
 */

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *)__pyx_tp_new_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr(__pyx_ptype_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2010, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___2generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_cinit___locals_genexpr, __pyx_n_s_mbd_ChRigidBody); if (unlikely(!gen)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.__cinit__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2010, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_check_arrays)) { __Pyx_RaiseClosureNameError("check_arrays"); __PYX_ERR(0, 2010, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_check_arrays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2010, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_check_arrays; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2010, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_length.memview)) { __Pyx_RaiseClosureNameError("length"); __PYX_ERR(0, 2010, __pyx_L1_error) }
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_length, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_v, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = ((!__pyx_t_6) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2037
 *                                    beam_type
 *                                    )
 *         self.nodes_function = lambda s: (s, s, s)             # <<<<<<<<<<<<<<
 *         self.nodes_built = False
 *         self.name = 'record_moorings'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___3lambda1(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static PyMethodDef __pyx_mdef_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___3lambda1 = {"lambda1", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___3lambda1, METH_O, 0};
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___3lambda1(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_s);
  __Pyx_GIVEREF(__pyx_v_s);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_s);
  __Pyx_INCREF(__pyx_v_s);
  __Pyx_GIVEREF(__pyx_v_s);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_s);
  __Pyx_INCREF(__pyx_v_s);
  __Pyx_GIVEREF(__pyx_v_s);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_s);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.__cinit__.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2000
 *       int[:] owning_rank
 *       string hdfFileName
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   ProtChSystem system,
 *                   Mesh mesh,
 */

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system, struct __pyx_obj_3mbd_11ChRigidBody_Mesh *__pyx_v_mesh, __Pyx_memviewslice __pyx_v_length, PyArrayObject *__pyx_v_nb_elems, __Pyx_memviewslice __pyx_v_d, __Pyx_memviewslice __pyx_v_rho, __Pyx_memviewslice __pyx_v_E, std::string __pyx_v_beam_type) {
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *__pyx_cur_scope;
  std::vector<double>  __pyx_v_vec_length;
  std::vector<int>  __pyx_v_vec_nb_elems;
  std::vector<double>  __pyx_v_vec_d;
  std::vector<double>  __pyx_v_vec_rho;
  std::vector<double>  __pyx_v_vec_E;
  Py_ssize_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  std::string __pyx_t_15;
  __Pyx_memviewslice __pyx_t_16 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_cur_scope = (struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *)__pyx_tp_new_3mbd_11ChRigidBody___pyx_scope_struct____cinit__(__pyx_ptype_3mbd_11ChRigidBody___pyx_scope_struct____cinit__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2000, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_length = __pyx_v_length;

  /* "mbd/ChRigidBody.pyx":2009
 *                   double[:] E,
 *                   string beam_type="CableANCF"):
 *         check_arrays = [len(length), len(nb_elems), len(d), len(rho), len(E)]             # <<<<<<<<<<<<<<
 *         assert all(v == len(length) for v in check_arrays), 'arrays are not of same length'
 *         self.ProtChSystem = system
 */
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_cur_scope->__pyx_v_length, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_nb_elems)); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_d, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_rho, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_E, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyList_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 4, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_cur_scope->__pyx_v_check_arrays = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "mbd/ChRigidBody.pyx":2010
 *                   string beam_type="CableANCF"):
 *         check_arrays = [len(length), len(nb_elems), len(d), len(rho), len(E)]
 *         assert all(v == len(length) for v in check_arrays), 'arrays are not of same length'             # <<<<<<<<<<<<<<
 *         self.ProtChSystem = system
 *         self.ProtChSystem.addSubcomponent(self)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_7 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_Generator_Next(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_8)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arrays_are_not_of_same_length);
      __PYX_ERR(0, 2010, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":2011
 *         check_arrays = [len(length), len(nb_elems), len(d), len(rho), len(E)]
 *         assert all(v == len(length) for v in check_arrays), 'arrays are not of same length'
 *         self.ProtChSystem = system             # <<<<<<<<<<<<<<
 *         self.ProtChSystem.addSubcomponent(self)
 *         self.nd = self.ProtChSystem.nd
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_system));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_system));
  __Pyx_GOTREF(__pyx_v_self->ProtChSystem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_v_self->ProtChSystem = __pyx_v_system;

  /* "mbd/ChRigidBody.pyx":2012
 *         assert all(v == len(length) for v in check_arrays), 'arrays are not of same length'
 *         self.ProtChSystem = system
 *         self.ProtChSystem.addSubcomponent(self)             # <<<<<<<<<<<<<<
 *         self.nd = self.ProtChSystem.nd
 *         self.Mesh = mesh
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->ProtChSystem), __pyx_n_s_addSubcomponent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self)};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2012, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self)};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2012, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2012, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_self));
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2012, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "mbd/ChRigidBody.pyx":2013
 *         self.ProtChSystem = system
 *         self.ProtChSystem.addSubcomponent(self)
 *         self.nd = self.ProtChSystem.nd             # <<<<<<<<<<<<<<
 *         self.Mesh = mesh
 *         self.beam_type = beam_type
 */
  __pyx_t_9 = __pyx_v_self->ProtChSystem->nd;
  __pyx_v_self->nd = __pyx_t_9;

  /* "mbd/ChRigidBody.pyx":2014
 *         self.ProtChSystem.addSubcomponent(self)
 *         self.nd = self.ProtChSystem.nd
 *         self.Mesh = mesh             # <<<<<<<<<<<<<<
 *         self.beam_type = beam_type
 *         self.nb_elems = nb_elems
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
  __Pyx_GOTREF(__pyx_v_self->Mesh);
  __Pyx_DECREF(__pyx_v_self->Mesh);
  __pyx_v_self->Mesh = ((PyObject *)__pyx_v_mesh);

  /* "mbd/ChRigidBody.pyx":2015
 *         self.nd = self.ProtChSystem.nd
 *         self.Mesh = mesh
 *         self.beam_type = beam_type             # <<<<<<<<<<<<<<
 *         self.nb_elems = nb_elems
 *         cdef vector[double] vec_length
 */
  __pyx_v_self->beam_type = __pyx_v_beam_type;

  /* "mbd/ChRigidBody.pyx":2016
 *         self.Mesh = mesh
 *         self.beam_type = beam_type
 *         self.nb_elems = nb_elems             # <<<<<<<<<<<<<<
 *         cdef vector[double] vec_length
 *         cdef vector[int] vec_nb_elems
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_nb_elems));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_nb_elems));
  __Pyx_GOTREF(__pyx_v_self->nb_elems);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->nb_elems));
  __pyx_v_self->nb_elems = __pyx_v_nb_elems;

  /* "mbd/ChRigidBody.pyx":2022
 *         cdef vector[double] vec_rho
 *         cdef vector[double] vec_E
 *         for i in range(len(length)):             # <<<<<<<<<<<<<<
 *             vec_length.push_back(length[i])
 *             vec_nb_elems.push_back(nb_elems[i])
 */
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_cur_scope->__pyx_v_length, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_2; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "mbd/ChRigidBody.pyx":2023
 *         cdef vector[double] vec_E
 *         for i in range(len(length)):
 *             vec_length.push_back(length[i])             # <<<<<<<<<<<<<<
 *             vec_nb_elems.push_back(nb_elems[i])
 *             vec_d.push_back(d[i])
 */
    __pyx_t_11 = __pyx_v_i;
    __pyx_t_9 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_cur_scope->__pyx_v_length.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_cur_scope->__pyx_v_length.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 2023, __pyx_L1_error)
    }
    try {
      __pyx_v_vec_length.push_back((*((double *) ( /* dim=0 */ (__pyx_cur_scope->__pyx_v_length.data + __pyx_t_11 * __pyx_cur_scope->__pyx_v_length.strides[0]) ))));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2023, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":2024
 *         for i in range(len(length)):
 *             vec_length.push_back(length[i])
 *             vec_nb_elems.push_back(nb_elems[i])             # <<<<<<<<<<<<<<
 *             vec_d.push_back(d[i])
 *             vec_rho.push_back(rho[i])
 */
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_nb_elems), __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2024, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    try {
      __pyx_v_vec_nb_elems.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2024, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":2025
 *             vec_length.push_back(length[i])
 *             vec_nb_elems.push_back(nb_elems[i])
 *             vec_d.push_back(d[i])             # <<<<<<<<<<<<<<
 *             vec_rho.push_back(rho[i])
 *             vec_E.push_back(E[i])
 */
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_9 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_d.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_d.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 2025, __pyx_L1_error)
    }
    try {
      __pyx_v_vec_d.push_back((*((double *) ( /* dim=0 */ (__pyx_v_d.data + __pyx_t_12 * __pyx_v_d.strides[0]) ))));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2025, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":2026
 *             vec_nb_elems.push_back(nb_elems[i])
 *             vec_d.push_back(d[i])
 *             vec_rho.push_back(rho[i])             # <<<<<<<<<<<<<<
 *             vec_E.push_back(E[i])
 *         self.thisptr = newMoorings(system.thisptr.system,
 */
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_9 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_rho.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_rho.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 2026, __pyx_L1_error)
    }
    try {
      __pyx_v_vec_rho.push_back((*((double *) ( /* dim=0 */ (__pyx_v_rho.data + __pyx_t_13 * __pyx_v_rho.strides[0]) ))));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2026, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":2027
 *             vec_d.push_back(d[i])
 *             vec_rho.push_back(rho[i])
 *             vec_E.push_back(E[i])             # <<<<<<<<<<<<<<
 *         self.thisptr = newMoorings(system.thisptr.system,
 *                                    mesh.thisptr.mesh,
 */
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_9 = -1;
    if (__pyx_t_14 < 0) {
      __pyx_t_14 += __pyx_v_E.shape[0];
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_14 >= __pyx_v_E.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 2027, __pyx_L1_error)
    }
    try {
      __pyx_v_vec_E.push_back((*((double *) ( /* dim=0 */ (__pyx_v_E.data + __pyx_t_14 * __pyx_v_E.strides[0]) ))));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2027, __pyx_L1_error)
    }
  }

  /* "mbd/ChRigidBody.pyx":2028
 *             vec_rho.push_back(rho[i])
 *             vec_E.push_back(E[i])
 *         self.thisptr = newMoorings(system.thisptr.system,             # <<<<<<<<<<<<<<
 *                                    mesh.thisptr.mesh,
 *                                    vec_length,
 */
  __pyx_v_self->thisptr = newMoorings(__pyx_v_system->thisptr->system, __pyx_v_mesh->thisptr->mesh, __pyx_v_vec_length, __pyx_v_vec_nb_elems, __pyx_v_vec_d, __pyx_v_vec_rho, __pyx_v_vec_E, __pyx_v_beam_type);

  /* "mbd/ChRigidBody.pyx":2037
 *                                    beam_type
 *                                    )
 *         self.nodes_function = lambda s: (s, s, s)             # <<<<<<<<<<<<<<
 *         self.nodes_built = False
 *         self.name = 'record_moorings'
 */
  __pyx_t_6 = __Pyx_CyFunction_NewEx(&__pyx_mdef_3mbd_11ChRigidBody_14ProtChMoorings_9__cinit___3lambda1, 0, __pyx_n_s_cinit___locals_lambda, NULL, __pyx_n_s_mbd_ChRigidBody, __pyx_d, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->nodes_function);
  __Pyx_DECREF(__pyx_v_self->nodes_function);
  __pyx_v_self->nodes_function = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "mbd/ChRigidBody.pyx":2038
 *                                    )
 *         self.nodes_function = lambda s: (s, s, s)
 *         self.nodes_built = False             # <<<<<<<<<<<<<<
 *         self.name = 'record_moorings'
 *         self.external_forces_from_ns = True
 */
  __pyx_v_self->nodes_built = 0;

  /* "mbd/ChRigidBody.pyx":2039
 *         self.nodes_function = lambda s: (s, s, s)
 *         self.nodes_built = False
 *         self.name = 'record_moorings'             # <<<<<<<<<<<<<<
 *         self.external_forces_from_ns = True
 *         self.external_forces_manual = False
 */
  __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_record_moorings); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2039, __pyx_L1_error)
  __pyx_v_self->name = __pyx_t_15;

  /* "mbd/ChRigidBody.pyx":2040
 *         self.nodes_built = False
 *         self.name = 'record_moorings'
 *         self.external_forces_from_ns = True             # <<<<<<<<<<<<<<
 *         self.external_forces_manual = False
 *         self._record_etas=np.array([0.])
 */
  __pyx_v_self->external_forces_from_ns = 1;

  /* "mbd/ChRigidBody.pyx":2041
 *         self.name = 'record_moorings'
 *         self.external_forces_from_ns = True
 *         self.external_forces_manual = False             # <<<<<<<<<<<<<<
 *         self._record_etas=np.array([0.])
 * 
 */
  __pyx_v_self->external_forces_manual = 0;

  /* "mbd/ChRigidBody.pyx":2042
 *         self.external_forces_from_ns = True
 *         self.external_forces_manual = False
 *         self._record_etas=np.array([0.])             # <<<<<<<<<<<<<<
 * 
 *     def setName(self, string name):
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_float_0_);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2042, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_16 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_6);
  if (unlikely(!__pyx_t_16.memview)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_record_etas, 0);
  __pyx_v_self->_record_etas = __pyx_t_16;
  __pyx_t_16.memview = NULL;
  __pyx_t_16.data = NULL;

  /* "mbd/ChRigidBody.pyx":2000
 *       int[:] owning_rank
 *       string hdfFileName
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   ProtChSystem system,
 *                   Mesh mesh,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_16, 1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_cur_scope->__pyx_v_length, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_d, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rho, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_E, 1);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2044
 *         self._record_etas=np.array([0.])
 * 
 *     def setName(self, string name):             # <<<<<<<<<<<<<<
 *         """Sets name of cable, used for csv file
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_3setName(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_2setName[] = "Sets name of cable, used for csv file\n\n        Parameters\n        ----------\n        name: str\n            Name of cable.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_3setName(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  std::string __pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setName (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(__pyx_arg_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2044, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_2setName(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((std::string)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_2setName(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, std::string __pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setName", 0);

  /* "mbd/ChRigidBody.pyx":2052
 *             Name of cable.
 *         """
 *         self.name = name             # <<<<<<<<<<<<<<
 * 
 *     def recordStrainEta(self, double[:] eta):
 */
  __pyx_v_self->name = __pyx_v_name;

  /* "mbd/ChRigidBody.pyx":2044
 *         self._record_etas=np.array([0.])
 * 
 *     def setName(self, string name):             # <<<<<<<<<<<<<<
 *         """Sets name of cable, used for csv file
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2054
 *         self.name = name
 * 
 *     def recordStrainEta(self, double[:] eta):             # <<<<<<<<<<<<<<
 *         self._record_etas = eta
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5recordStrainEta(PyObject *__pyx_v_self, PyObject *__pyx_arg_eta); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5recordStrainEta(PyObject *__pyx_v_self, PyObject *__pyx_arg_eta) {
  __Pyx_memviewslice __pyx_v_eta = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("recordStrainEta (wrapper)", 0);
  assert(__pyx_arg_eta); {
    __pyx_v_eta = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_arg_eta); if (unlikely(!__pyx_v_eta.memview)) __PYX_ERR(0, 2054, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.recordStrainEta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4recordStrainEta(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), __pyx_v_eta);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4recordStrainEta(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, __Pyx_memviewslice __pyx_v_eta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("recordStrainEta", 0);

  /* "mbd/ChRigidBody.pyx":2055
 * 
 *     def recordStrainEta(self, double[:] eta):
 *         self._record_etas = eta             # <<<<<<<<<<<<<<
 * 
 *     def _recordH5(self):
 */
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_record_etas, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_eta, 0);
  __pyx_v_self->_record_etas = __pyx_v_eta;

  /* "mbd/ChRigidBody.pyx":2054
 *         self.name = name
 * 
 *     def recordStrainEta(self, double[:] eta):             # <<<<<<<<<<<<<<
 *         self._record_etas = eta
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __PYX_XDEC_MEMVIEW(&__pyx_v_eta, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2057
 *         self._record_etas = eta
 * 
 *     def _recordH5(self):             # <<<<<<<<<<<<<<
 *         tCount = self.ProtChSystem.tCount
 *         self.hdfFileName = self.name
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_7_recordH5(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_7_recordH5(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_recordH5 (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_6_recordH5(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_6_recordH5(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_v_tCount;
  PyObject *__pyx_v_hdfFileName = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_pos = NULL;
  PyObject *__pyx_v_element_connection = NULL;
  PyObject *__pyx_v_dset = NULL;
  PyObject *__pyx_v_datav = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  __Pyx_RefNannySetupContext("_recordH5", 0);

  /* "mbd/ChRigidBody.pyx":2058
 * 
 *     def _recordH5(self):
 *         tCount = self.ProtChSystem.tCount             # <<<<<<<<<<<<<<
 *         self.hdfFileName = self.name
 *         hdfFileName = os.path.join(Profiling.logDir, self.hdfFileName)+'.h5'
 */
  __pyx_t_1 = __pyx_v_self->ProtChSystem->tCount;
  __pyx_v_tCount = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":2059
 *     def _recordH5(self):
 *         tCount = self.ProtChSystem.tCount
 *         self.hdfFileName = self.name             # <<<<<<<<<<<<<<
 *         hdfFileName = os.path.join(Profiling.logDir, self.hdfFileName)+'.h5'
 *         if tCount == 0:
 */
  __pyx_t_2 = __pyx_v_self->name;
  __pyx_v_self->hdfFileName = __pyx_t_2;

  /* "mbd/ChRigidBody.pyx":2060
 *         tCount = self.ProtChSystem.tCount
 *         self.hdfFileName = self.name
 *         hdfFileName = os.path.join(Profiling.logDir, self.hdfFileName)+'.h5'             # <<<<<<<<<<<<<<
 *         if tCount == 0:
 *             f = h5py.File(hdfFileName, 'w')
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_logDir); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->hdfFileName); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_1, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_h5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_hdfFileName = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2061
 *         self.hdfFileName = self.name
 *         hdfFileName = os.path.join(Profiling.logDir, self.hdfFileName)+'.h5'
 *         if tCount == 0:             # <<<<<<<<<<<<<<
 *             f = h5py.File(hdfFileName, 'w')
 *         else:
 */
  __pyx_t_9 = ((__pyx_v_tCount == 0) != 0);
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2062
 *         hdfFileName = os.path.join(Profiling.logDir, self.hdfFileName)+'.h5'
 *         if tCount == 0:
 *             f = h5py.File(hdfFileName, 'w')             # <<<<<<<<<<<<<<
 *         else:
 *             f = h5py.File(hdfFileName, 'a')
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_h5py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_File); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_1 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_hdfFileName, __pyx_n_s_w};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2062, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_hdfFileName, __pyx_n_s_w};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2062, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2062, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_hdfFileName);
      __Pyx_GIVEREF(__pyx_v_hdfFileName);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_1, __pyx_v_hdfFileName);
      __Pyx_INCREF(__pyx_n_s_w);
      __Pyx_GIVEREF(__pyx_n_s_w);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_1, __pyx_n_s_w);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2062, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_f = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2061
 *         self.hdfFileName = self.name
 *         hdfFileName = os.path.join(Profiling.logDir, self.hdfFileName)+'.h5'
 *         if tCount == 0:             # <<<<<<<<<<<<<<
 *             f = h5py.File(hdfFileName, 'w')
 *         else:
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2064
 *             f = h5py.File(hdfFileName, 'w')
 *         else:
 *             f = h5py.File(hdfFileName, 'a')             # <<<<<<<<<<<<<<
 *         pos = self.getNodesPosition()
 *         element_connection = np.array([[i, i+1] for i in range(len(pos)-1)])
 */
  /*else*/ {
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_h5py); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_File); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_1 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_hdfFileName, __pyx_n_s_a};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2064, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_hdfFileName, __pyx_n_s_a};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2064, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2064, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_hdfFileName);
      __Pyx_GIVEREF(__pyx_v_hdfFileName);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_1, __pyx_v_hdfFileName);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_1, __pyx_n_s_a);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2064, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_f = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2065
 *         else:
 *             f = h5py.File(hdfFileName, 'a')
 *         pos = self.getNodesPosition()             # <<<<<<<<<<<<<<
 *         element_connection = np.array([[i, i+1] for i in range(len(pos)-1)])
 *         dset = f.create_dataset('nodes_t'+str(tCount), pos.shape)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodesPosition); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2065, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2065, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_pos = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2066
 *             f = h5py.File(hdfFileName, 'a')
 *         pos = self.getNodesPosition()
 *         element_connection = np.array([[i, i+1] for i in range(len(pos)-1)])             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('nodes_t'+str(tCount), pos.shape)
 *         dset[...] = pos
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = PyObject_Length(__pyx_v_pos); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __pyx_t_8 = PyInt_FromSsize_t((__pyx_t_10 - 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2066, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 2066, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2066, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 2066, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2066, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_11(__pyx_t_6);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2066, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_v_i);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2066, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2066, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_element_connection = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2067
 *         pos = self.getNodesPosition()
 *         element_connection = np.array([[i, i+1] for i in range(len(pos)-1)])
 *         dset = f.create_dataset('nodes_t'+str(tCount), pos.shape)             # <<<<<<<<<<<<<<
 *         dset[...] = pos
 *         dset = f.create_dataset('elements_t'+str(tCount), element_connection.shape, dtype='i8')
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_n_s_nodes_t, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_pos, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_1, __pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dset = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2068
 *         element_connection = np.array([[i, i+1] for i in range(len(pos)-1)])
 *         dset = f.create_dataset('nodes_t'+str(tCount), pos.shape)
 *         dset[...] = pos             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('elements_t'+str(tCount), element_connection.shape, dtype='i8')
 *         dset[...] = element_connection
 */
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_v_pos) < 0)) __PYX_ERR(0, 2068, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2069
 *         dset = f.create_dataset('nodes_t'+str(tCount), pos.shape)
 *         dset[...] = pos
 *         dset = f.create_dataset('elements_t'+str(tCount), element_connection.shape, dtype='i8')             # <<<<<<<<<<<<<<
 *         dset[...] = element_connection
 *         # strain
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Add(__pyx_n_s_elements_t, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_element_connection, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
  __pyx_t_8 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_s_i8) < 0) __PYX_ERR(0, 2069, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_8);
  __pyx_t_8 = 0;

  /* "mbd/ChRigidBody.pyx":2070
 *         dset[...] = pos
 *         dset = f.create_dataset('elements_t'+str(tCount), element_connection.shape, dtype='i8')
 *         dset[...] = element_connection             # <<<<<<<<<<<<<<
 *         # strain
 *         datav = np.append(self.getNodesTension(eta=-1), [self.getNodesTension(eta=1)[-1]], axis=0)
 */
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_v_element_connection) < 0)) __PYX_ERR(0, 2070, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2072
 *         dset[...] = element_connection
 *         # strain
 *         datav = np.append(self.getNodesTension(eta=-1), [self.getNodesTension(eta=1)[-1]], axis=0)             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('tensions_t'+str(tCount), datav.shape)
 *         dset[...] = datav
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_append); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodesTension); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_eta, __pyx_int_neg_1) < 0) __PYX_ERR(0, 2072, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodesTension); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_eta, __pyx_int_1) < 0) __PYX_ERR(0, 2072, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_5, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 2072, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_datav = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2073
 *         # strain
 *         datav = np.append(self.getNodesTension(eta=-1), [self.getNodesTension(eta=1)[-1]], axis=0)
 *         dset = f.create_dataset('tensions_t'+str(tCount), datav.shape)             # <<<<<<<<<<<<<<
 *         dset[...] = datav
 *         dset = f.create_dataset('sx_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_n_s_tensions_t, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2073, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2073, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_t_8);
    __pyx_t_3 = 0;
    __pyx_t_8 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2074
 *         datav = np.append(self.getNodesTension(eta=-1), [self.getNodesTension(eta=1)[-1]], axis=0)
 *         dset = f.create_dataset('tensions_t'+str(tCount), datav.shape)
 *         dset[...] = datav             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('sx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]
 */
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_v_datav) < 0)) __PYX_ERR(0, 2074, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2075
 *         dset = f.create_dataset('tensions_t'+str(tCount), datav.shape)
 *         dset[...] = datav
 *         dset = f.create_dataset('sx_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('sy_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Add(__pyx_n_s_sx_t, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);
    __pyx_t_8 = 0;
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2076
 *         dset[...] = datav
 *         dset = f.create_dataset('sx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('sy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__94); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2077
 *         dset = f.create_dataset('sx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('sy_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('sz_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_n_s_sy_t, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_1, __pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2078
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('sy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('sz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__96); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2079
 *         dset = f.create_dataset('sy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('sz_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,2]
 *         # velocity
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Add(__pyx_n_s_sz_t, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_1, __pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2080
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('sz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]             # <<<<<<<<<<<<<<
 *         # velocity
 *         datav = self.getNodesVelocity()
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__98); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2080, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2082
 *         dset[...] = datav[:,2]
 *         # velocity
 *         datav = self.getNodesVelocity()             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('velocity_t'+str(tCount), datav.shape)
 *         dset[...] = datav
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodesVelocity); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2082, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2082, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_datav, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2083
 *         # velocity
 *         datav = self.getNodesVelocity()
 *         dset = f.create_dataset('velocity_t'+str(tCount), datav.shape)             # <<<<<<<<<<<<<<
 *         dset[...] = datav
 *         dset = f.create_dataset('ux_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_n_s_velocity_t, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2083, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2083, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_t_8);
    __pyx_t_3 = 0;
    __pyx_t_8 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2084
 *         datav = self.getNodesVelocity()
 *         dset = f.create_dataset('velocity_t'+str(tCount), datav.shape)
 *         dset[...] = datav             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('ux_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]
 */
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_v_datav) < 0)) __PYX_ERR(0, 2084, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2085
 *         dset = f.create_dataset('velocity_t'+str(tCount), datav.shape)
 *         dset[...] = datav
 *         dset = f.create_dataset('ux_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('uy_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Add(__pyx_n_s_ux_t, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2085, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2085, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);
    __pyx_t_8 = 0;
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2086
 *         dset[...] = datav
 *         dset = f.create_dataset('ux_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('uy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__100); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2086, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2087
 *         dset = f.create_dataset('ux_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('uy_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('uz_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_n_s_uy_t, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2087, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2087, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2087, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_1, __pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2087, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2088
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('uy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('uz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__102); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2089
 *         dset = f.create_dataset('uy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('uz_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,2]
 *         # acceleration
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Add(__pyx_n_s_uz_t, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2089, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2089, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2089, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_1, __pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2089, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2090
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('uz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]             # <<<<<<<<<<<<<<
 *         # acceleration
 *         datav = self.getNodesAcceleration()
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__104); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2092
 *         dset[...] = datav[:,2]
 *         # acceleration
 *         datav = self.getNodesAcceleration()             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('acceleration_t'+str(tCount), datav.shape)
 *         dset[...] = datav
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodesAcceleration); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2092, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2092, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_datav, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2093
 *         # acceleration
 *         datav = self.getNodesAcceleration()
 *         dset = f.create_dataset('acceleration_t'+str(tCount), datav.shape)             # <<<<<<<<<<<<<<
 *         dset[...] = datav
 *         dset = f.create_dataset('ax_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_n_s_acceleration_t, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_t_8);
    __pyx_t_3 = 0;
    __pyx_t_8 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2094
 *         datav = self.getNodesAcceleration()
 *         dset = f.create_dataset('acceleration_t'+str(tCount), datav.shape)
 *         dset[...] = datav             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('ax_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]
 */
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_v_datav) < 0)) __PYX_ERR(0, 2094, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2095
 *         dset = f.create_dataset('acceleration_t'+str(tCount), datav.shape)
 *         dset[...] = datav
 *         dset = f.create_dataset('ax_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('ay_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Add(__pyx_n_s_ax_t, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2095, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2095, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2095, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);
    __pyx_t_8 = 0;
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2095, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2096
 *         dset[...] = datav
 *         dset = f.create_dataset('ax_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('ay_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__106); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2096, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2097
 *         dset = f.create_dataset('ax_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('ay_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('az_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_n_s_ay_t, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2097, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2097, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2097, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_1, __pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2097, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2098
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('ay_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('az_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__108); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2099
 *         dset = f.create_dataset('ay_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('az_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,2]
 *         # drag
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Add(__pyx_n_s_az_t, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_1, __pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2100
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('az_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]             # <<<<<<<<<<<<<<
 *         # drag
 *         datav = self.getDragForces()
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__110); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2102
 *         dset[...] = datav[:,2]
 *         # drag
 *         datav = self.getDragForces()             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('drag_t'+str(tCount),datav.shape)
 *         dset[...] = datav
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getDragForces); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2102, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_datav, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2103
 *         # drag
 *         datav = self.getDragForces()
 *         dset = f.create_dataset('drag_t'+str(tCount),datav.shape)             # <<<<<<<<<<<<<<
 *         dset[...] = datav
 *         dset = f.create_dataset('dragx_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_n_s_drag_t, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2103, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2103, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_t_8);
    __pyx_t_3 = 0;
    __pyx_t_8 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2104
 *         datav = self.getDragForces()
 *         dset = f.create_dataset('drag_t'+str(tCount),datav.shape)
 *         dset[...] = datav             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('dragx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]
 */
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_v_datav) < 0)) __PYX_ERR(0, 2104, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2105
 *         dset = f.create_dataset('drag_t'+str(tCount),datav.shape)
 *         dset[...] = datav
 *         dset = f.create_dataset('dragx_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('dragy_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Add(__pyx_n_s_dragx_t, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2105, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2105, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);
    __pyx_t_8 = 0;
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2106
 *         dset[...] = datav
 *         dset = f.create_dataset('dragx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('dragy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__112); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2107
 *         dset = f.create_dataset('dragx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('dragy_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('dragz_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_n_s_dragy_t, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_1, __pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2108
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('dragy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('dragz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__114); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2109
 *         dset = f.create_dataset('dragy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('dragz_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,2]
 *         # addedmass
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Add(__pyx_n_s_dragz_t, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2109, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2109, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_1, __pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2110
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('dragz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]             # <<<<<<<<<<<<<<
 *         # addedmass
 *         datav = self.getAddedMassForces()
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__116); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2112
 *         dset[...] = datav[:,2]
 *         # addedmass
 *         datav = self.getAddedMassForces()             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('am_t'+str(tCount), datav.shape)
 *         dset[...] = datav
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getAddedMassForces); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2112, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_datav, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2113
 *         # addedmass
 *         datav = self.getAddedMassForces()
 *         dset = f.create_dataset('am_t'+str(tCount), datav.shape)             # <<<<<<<<<<<<<<
 *         dset[...] = datav
 *         dset = f.create_dataset('amx_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_n_s_am_t, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2113, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2113, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_t_8);
    __pyx_t_3 = 0;
    __pyx_t_8 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2114
 *         datav = self.getAddedMassForces()
 *         dset = f.create_dataset('am_t'+str(tCount), datav.shape)
 *         dset[...] = datav             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('amx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]
 */
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_v_datav) < 0)) __PYX_ERR(0, 2114, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2115
 *         dset = f.create_dataset('am_t'+str(tCount), datav.shape)
 *         dset[...] = datav
 *         dset = f.create_dataset('amx_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('amy_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyNumber_Add(__pyx_n_s_amx_t, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2115, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2115, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);
    __pyx_t_8 = 0;
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2116
 *         dset[...] = datav
 *         dset = f.create_dataset('amx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('amy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__118); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2117
 *         dset = f.create_dataset('amx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('amy_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('amz_t'+str(tCount), (datav.shape[0],))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_n_s_amy_t, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2117, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2117, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_1, __pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2118
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('amy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('amz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__120); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2119
 *         dset = f.create_dataset('amy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('amz_t'+str(tCount), (datav.shape[0],))             # <<<<<<<<<<<<<<
 *         dset[...] = datav[:,2]
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Add(__pyx_n_s_amz_t, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_datav, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2119, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2119, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_1, __pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_dset, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2120
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('amz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]             # <<<<<<<<<<<<<<
 * 
 *     def _recordXML(self):
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_datav, __pyx_tuple__122); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_v_dset, Py_Ellipsis, __pyx_t_4) < 0)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2057
 *         self._record_etas = eta
 * 
 *     def _recordH5(self):             # <<<<<<<<<<<<<<
 *         tCount = self.ProtChSystem.tCount
 *         self.hdfFileName = self.name
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings._recordH5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_hdfFileName);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF(__pyx_v_element_connection);
  __Pyx_XDECREF(__pyx_v_dset);
  __Pyx_XDECREF(__pyx_v_datav);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2122
 *         dset[...] = datav[:,2]
 * 
 *     def _recordXML(self):             # <<<<<<<<<<<<<<
 *         tCount = self.ProtChSystem.tCount
 *         t = self.ProtChSystem.t
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9_recordXML(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9_recordXML(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_recordXML (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8_recordXML(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8_recordXML(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_v_tCount;
  double __pyx_v_t;
  PyObject *__pyx_v_xmlFile = NULL;
  PyObject *__pyx_v_root = NULL;
  PyObject *__pyx_v_domain = NULL;
  PyObject *__pyx_v_arGridCollection = NULL;
  PyObject *__pyx_v_tree = NULL;
  PyObject *__pyx_v_Xdmf_ElementTopology = NULL;
  PyObject *__pyx_v_pos = NULL;
  Py_ssize_t __pyx_v_Xdmf_NumberOfElements;
  long __pyx_v_Xdmf_NodesPerElement;
  PyObject *__pyx_v_dataItemFormat = NULL;
  PyObject *__pyx_v_arGrid = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_arTime = NULL;
  PyObject *__pyx_v_topology = NULL;
  PyObject *__pyx_v_elements = NULL;
  PyObject *__pyx_v_geometry = NULL;
  PyObject *__pyx_v_nodes = NULL;
  PyObject *__pyx_v_attrs = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_attr = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_xmlHeader = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("_recordXML", 0);

  /* "mbd/ChRigidBody.pyx":2123
 * 
 *     def _recordXML(self):
 *         tCount = self.ProtChSystem.tCount             # <<<<<<<<<<<<<<
 *         t = self.ProtChSystem.t
 *         xmlFile = os.path.join(Profiling.logDir, self.name)+'.xmf'
 */
  __pyx_t_1 = __pyx_v_self->ProtChSystem->tCount;
  __pyx_v_tCount = __pyx_t_1;

  /* "mbd/ChRigidBody.pyx":2124
 *     def _recordXML(self):
 *         tCount = self.ProtChSystem.tCount
 *         t = self.ProtChSystem.t             # <<<<<<<<<<<<<<
 *         xmlFile = os.path.join(Profiling.logDir, self.name)+'.xmf'
 *         if tCount == 0:
 */
  __pyx_t_2 = __pyx_v_self->ProtChSystem->t;
  __pyx_v_t = __pyx_t_2;

  /* "mbd/ChRigidBody.pyx":2125
 *         tCount = self.ProtChSystem.tCount
 *         t = self.ProtChSystem.t
 *         xmlFile = os.path.join(Profiling.logDir, self.name)+'.xmf'             # <<<<<<<<<<<<<<
 *         if tCount == 0:
 *             root = ET.Element("Xdmf",
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_logDir); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2125, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2125, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_1, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_xmf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_xmlFile = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2126
 *         t = self.ProtChSystem.t
 *         xmlFile = os.path.join(Profiling.logDir, self.name)+'.xmf'
 *         if tCount == 0:             # <<<<<<<<<<<<<<
 *             root = ET.Element("Xdmf",
 *                               {"Version": "2.0",
 */
  __pyx_t_9 = ((__pyx_v_tCount == 0) != 0);
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2127
 *         xmlFile = os.path.join(Profiling.logDir, self.name)+'.xmf'
 *         if tCount == 0:
 *             root = ET.Element("Xdmf",             # <<<<<<<<<<<<<<
 *                               {"Version": "2.0",
 *                                "xmlns:xi": "http://www.w3.org/2001/XInclude"})
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Element); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":2128
 *         if tCount == 0:
 *             root = ET.Element("Xdmf",
 *                               {"Version": "2.0",             # <<<<<<<<<<<<<<
 *                                "xmlns:xi": "http://www.w3.org/2001/XInclude"})
 *             domain = ET.SubElement(root, "Domain")
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Version, __pyx_kp_s_2_0) < 0) __PYX_ERR(0, 2128, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_xmlns_xi, __pyx_kp_s_http_www_w3_org_2001_XInclude) < 0) __PYX_ERR(0, 2128, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_1 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_s_Xdmf, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_s_Xdmf, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_n_s_Xdmf);
      __Pyx_GIVEREF(__pyx_n_s_Xdmf);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_n_s_Xdmf);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_root = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2130
 *                               {"Version": "2.0",
 *                                "xmlns:xi": "http://www.w3.org/2001/XInclude"})
 *             domain = ET.SubElement(root, "Domain")             # <<<<<<<<<<<<<<
 *             arGridCollection = ET.SubElement(domain,
 *                                             "Grid",
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_SubElement); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_1 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_root, __pyx_n_s_Domain};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2130, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_root, __pyx_n_s_Domain};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2130, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_root);
      __Pyx_GIVEREF(__pyx_v_root);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_1, __pyx_v_root);
      __Pyx_INCREF(__pyx_n_s_Domain);
      __Pyx_GIVEREF(__pyx_n_s_Domain);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_1, __pyx_n_s_Domain);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_domain = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2131
 *                                "xmlns:xi": "http://www.w3.org/2001/XInclude"})
 *             domain = ET.SubElement(root, "Domain")
 *             arGridCollection = ET.SubElement(domain,             # <<<<<<<<<<<<<<
 *                                             "Grid",
 *                                             {"Name": "Mesh"+" Spatial_Domain",
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_SubElement); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "mbd/ChRigidBody.pyx":2133
 *             arGridCollection = ET.SubElement(domain,
 *                                             "Grid",
 *                                             {"Name": "Mesh"+" Spatial_Domain",             # <<<<<<<<<<<<<<
 *                                              "GridType": "Collection",
 *                                              "CollectionType": "Temporal"})
 */
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyNumber_Add(__pyx_n_s_Mesh, __pyx_kp_s_Spatial_Domain); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Name, __pyx_t_8) < 0) __PYX_ERR(0, 2133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_GridType, __pyx_n_s_Collection) < 0) __PYX_ERR(0, 2133, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_CollectionType, __pyx_n_s_Temporal) < 0) __PYX_ERR(0, 2133, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_1 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_domain, __pyx_n_s_Grid, __pyx_t_6};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2131, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_domain, __pyx_n_s_Grid, __pyx_t_6};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2131, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_domain);
      __Pyx_GIVEREF(__pyx_v_domain);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_1, __pyx_v_domain);
      __Pyx_INCREF(__pyx_n_s_Grid);
      __Pyx_GIVEREF(__pyx_n_s_Grid);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_1, __pyx_n_s_Grid);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_arGridCollection = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2126
 *         t = self.ProtChSystem.t
 *         xmlFile = os.path.join(Profiling.logDir, self.name)+'.xmf'
 *         if tCount == 0:             # <<<<<<<<<<<<<<
 *             root = ET.Element("Xdmf",
 *                               {"Version": "2.0",
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2137
 *                                              "CollectionType": "Temporal"})
 *         else:
 *             tree = ET.parse(xmlFile)             # <<<<<<<<<<<<<<
 *             root = tree.getroot()
 *             domain = root[0]
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_parse); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_xmlFile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_xmlFile};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2137, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_xmlFile};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2137, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_v_xmlFile);
        __Pyx_GIVEREF(__pyx_v_xmlFile);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_xmlFile);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_tree = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2138
 *         else:
 *             tree = ET.parse(xmlFile)
 *             root = tree.getroot()             # <<<<<<<<<<<<<<
 *             domain = root[0]
 *             arGridCollection = domain[0]
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_tree, __pyx_n_s_getroot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2138, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2138, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_root = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2139
 *             tree = ET.parse(xmlFile)
 *             root = tree.getroot()
 *             domain = root[0]             # <<<<<<<<<<<<<<
 *             arGridCollection = domain[0]
 *         Xdmf_ElementTopology = "Polyline"
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_root, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_domain = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2140
 *             root = tree.getroot()
 *             domain = root[0]
 *             arGridCollection = domain[0]             # <<<<<<<<<<<<<<
 *         Xdmf_ElementTopology = "Polyline"
 *         pos = self.getNodesPosition()
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_arGridCollection = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2141
 *             domain = root[0]
 *             arGridCollection = domain[0]
 *         Xdmf_ElementTopology = "Polyline"             # <<<<<<<<<<<<<<
 *         pos = self.getNodesPosition()
 *         Xdmf_NumberOfElements= len(pos)-1
 */
  __Pyx_INCREF(__pyx_n_s_Polyline);
  __pyx_v_Xdmf_ElementTopology = __pyx_n_s_Polyline;

  /* "mbd/ChRigidBody.pyx":2142
 *             arGridCollection = domain[0]
 *         Xdmf_ElementTopology = "Polyline"
 *         pos = self.getNodesPosition()             # <<<<<<<<<<<<<<
 *         Xdmf_NumberOfElements= len(pos)-1
 *         Xdmf_NodesPerElement = 2
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodesPosition); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2142, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2142, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_pos = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2143
 *         Xdmf_ElementTopology = "Polyline"
 *         pos = self.getNodesPosition()
 *         Xdmf_NumberOfElements= len(pos)-1             # <<<<<<<<<<<<<<
 *         Xdmf_NodesPerElement = 2
 *         dataItemFormat = "HDF"
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_pos); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 2143, __pyx_L1_error)
  __pyx_v_Xdmf_NumberOfElements = (__pyx_t_10 - 1);

  /* "mbd/ChRigidBody.pyx":2144
 *         pos = self.getNodesPosition()
 *         Xdmf_NumberOfElements= len(pos)-1
 *         Xdmf_NodesPerElement = 2             # <<<<<<<<<<<<<<
 *         dataItemFormat = "HDF"
 * 
 */
  __pyx_v_Xdmf_NodesPerElement = 2;

  /* "mbd/ChRigidBody.pyx":2145
 *         Xdmf_NumberOfElements= len(pos)-1
 *         Xdmf_NodesPerElement = 2
 *         dataItemFormat = "HDF"             # <<<<<<<<<<<<<<
 * 
 *         arGrid = ET.SubElement(arGridCollection,
 */
  __Pyx_INCREF(__pyx_n_s_HDF);
  __pyx_v_dataItemFormat = __pyx_n_s_HDF;

  /* "mbd/ChRigidBody.pyx":2147
 *         dataItemFormat = "HDF"
 * 
 *         arGrid = ET.SubElement(arGridCollection,             # <<<<<<<<<<<<<<
 *                                "Grid",
 *                                {"GridType": "Uniform"})
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_SubElement); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":2149
 *         arGrid = ET.SubElement(arGridCollection,
 *                                "Grid",
 *                                {"GridType": "Uniform"})             # <<<<<<<<<<<<<<
 *         arTime = ET.SubElement(arGrid,
 *                                "Time",
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_GridType, __pyx_n_s_Uniform) < 0) __PYX_ERR(0, 2149, __pyx_L1_error)
  __pyx_t_3 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_arGridCollection, __pyx_n_s_Grid, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2147, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_arGridCollection, __pyx_n_s_Grid, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2147, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_arGridCollection);
    __Pyx_GIVEREF(__pyx_v_arGridCollection);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_1, __pyx_v_arGridCollection);
    __Pyx_INCREF(__pyx_n_s_Grid);
    __Pyx_GIVEREF(__pyx_n_s_Grid);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_1, __pyx_n_s_Grid);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_arGrid = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2150
 *                                "Grid",
 *                                {"GridType": "Uniform"})
 *         arTime = ET.SubElement(arGrid,             # <<<<<<<<<<<<<<
 *                                "Time",
 *                                {"Value": str(t),
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_SubElement); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "mbd/ChRigidBody.pyx":2152
 *         arTime = ET.SubElement(arGrid,
 *                                "Time",
 *                                {"Value": str(t),             # <<<<<<<<<<<<<<
 *                                 "Name": str(tCount)})
 *         topology = ET.SubElement(arGrid,
 */
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Value, __pyx_t_5) < 0) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":2153
 *                                "Time",
 *                                {"Value": str(t),
 *                                 "Name": str(tCount)})             # <<<<<<<<<<<<<<
 *         topology = ET.SubElement(arGrid,
 *                                 "Topology",
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Name, __pyx_t_5) < 0) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_arGrid, __pyx_n_s_Time, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2150, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_arGrid, __pyx_n_s_Time, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2150, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(3+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_arGrid);
    __Pyx_GIVEREF(__pyx_v_arGrid);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_1, __pyx_v_arGrid);
    __Pyx_INCREF(__pyx_n_s_Time);
    __Pyx_GIVEREF(__pyx_n_s_Time);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_1, __pyx_n_s_Time);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_arTime = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2154
 *                                {"Value": str(t),
 *                                 "Name": str(tCount)})
 *         topology = ET.SubElement(arGrid,             # <<<<<<<<<<<<<<
 *                                 "Topology",
 *                                 {"Type": Xdmf_ElementTopology,
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_SubElement); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "mbd/ChRigidBody.pyx":2156
 *         topology = ET.SubElement(arGrid,
 *                                 "Topology",
 *                                 {"Type": Xdmf_ElementTopology,             # <<<<<<<<<<<<<<
 *                                 "NumberOfElements": str(Xdmf_NumberOfElements)})
 * 
 */
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_Type, __pyx_v_Xdmf_ElementTopology) < 0) __PYX_ERR(0, 2156, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2157
 *                                 "Topology",
 *                                 {"Type": Xdmf_ElementTopology,
 *                                 "NumberOfElements": str(Xdmf_NumberOfElements)})             # <<<<<<<<<<<<<<
 * 
 *         elements = ET.SubElement(topology,
 */
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_Xdmf_NumberOfElements); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_NumberOfElements, __pyx_t_6) < 0) __PYX_ERR(0, 2156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_arGrid, __pyx_n_s_Topology, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2154, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_arGrid, __pyx_n_s_Topology, __pyx_t_8};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2154, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_arGrid);
    __Pyx_GIVEREF(__pyx_v_arGrid);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_1, __pyx_v_arGrid);
    __Pyx_INCREF(__pyx_n_s_Topology);
    __Pyx_GIVEREF(__pyx_n_s_Topology);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_1, __pyx_n_s_Topology);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_1, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_topology = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2159
 *                                 "NumberOfElements": str(Xdmf_NumberOfElements)})
 * 
 *         elements = ET.SubElement(topology,             # <<<<<<<<<<<<<<
 *                                 "DataItem",
 *                                 {"Format": dataItemFormat,
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_SubElement); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":2161
 *         elements = ET.SubElement(topology,
 *                                 "DataItem",
 *                                 {"Format": dataItemFormat,             # <<<<<<<<<<<<<<
 *                                 "DataType": "Int",
 *                                 "Dimensions": "%i %i" % (Xdmf_NumberOfElements,
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Format, __pyx_v_dataItemFormat) < 0) __PYX_ERR(0, 2161, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_DataType, __pyx_n_s_Int) < 0) __PYX_ERR(0, 2161, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2163
 *                                 {"Format": dataItemFormat,
 *                                 "DataType": "Int",
 *                                 "Dimensions": "%i %i" % (Xdmf_NumberOfElements,             # <<<<<<<<<<<<<<
 *                                                          Xdmf_NodesPerElement)})
 *         elements.text = self.hdfFileName+".h5:/elements_t"+str(tCount)
 */
  __pyx_t_8 = PyInt_FromSsize_t(__pyx_v_Xdmf_NumberOfElements); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "mbd/ChRigidBody.pyx":2164
 *                                 "DataType": "Int",
 *                                 "Dimensions": "%i %i" % (Xdmf_NumberOfElements,
 *                                                          Xdmf_NodesPerElement)})             # <<<<<<<<<<<<<<
 *         elements.text = self.hdfFileName+".h5:/elements_t"+str(tCount)
 *         geometry = ET.SubElement(arGrid,"Geometry",{"Type":"XYZ"})
 */
  __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_Xdmf_NodesPerElement); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "mbd/ChRigidBody.pyx":2163
 *                                 {"Format": dataItemFormat,
 *                                 "DataType": "Int",
 *                                 "Dimensions": "%i %i" % (Xdmf_NumberOfElements,             # <<<<<<<<<<<<<<
 *                                                          Xdmf_NodesPerElement)})
 *         elements.text = self.hdfFileName+".h5:/elements_t"+str(tCount)
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_8 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_i_i, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Dimensions, __pyx_t_6) < 0) __PYX_ERR(0, 2161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_topology, __pyx_n_s_DataItem, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2159, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_topology, __pyx_n_s_DataItem, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2159, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_topology);
    __Pyx_GIVEREF(__pyx_v_topology);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_v_topology);
    __Pyx_INCREF(__pyx_n_s_DataItem);
    __Pyx_GIVEREF(__pyx_n_s_DataItem);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_n_s_DataItem);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_elements = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2165
 *                                 "Dimensions": "%i %i" % (Xdmf_NumberOfElements,
 *                                                          Xdmf_NodesPerElement)})
 *         elements.text = self.hdfFileName+".h5:/elements_t"+str(tCount)             # <<<<<<<<<<<<<<
 *         geometry = ET.SubElement(arGrid,"Geometry",{"Type":"XYZ"})
 *         nodes = ET.SubElement(geometry,
 */
  __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->hdfFileName); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_h5_elements_t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_elements, __pyx_n_s_text, __pyx_t_7) < 0) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "mbd/ChRigidBody.pyx":2166
 *                                                          Xdmf_NodesPerElement)})
 *         elements.text = self.hdfFileName+".h5:/elements_t"+str(tCount)
 *         geometry = ET.SubElement(arGrid,"Geometry",{"Type":"XYZ"})             # <<<<<<<<<<<<<<
 *         nodes = ET.SubElement(geometry,
 *                               "DataItem",
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_SubElement); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Type, __pyx_n_s_XYZ) < 0) __PYX_ERR(0, 2166, __pyx_L1_error)
  __pyx_t_3 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_arGrid, __pyx_n_s_Geometry, __pyx_t_4};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2166, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_arGrid, __pyx_n_s_Geometry, __pyx_t_4};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2166, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_arGrid);
    __Pyx_GIVEREF(__pyx_v_arGrid);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_v_arGrid);
    __Pyx_INCREF(__pyx_n_s_Geometry);
    __Pyx_GIVEREF(__pyx_n_s_Geometry);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_n_s_Geometry);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_geometry = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "mbd/ChRigidBody.pyx":2167
 *         elements.text = self.hdfFileName+".h5:/elements_t"+str(tCount)
 *         geometry = ET.SubElement(arGrid,"Geometry",{"Type":"XYZ"})
 *         nodes = ET.SubElement(geometry,             # <<<<<<<<<<<<<<
 *                               "DataItem",
 *                               {"Format": dataItemFormat,
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_SubElement); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":2169
 *         nodes = ET.SubElement(geometry,
 *                               "DataItem",
 *                               {"Format": dataItemFormat,             # <<<<<<<<<<<<<<
 *                                "DataType": "Float",
 *                                "Precision": "8",
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Format, __pyx_v_dataItemFormat) < 0) __PYX_ERR(0, 2169, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_DataType, __pyx_n_s_Float) < 0) __PYX_ERR(0, 2169, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Precision, __pyx_kp_s_8) < 0) __PYX_ERR(0, 2169, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2172
 *                                "DataType": "Float",
 *                                "Precision": "8",
 *                                "Dimensions": "%i %i" % (pos.shape[0],             # <<<<<<<<<<<<<<
 *                                                         pos.shape[1])})
 *         nodes.text = self.hdfFileName+".h5:/nodes_t"+str(tCount)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pos, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2173
 *                                "Precision": "8",
 *                                "Dimensions": "%i %i" % (pos.shape[0],
 *                                                         pos.shape[1])})             # <<<<<<<<<<<<<<
 *         nodes.text = self.hdfFileName+".h5:/nodes_t"+str(tCount)
 *         attrs = ['ux', 'uy', 'uz',
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pos, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2172
 *                                "DataType": "Float",
 *                                "Precision": "8",
 *                                "Dimensions": "%i %i" % (pos.shape[0],             # <<<<<<<<<<<<<<
 *                                                         pos.shape[1])})
 *         nodes.text = self.hdfFileName+".h5:/nodes_t"+str(tCount)
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_i_i, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Dimensions, __pyx_t_8) < 0) __PYX_ERR(0, 2169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_geometry, __pyx_n_s_DataItem, __pyx_t_5};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2167, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_geometry, __pyx_n_s_DataItem, __pyx_t_5};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2167, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(3+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_geometry);
    __Pyx_GIVEREF(__pyx_v_geometry);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_1, __pyx_v_geometry);
    __Pyx_INCREF(__pyx_n_s_DataItem);
    __Pyx_GIVEREF(__pyx_n_s_DataItem);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_1, __pyx_n_s_DataItem);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_nodes = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "mbd/ChRigidBody.pyx":2174
 *                                "Dimensions": "%i %i" % (pos.shape[0],
 *                                                         pos.shape[1])})
 *         nodes.text = self.hdfFileName+".h5:/nodes_t"+str(tCount)             # <<<<<<<<<<<<<<
 *         attrs = ['ux', 'uy', 'uz',
 *                  'ax', 'ay', 'az',
 */
  __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->hdfFileName); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_h5_nodes_t); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_nodes, __pyx_n_s_text, __pyx_t_4) < 0) __PYX_ERR(0, 2174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2175
 *                                                         pos.shape[1])})
 *         nodes.text = self.hdfFileName+".h5:/nodes_t"+str(tCount)
 *         attrs = ['ux', 'uy', 'uz',             # <<<<<<<<<<<<<<
 *                  'ax', 'ay', 'az',
 *                  'dragx', 'dragy', 'dragz',
 */
  __pyx_t_4 = PyList_New(15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_ux);
  __Pyx_GIVEREF(__pyx_n_s_ux);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_ux);
  __Pyx_INCREF(__pyx_n_s_uy);
  __Pyx_GIVEREF(__pyx_n_s_uy);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_uy);
  __Pyx_INCREF(__pyx_n_s_uz);
  __Pyx_GIVEREF(__pyx_n_s_uz);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_n_s_uz);
  __Pyx_INCREF(__pyx_n_s_ax);
  __Pyx_GIVEREF(__pyx_n_s_ax);
  PyList_SET_ITEM(__pyx_t_4, 3, __pyx_n_s_ax);
  __Pyx_INCREF(__pyx_n_s_ay);
  __Pyx_GIVEREF(__pyx_n_s_ay);
  PyList_SET_ITEM(__pyx_t_4, 4, __pyx_n_s_ay);
  __Pyx_INCREF(__pyx_n_s_az);
  __Pyx_GIVEREF(__pyx_n_s_az);
  PyList_SET_ITEM(__pyx_t_4, 5, __pyx_n_s_az);
  __Pyx_INCREF(__pyx_n_s_dragx);
  __Pyx_GIVEREF(__pyx_n_s_dragx);
  PyList_SET_ITEM(__pyx_t_4, 6, __pyx_n_s_dragx);
  __Pyx_INCREF(__pyx_n_s_dragy);
  __Pyx_GIVEREF(__pyx_n_s_dragy);
  PyList_SET_ITEM(__pyx_t_4, 7, __pyx_n_s_dragy);
  __Pyx_INCREF(__pyx_n_s_dragz);
  __Pyx_GIVEREF(__pyx_n_s_dragz);
  PyList_SET_ITEM(__pyx_t_4, 8, __pyx_n_s_dragz);
  __Pyx_INCREF(__pyx_n_s_amx);
  __Pyx_GIVEREF(__pyx_n_s_amx);
  PyList_SET_ITEM(__pyx_t_4, 9, __pyx_n_s_amx);
  __Pyx_INCREF(__pyx_n_s_amy);
  __Pyx_GIVEREF(__pyx_n_s_amy);
  PyList_SET_ITEM(__pyx_t_4, 10, __pyx_n_s_amy);
  __Pyx_INCREF(__pyx_n_s_amz);
  __Pyx_GIVEREF(__pyx_n_s_amz);
  PyList_SET_ITEM(__pyx_t_4, 11, __pyx_n_s_amz);
  __Pyx_INCREF(__pyx_n_s_sx);
  __Pyx_GIVEREF(__pyx_n_s_sx);
  PyList_SET_ITEM(__pyx_t_4, 12, __pyx_n_s_sx);
  __Pyx_INCREF(__pyx_n_s_sy);
  __Pyx_GIVEREF(__pyx_n_s_sy);
  PyList_SET_ITEM(__pyx_t_4, 13, __pyx_n_s_sy);
  __Pyx_INCREF(__pyx_n_s_sz);
  __Pyx_GIVEREF(__pyx_n_s_sz);
  PyList_SET_ITEM(__pyx_t_4, 14, __pyx_n_s_sz);
  __pyx_v_attrs = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2180
 *                  'amx', 'amy', 'amz',
 *                  'sx', 'sy', 'sz']
 *         for name in attrs:             # <<<<<<<<<<<<<<
 *             attr = ET.SubElement(arGrid,
 *                                  "Attribute",
 */
  __pyx_t_4 = __pyx_v_attrs; __Pyx_INCREF(__pyx_t_4); __pyx_t_10 = 0;
  for (;;) {
    if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 2180, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "mbd/ChRigidBody.pyx":2181
 *                  'sx', 'sy', 'sz']
 *         for name in attrs:
 *             attr = ET.SubElement(arGrid,             # <<<<<<<<<<<<<<
 *                                  "Attribute",
 *                                  {"Name": name,
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_SubElement); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "mbd/ChRigidBody.pyx":2183
 *             attr = ET.SubElement(arGrid,
 *                                  "Attribute",
 *                                  {"Name": name,             # <<<<<<<<<<<<<<
 *                                   "AttributeType": "Scalar",
 *                                   "Center": "Node"})
 */
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Name, __pyx_v_name) < 0) __PYX_ERR(0, 2183, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_AttributeType, __pyx_n_s_Scalar) < 0) __PYX_ERR(0, 2183, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Center, __pyx_n_s_Node) < 0) __PYX_ERR(0, 2183, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_1 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_arGrid, __pyx_n_s_Attribute, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2181, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_arGrid, __pyx_n_s_Attribute, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2181, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_arGrid);
      __Pyx_GIVEREF(__pyx_v_arGrid);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_1, __pyx_v_arGrid);
      __Pyx_INCREF(__pyx_n_s_Attribute);
      __Pyx_GIVEREF(__pyx_n_s_Attribute);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_1, __pyx_n_s_Attribute);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_attr, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "mbd/ChRigidBody.pyx":2186
 *                                   "AttributeType": "Scalar",
 *                                   "Center": "Node"})
 *             data = ET.SubElement(attr,             # <<<<<<<<<<<<<<
 *                                  "DataItem",
 *                                  {"Format": dataItemFormat,
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_SubElement); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2188
 *             data = ET.SubElement(attr,
 *                                  "DataItem",
 *                                  {"Format": dataItemFormat,             # <<<<<<<<<<<<<<
 *                                   "DataType": "Float",
 *                                   "Precision": "8",
 */
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Format, __pyx_v_dataItemFormat) < 0) __PYX_ERR(0, 2188, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_DataType, __pyx_n_s_Float) < 0) __PYX_ERR(0, 2188, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Precision, __pyx_kp_s_8) < 0) __PYX_ERR(0, 2188, __pyx_L1_error)

    /* "mbd/ChRigidBody.pyx":2191
 *                                   "DataType": "Float",
 *                                   "Precision": "8",
 *                                   "Dimensions": "%i" % (pos.shape[0])})             # <<<<<<<<<<<<<<
 *             data.text = self.hdfFileName+".h5:/"+name+"_t"+str(tCount)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_pos, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_i, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Dimensions, __pyx_t_6) < 0) __PYX_ERR(0, 2188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_1 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_attr, __pyx_n_s_DataItem, __pyx_t_5};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2186, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_attr, __pyx_n_s_DataItem, __pyx_t_5};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 3+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2186, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_attr);
      __Pyx_GIVEREF(__pyx_v_attr);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_1, __pyx_v_attr);
      __Pyx_INCREF(__pyx_n_s_DataItem);
      __Pyx_GIVEREF(__pyx_n_s_DataItem);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_1, __pyx_n_s_DataItem);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_data, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "mbd/ChRigidBody.pyx":2192
 *                                   "Precision": "8",
 *                                   "Dimensions": "%i" % (pos.shape[0])})
 *             data.text = self.hdfFileName+".h5:/"+name+"_t"+str(tCount)             # <<<<<<<<<<<<<<
 * 
 *         tree = ET.ElementTree(root)
 */
    __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->hdfFileName); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_h5_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_3, __pyx_v_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_7, __pyx_n_s_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_tCount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_data, __pyx_n_s_text, __pyx_t_8) < 0) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "mbd/ChRigidBody.pyx":2180
 *                  'amx', 'amy', 'amz',
 *                  'sx', 'sy', 'sz']
 *         for name in attrs:             # <<<<<<<<<<<<<<
 *             attr = ET.SubElement(arGrid,
 *                                  "Attribute",
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2194
 *             data.text = self.hdfFileName+".h5:/"+name+"_t"+str(tCount)
 * 
 *         tree = ET.ElementTree(root)             # <<<<<<<<<<<<<<
 * 
 *         with open(xmlFile, "w") as f:
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_ET); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_ElementTree); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_root); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_root};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2194, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_root};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2194, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_root);
      __Pyx_GIVEREF(__pyx_v_root);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_root);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_XDECREF_SET(__pyx_v_tree, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2196
 *         tree = ET.ElementTree(root)
 * 
 *         with open(xmlFile, "w") as f:             # <<<<<<<<<<<<<<
 *             xmlHeader = "<?xml version=\"1.0\" ?>\n<!DOCTYPE Xdmf SYSTEM \"Xdmf.dtd\" []>\n"
 *             f.write(xmlHeader)
 */
  /*with:*/ {
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_xmlFile);
    __Pyx_GIVEREF(__pyx_v_xmlFile);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_xmlFile);
    __Pyx_INCREF(__pyx_n_s_w);
    __Pyx_GIVEREF(__pyx_n_s_w);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_w);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyObject_LookupSpecial(__pyx_t_7, __pyx_n_s_exit); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_7, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2196, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2196, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2196, __pyx_L6_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_14);
        /*try:*/ {
          __pyx_v_f = __pyx_t_3;
          __pyx_t_3 = 0;

          /* "mbd/ChRigidBody.pyx":2197
 * 
 *         with open(xmlFile, "w") as f:
 *             xmlHeader = "<?xml version=\"1.0\" ?>\n<!DOCTYPE Xdmf SYSTEM \"Xdmf.dtd\" []>\n"             # <<<<<<<<<<<<<<
 *             f.write(xmlHeader)
 *             indentXML(tree.getroot())
 */
          __Pyx_INCREF(__pyx_kp_s_xml_version_1_0_DOCTYPE_Xdmf_SY);
          __pyx_v_xmlHeader = __pyx_kp_s_xml_version_1_0_DOCTYPE_Xdmf_SY;

          /* "mbd/ChRigidBody.pyx":2198
 *         with open(xmlFile, "w") as f:
 *             xmlHeader = "<?xml version=\"1.0\" ?>\n<!DOCTYPE Xdmf SYSTEM \"Xdmf.dtd\" []>\n"
 *             f.write(xmlHeader)             # <<<<<<<<<<<<<<
 *             indentXML(tree.getroot())
 *             tree.write(f)
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2198, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          if (!__pyx_t_4) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_xmlHeader); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2198, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_xmlHeader};
              __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2198, __pyx_L10_error)
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_GOTREF(__pyx_t_3);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_xmlHeader};
              __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2198, __pyx_L10_error)
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_GOTREF(__pyx_t_3);
            } else
            #endif
            {
              __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2198, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
              __Pyx_INCREF(__pyx_v_xmlHeader);
              __Pyx_GIVEREF(__pyx_v_xmlHeader);
              PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_xmlHeader);
              __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2198, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "mbd/ChRigidBody.pyx":2199
 *             xmlHeader = "<?xml version=\"1.0\" ?>\n<!DOCTYPE Xdmf SYSTEM \"Xdmf.dtd\" []>\n"
 *             f.write(xmlHeader)
 *             indentXML(tree.getroot())             # <<<<<<<<<<<<<<
 *             tree.write(f)
 * 
 */
          __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_indentXML); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2199, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tree, __pyx_n_s_getroot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2199, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          if (__pyx_t_5) {
            __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2199, __pyx_L10_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2199, __pyx_L10_error)
          }
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          if (!__pyx_t_4) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2199, __pyx_L10_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_8};
              __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2199, __pyx_L10_error)
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_8};
              __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2199, __pyx_L10_error)
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            } else
            #endif
            {
              __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2199, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
              __Pyx_GIVEREF(__pyx_t_8);
              PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_8);
              __pyx_t_8 = 0;
              __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2199, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "mbd/ChRigidBody.pyx":2200
 *             f.write(xmlHeader)
 *             indentXML(tree.getroot())
 *             tree.write(f)             # <<<<<<<<<<<<<<
 * 
 *     def _recordValues(self):
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_tree, __pyx_n_s_write); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2200, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          if (!__pyx_t_5) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_f); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2200, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_f};
              __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2200, __pyx_L10_error)
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_GOTREF(__pyx_t_3);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_f};
              __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2200, __pyx_L10_error)
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_GOTREF(__pyx_t_3);
            } else
            #endif
            {
              __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2200, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
              __Pyx_INCREF(__pyx_v_f);
              __Pyx_GIVEREF(__pyx_v_f);
              PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_f);
              __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2200, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "mbd/ChRigidBody.pyx":2196
 *         tree = ET.ElementTree(root)
 * 
 *         with open(xmlFile, "w") as f:             # <<<<<<<<<<<<<<
 *             xmlHeader = "<?xml version=\"1.0\" ?>\n<!DOCTYPE Xdmf SYSTEM \"Xdmf.dtd\" []>\n"
 *             f.write(xmlHeader)
 */
        }
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L17_try_end;
        __pyx_L10_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings._recordXML", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 2196, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2196, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_5, NULL);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2196, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (__pyx_t_9 < 0) __PYX_ERR(0, 2196, __pyx_L12_except_error)
          __pyx_t_16 = ((!(__pyx_t_9 != 0)) != 0);
          if (__pyx_t_16) {
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_7);
            __Pyx_XGIVEREF(__pyx_t_8);
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_7, __pyx_t_8);
            __pyx_t_3 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; 
            __PYX_ERR(0, 2196, __pyx_L12_except_error)
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L11_exception_handled;
        }
        __pyx_L12_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        goto __pyx_L1_error;
        __pyx_L11_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        __pyx_L17_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_11) {
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__123, NULL);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2196, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        goto __pyx_L9;
      }
      __pyx_L9:;
    }
    goto __pyx_L21;
    __pyx_L6_error:;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    goto __pyx_L1_error;
    __pyx_L21:;
  }

  /* "mbd/ChRigidBody.pyx":2122
 *         dset[...] = datav[:,2]
 * 
 *     def _recordXML(self):             # <<<<<<<<<<<<<<
 *         tCount = self.ProtChSystem.tCount
 *         t = self.ProtChSystem.t
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings._recordXML", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_xmlFile);
  __Pyx_XDECREF(__pyx_v_root);
  __Pyx_XDECREF(__pyx_v_domain);
  __Pyx_XDECREF(__pyx_v_arGridCollection);
  __Pyx_XDECREF(__pyx_v_tree);
  __Pyx_XDECREF(__pyx_v_Xdmf_ElementTopology);
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF(__pyx_v_dataItemFormat);
  __Pyx_XDECREF(__pyx_v_arGrid);
  __Pyx_XDECREF(__pyx_v_arTime);
  __Pyx_XDECREF(__pyx_v_topology);
  __Pyx_XDECREF(__pyx_v_elements);
  __Pyx_XDECREF(__pyx_v_geometry);
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_attr);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_xmlHeader);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2202
 *             tree.write(f)
 * 
 *     def _recordValues(self):             # <<<<<<<<<<<<<<
 *         """Records values in csv files
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11_recordValues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_10_recordValues[] = "Records values in csv files\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11_recordValues(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_recordValues (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10_recordValues(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2206
 *         """
 *         self.record_file = os.path.join(Profiling.logDir, self.name)
 *         def record(record_file, row, mode='a'):             # <<<<<<<<<<<<<<
 *             with open(record_file, mode) as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_1record(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_1record = {"record", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_1record, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_1record(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_record_file = 0;
  PyObject *__pyx_v_row = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("record (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_record_file,&__pyx_n_s_row,&__pyx_n_s_mode,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject*)__pyx_n_s_a));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_record_file)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_row)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("record", 0, 2, 3, 1); __PYX_ERR(0, 2206, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "record") < 0)) __PYX_ERR(0, 2206, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_record_file = values[0];
    __pyx_v_row = values[1];
    __pyx_v_mode = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("record", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2206, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings._recordValues.record", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_self, __pyx_v_record_file, __pyx_v_row, __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_record_file, PyObject *__pyx_v_row, PyObject *__pyx_v_mode) {
  PyObject *__pyx_v_csvfile = NULL;
  PyObject *__pyx_v_writer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("record", 0);

  /* "mbd/ChRigidBody.pyx":2207
 *         self.record_file = os.path.join(Profiling.logDir, self.name)
 *         def record(record_file, row, mode='a'):
 *             with open(record_file, mode) as csvfile:             # <<<<<<<<<<<<<<
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(row)
 */
  /*with:*/ {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_record_file);
    __Pyx_GIVEREF(__pyx_v_record_file);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_record_file);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_mode);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2207, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2207, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2207, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          __pyx_v_csvfile = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "mbd/ChRigidBody.pyx":2208
 *         def record(record_file, row, mode='a'):
 *             with open(record_file, mode) as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')             # <<<<<<<<<<<<<<
 *                 writer.writerow(row)
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()
 */
          __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_csv_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2208, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_writer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2208, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2208, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_v_csvfile);
          __Pyx_GIVEREF(__pyx_v_csvfile);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_csvfile);
          __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2208, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_delimiter, __pyx_kp_s__78) < 0) __PYX_ERR(0, 2208, __pyx_L7_error)
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2208, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_writer = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "mbd/ChRigidBody.pyx":2209
 *             with open(record_file, mode) as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(row)             # <<<<<<<<<<<<<<
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()
 *         if self.ProtChSystem.model is not None:
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_writer, __pyx_n_s_writerow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2209, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          if (!__pyx_t_4) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2209, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_1)) {
              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_row};
              __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2209, __pyx_L7_error)
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_GOTREF(__pyx_t_5);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
              PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_row};
              __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2209, __pyx_L7_error)
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_GOTREF(__pyx_t_5);
            } else
            #endif
            {
              __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2209, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
              __Pyx_INCREF(__pyx_v_row);
              __Pyx_GIVEREF(__pyx_v_row);
              PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_row);
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2209, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "mbd/ChRigidBody.pyx":2207
 *         self.record_file = os.path.join(Profiling.logDir, self.name)
 *         def record(record_file, row, mode='a'):
 *             with open(record_file, mode) as csvfile:             # <<<<<<<<<<<<<<
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(row)
 */
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings._recordValues.record", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_2) < 0) __PYX_ERR(0, 2207, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_4 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2207, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2207, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_10 < 0) __PYX_ERR(0, 2207, __pyx_L9_except_error)
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_2);
            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_1, __pyx_t_2);
            __pyx_t_5 = 0; __pyx_t_1 = 0; __pyx_t_2 = 0; 
            __PYX_ERR(0, 2207, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_3) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__124, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2207, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L18;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L1_error;
    __pyx_L18:;
  }

  /* "mbd/ChRigidBody.pyx":2206
 *         """
 *         self.record_file = os.path.join(Profiling.logDir, self.name)
 *         def record(record_file, row, mode='a'):             # <<<<<<<<<<<<<<
 *             with open(record_file, mode) as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings._recordValues.record", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_csvfile);
  __Pyx_XDECREF(__pyx_v_writer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2202
 *             tree.write(f)
 * 
 *     def _recordValues(self):             # <<<<<<<<<<<<<<
 *         """Records values in csv files
 *         """
 */

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10_recordValues(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_v_record = 0;
  double __pyx_v_t_chrono;
  PyObject *__pyx_v_t_last = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_dt_last = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_t_sim = NULL;
  PyObject *__pyx_v_header_x = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_v_file_name = NULL;
  PyObject *__pyx_v_row = NULL;
  PyObject *__pyx_v_positions = NULL;
  PyObject *__pyx_v_velocities = NULL;
  PyObject *__pyx_v_accelerations = NULL;
  PyObject *__pyx_v_Tb = NULL;
  PyObject *__pyx_v_Tf = NULL;
  PyObject *__pyx_v_eta = NULL;
  PyObject *__pyx_v_tensions = NULL;
  PyObject *__pyx_v_forces = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  __Pyx_RefNannySetupContext("_recordValues", 0);

  /* "mbd/ChRigidBody.pyx":2205
 *         """Records values in csv files
 *         """
 *         self.record_file = os.path.join(Profiling.logDir, self.name)             # <<<<<<<<<<<<<<
 *         def record(record_file, row, mode='a'):
 *             with open(record_file, mode) as csvfile:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_logDir); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2205, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2205, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 2205, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->record_file);
  __Pyx_DECREF(__pyx_v_self->record_file);
  __pyx_v_self->record_file = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2206
 *         """
 *         self.record_file = os.path.join(Profiling.logDir, self.name)
 *         def record(record_file, row, mode='a'):             # <<<<<<<<<<<<<<
 *             with open(record_file, mode) as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_1record, 0, __pyx_n_s_recordValues_locals_record, NULL, __pyx_n_s_mbd_ChRigidBody, __pyx_d, ((PyObject *)__pyx_codeobj__126)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__127);
  __pyx_v_record = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2210
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(row)
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()             # <<<<<<<<<<<<<<
 *         if self.ProtChSystem.model is not None:
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 */
  __pyx_v_t_chrono = __pyx_v_self->ProtChSystem->thisptr->system.GetChTime();

  /* "mbd/ChRigidBody.pyx":2211
 *                 writer.writerow(row)
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()
 *         if self.ProtChSystem.model is not None:             # <<<<<<<<<<<<<<
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:
 */
  __pyx_t_8 = (__pyx_v_self->ProtChSystem->model != Py_None);
  __pyx_t_9 = (__pyx_t_8 != 0);
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2212
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()
 *         if self.ProtChSystem.model is not None:
 *             t_last = self.ProtChSystem.model.stepController.t_model_last             # <<<<<<<<<<<<<<
 *             try:
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->ProtChSystem->model, __pyx_n_s_stepController); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_t_model_last); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_t_last = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2213
 *         if self.ProtChSystem.model is not None:
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:             # <<<<<<<<<<<<<<
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 *             except:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      /*try:*/ {

        /* "mbd/ChRigidBody.pyx":2214
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last             # <<<<<<<<<<<<<<
 *             except:
 *                 dt_last = 0
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->ProtChSystem->model, __pyx_n_s_levelModelList); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2214, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2214, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dt_last); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2214, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_dt_last = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "mbd/ChRigidBody.pyx":2213
 *         if self.ProtChSystem.model is not None:
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:             # <<<<<<<<<<<<<<
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "mbd/ChRigidBody.pyx":2215
 *             try:
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 *             except:             # <<<<<<<<<<<<<<
 *                 dt_last = 0
 *             t = t_last
 */
      /*except:*/ {
        __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings._recordValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(0, 2215, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_7);

        /* "mbd/ChRigidBody.pyx":2216
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 *             except:
 *                 dt_last = 0             # <<<<<<<<<<<<<<
 *             t = t_last
 *         else:
 */
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_XDECREF_SET(__pyx_v_dt_last, __pyx_int_0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L5_exception_handled;
      }
      __pyx_L6_except_error:;

      /* "mbd/ChRigidBody.pyx":2213
 *         if self.ProtChSystem.model is not None:
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:             # <<<<<<<<<<<<<<
 *                 dt_last = self.ProtChSystem.model.levelModelList[-1].dt_last
 *             except:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      goto __pyx_L1_error;
      __pyx_L5_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_L11_try_end:;
    }

    /* "mbd/ChRigidBody.pyx":2217
 *             except:
 *                 dt_last = 0
 *             t = t_last             # <<<<<<<<<<<<<<
 *         else:
 *             t = t_chrono
 */
    __Pyx_INCREF(__pyx_v_t_last);
    __pyx_v_t = __pyx_v_t_last;

    /* "mbd/ChRigidBody.pyx":2211
 *                 writer.writerow(row)
 *         t_chrono = self.ProtChSystem.thisptr.system.GetChTime()
 *         if self.ProtChSystem.model is not None:             # <<<<<<<<<<<<<<
 *             t_last = self.ProtChSystem.model.stepController.t_model_last
 *             try:
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2219
 *             t = t_last
 *         else:
 *             t = t_chrono             # <<<<<<<<<<<<<<
 *         t_sim = Profiling.time()-Profiling.startTime
 *         if t == 0:
 */
  /*else*/ {
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_t_chrono); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_t = __pyx_t_7;
    __pyx_t_7 = 0;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2220
 *         else:
 *             t = t_chrono
 *         t_sim = Profiling.time()-Profiling.startTime             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             header_x = []
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2220, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_startTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t_sim = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":2221
 *             t = t_chrono
 *         t_sim = Profiling.time()-Profiling.startTime
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             header_x = []
 *             for i in range(self.thisptr.nodes.size()):
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2222
 *         t_sim = Profiling.time()-Profiling.startTime
 *         if t == 0:
 *             header_x = []             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.nodes.size()):
 *                 header_x += ['x'+str(i), 'y'+str(i), 'z'+str(i)]
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_header_x = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2223
 *         if t == 0:
 *             header_x = []
 *             for i in range(self.thisptr.nodes.size()):             # <<<<<<<<<<<<<<
 *                 header_x += ['x'+str(i), 'y'+str(i), 'z'+str(i)]
 *         # time
 */
    __pyx_t_13 = __pyx_v_self->thisptr->nodes.size();
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_i = __pyx_t_14;

      /* "mbd/ChRigidBody.pyx":2224
 *             header_x = []
 *             for i in range(self.thisptr.nodes.size()):
 *                 header_x += ['x'+str(i), 'y'+str(i), 'z'+str(i)]             # <<<<<<<<<<<<<<
 *         # time
 *         file_name = '_t.csv'
 */
      __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_n_s_x, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_n_s_y, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_n_s_z, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_3);
      PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_header_x, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_header_x, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;
    }

    /* "mbd/ChRigidBody.pyx":2221
 *             t = t_chrono
 *         t_sim = Profiling.time()-Profiling.startTime
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             header_x = []
 *             for i in range(self.thisptr.nodes.size()):
 */
  }

  /* "mbd/ChRigidBody.pyx":2226
 *                 header_x += ['x'+str(i), 'y'+str(i), 'z'+str(i)]
 *         # time
 *         file_name = '_t.csv'             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             row = ['t', 't_ch', 't_sim']
 */
  __Pyx_INCREF(__pyx_kp_s_t_csv);
  __pyx_v_file_name = __pyx_kp_s_t_csv;

  /* "mbd/ChRigidBody.pyx":2227
 *         # time
 *         file_name = '_t.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             row = ['t', 't_ch', 't_sim']
 *             record(self.record_file+file_name, row, 'w')
 */
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2228
 *         file_name = '_t.csv'
 *         if t == 0:
 *             row = ['t', 't_ch', 't_sim']             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, row, 'w')
 *         row = [t, t_chrono, t_sim]
 */
    __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_t);
    __Pyx_GIVEREF(__pyx_n_s_t);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_t);
    __Pyx_INCREF(__pyx_n_s_t_ch);
    __Pyx_GIVEREF(__pyx_n_s_t_ch);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_t_ch);
    __Pyx_INCREF(__pyx_n_s_t_sim);
    __Pyx_GIVEREF(__pyx_n_s_t_sim);
    PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_t_sim);
    __pyx_v_row = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":2229
 *         if t == 0:
 *             row = ['t', 't_ch', 't_sim']
 *             record(self.record_file+file_name, row, 'w')             # <<<<<<<<<<<<<<
 *         row = [t, t_chrono, t_sim]
 *         record(self.record_file+file_name, row)
 */
    __pyx_t_3 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_v_record, __pyx_t_3, __pyx_v_row, __pyx_n_s_w); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2227
 *         # time
 *         file_name = '_t.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             row = ['t', 't_ch', 't_sim']
 *             record(self.record_file+file_name, row, 'w')
 */
  }

  /* "mbd/ChRigidBody.pyx":2230
 *             row = ['t', 't_ch', 't_sim']
 *             record(self.record_file+file_name, row, 'w')
 *         row = [t, t_chrono, t_sim]             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Positions
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t_chrono); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_t);
  __Pyx_GIVEREF(__pyx_v_t);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_t);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_t_sim);
  __Pyx_GIVEREF(__pyx_v_t_sim);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_v_t_sim);
  __pyx_t_2 = 0;
  __Pyx_XDECREF_SET(__pyx_v_row, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":2231
 *             record(self.record_file+file_name, row, 'w')
 *         row = [t, t_chrono, t_sim]
 *         record(self.record_file+file_name, row)             # <<<<<<<<<<<<<<
 *         # Positions
 *         file_name = '_pos.csv'
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_row);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_record, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":2233
 *         record(self.record_file+file_name, row)
 *         # Positions
 *         file_name = '_pos.csv'             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 */
  __Pyx_INCREF(__pyx_kp_s_pos_csv);
  __Pyx_DECREF_SET(__pyx_v_file_name, __pyx_kp_s_pos_csv);

  /* "mbd/ChRigidBody.pyx":2234
 *         # Positions
 *         file_name = '_pos.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         positions = self.getNodesPosition()
 */
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2235
 *         file_name = '_pos.csv'
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')             # <<<<<<<<<<<<<<
 *         positions = self.getNodesPosition()
 *         row = (positions.flatten('C')).tolist()
 */
    __pyx_t_3 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(!__pyx_v_header_x)) { __Pyx_RaiseUnboundLocalError("header_x"); __PYX_ERR(0, 2235, __pyx_L1_error) }
    __pyx_t_2 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_v_record, __pyx_t_3, __pyx_v_header_x, __pyx_n_s_w); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2234
 *         # Positions
 *         file_name = '_pos.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         positions = self.getNodesPosition()
 */
  }

  /* "mbd/ChRigidBody.pyx":2236
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 *         positions = self.getNodesPosition()             # <<<<<<<<<<<<<<
 *         row = (positions.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodesPosition); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2236, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2236, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_positions = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":2237
 *             record(self.record_file+file_name, header_x, 'w')
 *         positions = self.getNodesPosition()
 *         row = (positions.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Velocity
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_positions, __pyx_n_s_flatten); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__128, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_tolist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2237, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":2238
 *         positions = self.getNodesPosition()
 *         row = (positions.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)             # <<<<<<<<<<<<<<
 *         # Velocity
 *         file_name = '_posdt.csv'
 */
  __pyx_t_2 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_row);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_record, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":2240
 *         record(self.record_file+file_name, row)
 *         # Velocity
 *         file_name = '_posdt.csv'             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 */
  __Pyx_INCREF(__pyx_kp_s_posdt_csv);
  __Pyx_DECREF_SET(__pyx_v_file_name, __pyx_kp_s_posdt_csv);

  /* "mbd/ChRigidBody.pyx":2241
 *         # Velocity
 *         file_name = '_posdt.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         velocities = self.getNodesVelocity()
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2242
 *         file_name = '_posdt.csv'
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')             # <<<<<<<<<<<<<<
 *         velocities = self.getNodesVelocity()
 *         row = (velocities.flatten('C')).tolist()
 */
    __pyx_t_2 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(!__pyx_v_header_x)) { __Pyx_RaiseUnboundLocalError("header_x"); __PYX_ERR(0, 2242, __pyx_L1_error) }
    __pyx_t_3 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_v_record, __pyx_t_2, __pyx_v_header_x, __pyx_n_s_w); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":2241
 *         # Velocity
 *         file_name = '_posdt.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         velocities = self.getNodesVelocity()
 */
  }

  /* "mbd/ChRigidBody.pyx":2243
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 *         velocities = self.getNodesVelocity()             # <<<<<<<<<<<<<<
 *         row = (velocities.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodesVelocity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2243, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_velocities = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":2244
 *             record(self.record_file+file_name, header_x, 'w')
 *         velocities = self.getNodesVelocity()
 *         row = (velocities.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Acceleration
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_velocities, __pyx_n_s_flatten); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__129, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_tolist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2244, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":2245
 *         velocities = self.getNodesVelocity()
 *         row = (velocities.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)             # <<<<<<<<<<<<<<
 *         # Acceleration
 *         file_name = '_posdtdt.csv'
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_row);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_record, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":2247
 *         record(self.record_file+file_name, row)
 *         # Acceleration
 *         file_name = '_posdtdt.csv'             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 */
  __Pyx_INCREF(__pyx_kp_s_posdtdt_csv);
  __Pyx_DECREF_SET(__pyx_v_file_name, __pyx_kp_s_posdtdt_csv);

  /* "mbd/ChRigidBody.pyx":2248
 *         # Acceleration
 *         file_name = '_posdtdt.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         accelerations = self.getNodesAcceleration()
 */
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2249
 *         file_name = '_posdtdt.csv'
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')             # <<<<<<<<<<<<<<
 *         accelerations = self.getNodesAcceleration()
 *         row = (accelerations.flatten('C')).tolist()
 */
    __pyx_t_3 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(!__pyx_v_header_x)) { __Pyx_RaiseUnboundLocalError("header_x"); __PYX_ERR(0, 2249, __pyx_L1_error) }
    __pyx_t_2 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_v_record, __pyx_t_3, __pyx_v_header_x, __pyx_n_s_w); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2248
 *         # Acceleration
 *         file_name = '_posdtdt.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         accelerations = self.getNodesAcceleration()
 */
  }

  /* "mbd/ChRigidBody.pyx":2250
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 *         accelerations = self.getNodesAcceleration()             # <<<<<<<<<<<<<<
 *         row = (accelerations.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodesAcceleration); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2250, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2250, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_accelerations = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":2251
 *             record(self.record_file+file_name, header_x, 'w')
 *         accelerations = self.getNodesAcceleration()
 *         row = (accelerations.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Fairlead / anchor tensions
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_accelerations, __pyx_n_s_flatten); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__130, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_tolist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2251, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":2252
 *         accelerations = self.getNodesAcceleration()
 *         row = (accelerations.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)             # <<<<<<<<<<<<<<
 *         # Fairlead / anchor tensions
 *         file_name = '_tens.csv'
 */
  __pyx_t_2 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_row);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_record, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":2254
 *         record(self.record_file+file_name, row)
 *         # Fairlead / anchor tensions
 *         file_name = '_tens.csv'             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             row = ['Tb0', 'Tb1', 'Tb2', 'Tf0', 'Tf1', 'Tf2']
 */
  __Pyx_INCREF(__pyx_kp_s_tens_csv);
  __Pyx_DECREF_SET(__pyx_v_file_name, __pyx_kp_s_tens_csv);

  /* "mbd/ChRigidBody.pyx":2255
 *         # Fairlead / anchor tensions
 *         file_name = '_tens.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             row = ['Tb0', 'Tb1', 'Tb2', 'Tf0', 'Tf1', 'Tf2']
 *             record(self.record_file+file_name, row, 'w')
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2256
 *         file_name = '_tens.csv'
 *         if t == 0:
 *             row = ['Tb0', 'Tb1', 'Tb2', 'Tf0', 'Tf1', 'Tf2']             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, row, 'w')
 *         Tb = self.getTensionBack()
 */
    __pyx_t_2 = PyList_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_Tb0);
    __Pyx_GIVEREF(__pyx_n_s_Tb0);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Tb0);
    __Pyx_INCREF(__pyx_n_s_Tb1);
    __Pyx_GIVEREF(__pyx_n_s_Tb1);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Tb1);
    __Pyx_INCREF(__pyx_n_s_Tb2);
    __Pyx_GIVEREF(__pyx_n_s_Tb2);
    PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_Tb2);
    __Pyx_INCREF(__pyx_n_s_Tf0);
    __Pyx_GIVEREF(__pyx_n_s_Tf0);
    PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_Tf0);
    __Pyx_INCREF(__pyx_n_s_Tf1);
    __Pyx_GIVEREF(__pyx_n_s_Tf1);
    PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_Tf1);
    __Pyx_INCREF(__pyx_n_s_Tf2);
    __Pyx_GIVEREF(__pyx_n_s_Tf2);
    PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_Tf2);
    __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2257
 *         if t == 0:
 *             row = ['Tb0', 'Tb1', 'Tb2', 'Tf0', 'Tf1', 'Tf2']
 *             record(self.record_file+file_name, row, 'w')             # <<<<<<<<<<<<<<
 *         Tb = self.getTensionBack()
 *         Tf = self.getTensionFront()
 */
    __pyx_t_2 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_v_record, __pyx_t_2, __pyx_v_row, __pyx_n_s_w); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":2255
 *         # Fairlead / anchor tensions
 *         file_name = '_tens.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             row = ['Tb0', 'Tb1', 'Tb2', 'Tf0', 'Tf1', 'Tf2']
 *             record(self.record_file+file_name, row, 'w')
 */
  }

  /* "mbd/ChRigidBody.pyx":2258
 *             row = ['Tb0', 'Tb1', 'Tb2', 'Tf0', 'Tf1', 'Tf2']
 *             record(self.record_file+file_name, row, 'w')
 *         Tb = self.getTensionBack()             # <<<<<<<<<<<<<<
 *         Tf = self.getTensionFront()
 *         row = [Tb[0], Tb[1], Tb[2], Tf[0], Tf[1], Tf[2]]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getTensionBack); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2258, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Tb = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":2259
 *             record(self.record_file+file_name, row, 'w')
 *         Tb = self.getTensionBack()
 *         Tf = self.getTensionFront()             # <<<<<<<<<<<<<<
 *         row = [Tb[0], Tb[1], Tb[2], Tf[0], Tf[1], Tf[2]]
 *         record(self.record_file+file_name, row)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getTensionFront); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2259, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Tf = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":2260
 *         Tb = self.getTensionBack()
 *         Tf = self.getTensionFront()
 *         row = [Tb[0], Tb[1], Tb[2], Tf[0], Tf[1], Tf[2]]             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Tensions
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_Tb, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_Tb, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_Tb, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_Tf, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_Tf, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_Tf, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = PyList_New(6); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_15, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_15, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_15, 4, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_15, 5, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_15);
  __pyx_t_15 = 0;

  /* "mbd/ChRigidBody.pyx":2261
 *         Tf = self.getTensionFront()
 *         row = [Tb[0], Tb[1], Tb[2], Tf[0], Tf[1], Tf[2]]
 *         record(self.record_file+file_name, row)             # <<<<<<<<<<<<<<
 *         # Tensions
 *         for i in range(len(self._record_etas)):
 */
  __pyx_t_15 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_15);
  __Pyx_INCREF(__pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_row);
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_v_record, __pyx_t_5, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "mbd/ChRigidBody.pyx":2263
 *         record(self.record_file+file_name, row)
 *         # Tensions
 *         for i in range(len(self._record_etas)):             # <<<<<<<<<<<<<<
 *             eta = self._record_etas[i]
 *             file_name = '_strain'+str(eta)+'.csv'
 */
  if (unlikely(!__pyx_v_self->_record_etas.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2263, __pyx_L1_error)}
  __pyx_t_15 = __pyx_memoryview_fromslice(__pyx_v_self->_record_etas, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = PyObject_Length(__pyx_t_15); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 2263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_16; __pyx_t_13+=1) {
    __pyx_v_i = __pyx_t_13;

    /* "mbd/ChRigidBody.pyx":2264
 *         # Tensions
 *         for i in range(len(self._record_etas)):
 *             eta = self._record_etas[i]             # <<<<<<<<<<<<<<
 *             file_name = '_strain'+str(eta)+'.csv'
 *             if t == 0:
 */
    if (unlikely(!__pyx_v_self->_record_etas.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2264, __pyx_L1_error)}
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_6 = -1;
    if (unlikely(__pyx_t_14 >= (size_t)__pyx_v_self->_record_etas.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 2264, __pyx_L1_error)
    }
    __pyx_t_15 = PyFloat_FromDouble((*((double *) ( /* dim=0 */ (__pyx_v_self->_record_etas.data + __pyx_t_14 * __pyx_v_self->_record_etas.strides[0]) )))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_XDECREF_SET(__pyx_v_eta, __pyx_t_15);
    __pyx_t_15 = 0;

    /* "mbd/ChRigidBody.pyx":2265
 *         for i in range(len(self._record_etas)):
 *             eta = self._record_etas[i]
 *             file_name = '_strain'+str(eta)+'.csv'             # <<<<<<<<<<<<<<
 *             if t == 0:
 *                 record(self.record_file+file_name, header_x[:-3], 'w')
 */
    __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_INCREF(__pyx_v_eta);
    __Pyx_GIVEREF(__pyx_v_eta);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_v_eta);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_15, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = PyNumber_Add(__pyx_n_s_strain, __pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_15, __pyx_kp_s_csv); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF_SET(__pyx_v_file_name, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2266
 *             eta = self._record_etas[i]
 *             file_name = '_strain'+str(eta)+'.csv'
 *             if t == 0:             # <<<<<<<<<<<<<<
 *                 record(self.record_file+file_name, header_x[:-3], 'w')
 *             tensions = self.getNodesTension(eta=eta)
 */
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_9) {

      /* "mbd/ChRigidBody.pyx":2267
 *             file_name = '_strain'+str(eta)+'.csv'
 *             if t == 0:
 *                 record(self.record_file+file_name, header_x[:-3], 'w')             # <<<<<<<<<<<<<<
 *             tensions = self.getNodesTension(eta=eta)
 *             row = (tensions.flatten('C')).tolist()
 */
      __pyx_t_5 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(!__pyx_v_header_x)) { __Pyx_RaiseUnboundLocalError("header_x"); __PYX_ERR(0, 2267, __pyx_L1_error) }
      __pyx_t_15 = __Pyx_PyList_GetSlice(__pyx_v_header_x, 0, -3L); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_4 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_v_record, __pyx_t_5, __pyx_t_15, __pyx_n_s_w); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "mbd/ChRigidBody.pyx":2266
 *             eta = self._record_etas[i]
 *             file_name = '_strain'+str(eta)+'.csv'
 *             if t == 0:             # <<<<<<<<<<<<<<
 *                 record(self.record_file+file_name, header_x[:-3], 'w')
 *             tensions = self.getNodesTension(eta=eta)
 */
    }

    /* "mbd/ChRigidBody.pyx":2268
 *             if t == 0:
 *                 record(self.record_file+file_name, header_x[:-3], 'w')
 *             tensions = self.getNodesTension(eta=eta)             # <<<<<<<<<<<<<<
 *             row = (tensions.flatten('C')).tolist()
 *             record(self.record_file+file_name, row)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodesTension); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_15 = PyDict_New(); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_eta, __pyx_v_eta) < 0) __PYX_ERR(0, 2268, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF_SET(__pyx_v_tensions, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2269
 *                 record(self.record_file+file_name, header_x[:-3], 'w')
 *             tensions = self.getNodesTension(eta=eta)
 *             row = (tensions.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, row)
 *         # Drag
 */
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_tensions, __pyx_n_s_flatten); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__131, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tolist); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2269, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2269, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2270
 *             tensions = self.getNodesTension(eta=eta)
 *             row = (tensions.flatten('C')).tolist()
 *             record(self.record_file+file_name, row)             # <<<<<<<<<<<<<<
 *         # Drag
 *         file_name = '_drag.csv'
 */
    __pyx_t_5 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_row);
    __Pyx_GIVEREF(__pyx_v_row);
    PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_v_row);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_record, __pyx_t_15, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "mbd/ChRigidBody.pyx":2272
 *             record(self.record_file+file_name, row)
 *         # Drag
 *         file_name = '_drag.csv'             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 */
  __Pyx_INCREF(__pyx_kp_s_drag_csv);
  __Pyx_DECREF_SET(__pyx_v_file_name, __pyx_kp_s_drag_csv);

  /* "mbd/ChRigidBody.pyx":2273
 *         # Drag
 *         file_name = '_drag.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         forces = self.getDragForces()
 */
  __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2274
 *         file_name = '_drag.csv'
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')             # <<<<<<<<<<<<<<
 *         forces = self.getDragForces()
 *         row = (forces.flatten('C')).tolist()
 */
    __pyx_t_5 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_header_x)) { __Pyx_RaiseUnboundLocalError("header_x"); __PYX_ERR(0, 2274, __pyx_L1_error) }
    __pyx_t_15 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_v_record, __pyx_t_5, __pyx_v_header_x, __pyx_n_s_w); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "mbd/ChRigidBody.pyx":2273
 *         # Drag
 *         file_name = '_drag.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         forces = self.getDragForces()
 */
  }

  /* "mbd/ChRigidBody.pyx":2275
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 *         forces = self.getDragForces()             # <<<<<<<<<<<<<<
 *         row = (forces.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getDragForces); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_15 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2275, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_forces = __pyx_t_15;
  __pyx_t_15 = 0;

  /* "mbd/ChRigidBody.pyx":2276
 *             record(self.record_file+file_name, header_x, 'w')
 *         forces = self.getDragForces()
 *         row = (forces.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Added mass
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_forces, __pyx_n_s_flatten); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__132, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tolist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_15 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2276, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_15);
  __pyx_t_15 = 0;

  /* "mbd/ChRigidBody.pyx":2277
 *         forces = self.getDragForces()
 *         row = (forces.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)             # <<<<<<<<<<<<<<
 *         # Added mass
 *         file_name = '_AM.csv'
 */
  __pyx_t_15 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_15);
  __Pyx_INCREF(__pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_row);
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_v_record, __pyx_t_5, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "mbd/ChRigidBody.pyx":2279
 *         record(self.record_file+file_name, row)
 *         # Added mass
 *         file_name = '_AM.csv'             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 */
  __Pyx_INCREF(__pyx_kp_s_AM_csv);
  __Pyx_DECREF_SET(__pyx_v_file_name, __pyx_kp_s_AM_csv);

  /* "mbd/ChRigidBody.pyx":2280
 *         # Added mass
 *         file_name = '_AM.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         forces = self.getAddedMassForces()
 */
  __pyx_t_15 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2281
 *         file_name = '_AM.csv'
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')             # <<<<<<<<<<<<<<
 *         forces = self.getAddedMassForces()
 *         row = (forces.flatten('C')).tolist()
 */
    __pyx_t_15 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (unlikely(!__pyx_v_header_x)) { __Pyx_RaiseUnboundLocalError("header_x"); __PYX_ERR(0, 2281, __pyx_L1_error) }
    __pyx_t_5 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_v_record, __pyx_t_15, __pyx_v_header_x, __pyx_n_s_w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2280
 *         # Added mass
 *         file_name = '_AM.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         forces = self.getAddedMassForces()
 */
  }

  /* "mbd/ChRigidBody.pyx":2282
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 *         forces = self.getAddedMassForces()             # <<<<<<<<<<<<<<
 *         row = (forces.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getAddedMassForces); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2282, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF_SET(__pyx_v_forces, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":2283
 *             record(self.record_file+file_name, header_x, 'w')
 *         forces = self.getAddedMassForces()
 *         row = (forces.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Fluid Velocity
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_forces, __pyx_n_s_flatten); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__133, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tolist); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2283, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":2284
 *         forces = self.getAddedMassForces()
 *         row = (forces.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)             # <<<<<<<<<<<<<<
 *         # Fluid Velocity
 *         file_name = '_u.csv'
 */
  __pyx_t_5 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_v_row);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_record, __pyx_t_15, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":2286
 *         record(self.record_file+file_name, row)
 *         # Fluid Velocity
 *         file_name = '_u.csv'             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 */
  __Pyx_INCREF(__pyx_kp_s_u_csv);
  __Pyx_DECREF_SET(__pyx_v_file_name, __pyx_kp_s_u_csv);

  /* "mbd/ChRigidBody.pyx":2287
 *         # Fluid Velocity
 *         file_name = '_u.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         velocities = self.fluid_velocity_array
 */
  __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2288
 *         file_name = '_u.csv'
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')             # <<<<<<<<<<<<<<
 *         velocities = self.fluid_velocity_array
 *         row = (velocities.flatten('C')).tolist()
 */
    __pyx_t_5 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_header_x)) { __Pyx_RaiseUnboundLocalError("header_x"); __PYX_ERR(0, 2288, __pyx_L1_error) }
    __pyx_t_15 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_v_record, __pyx_t_5, __pyx_v_header_x, __pyx_n_s_w); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "mbd/ChRigidBody.pyx":2287
 *         # Fluid Velocity
 *         file_name = '_u.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         velocities = self.fluid_velocity_array
 */
  }

  /* "mbd/ChRigidBody.pyx":2289
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 *         velocities = self.fluid_velocity_array             # <<<<<<<<<<<<<<
 *         row = (velocities.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)
 */
  __pyx_t_15 = ((PyObject *)__pyx_v_self->fluid_velocity_array);
  __Pyx_INCREF(__pyx_t_15);
  __Pyx_DECREF_SET(__pyx_v_velocities, __pyx_t_15);
  __pyx_t_15 = 0;

  /* "mbd/ChRigidBody.pyx":2290
 *             record(self.record_file+file_name, header_x, 'w')
 *         velocities = self.fluid_velocity_array
 *         row = (velocities.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Fluid Acceleration
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_velocities, __pyx_n_s_flatten); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__134, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tolist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_15 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2290, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_15);
  __pyx_t_15 = 0;

  /* "mbd/ChRigidBody.pyx":2291
 *         velocities = self.fluid_velocity_array
 *         row = (velocities.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)             # <<<<<<<<<<<<<<
 *         # Fluid Acceleration
 *         file_name = '_udt.csv'
 */
  __pyx_t_15 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_15);
  __Pyx_INCREF(__pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_row);
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_v_record, __pyx_t_5, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "mbd/ChRigidBody.pyx":2293
 *         record(self.record_file+file_name, row)
 *         # Fluid Acceleration
 *         file_name = '_udt.csv'             # <<<<<<<<<<<<<<
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 */
  __Pyx_INCREF(__pyx_kp_s_udt_csv);
  __Pyx_DECREF_SET(__pyx_v_file_name, __pyx_kp_s_udt_csv);

  /* "mbd/ChRigidBody.pyx":2294
 *         # Fluid Acceleration
 *         file_name = '_udt.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         accelerations = self.fluid_acceleration_array
 */
  __pyx_t_15 = __Pyx_PyInt_EqObjC(__pyx_v_t, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (__pyx_t_9) {

    /* "mbd/ChRigidBody.pyx":2295
 *         file_name = '_udt.csv'
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')             # <<<<<<<<<<<<<<
 *         accelerations = self.fluid_acceleration_array
 *         row = (accelerations.flatten('C')).tolist()
 */
    __pyx_t_15 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (unlikely(!__pyx_v_header_x)) { __Pyx_RaiseUnboundLocalError("header_x"); __PYX_ERR(0, 2295, __pyx_L1_error) }
    __pyx_t_5 = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_13_recordValues_record(__pyx_v_record, __pyx_t_15, __pyx_v_header_x, __pyx_n_s_w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2294
 *         # Fluid Acceleration
 *         file_name = '_udt.csv'
 *         if t == 0:             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, header_x, 'w')
 *         accelerations = self.fluid_acceleration_array
 */
  }

  /* "mbd/ChRigidBody.pyx":2296
 *         if t == 0:
 *             record(self.record_file+file_name, header_x, 'w')
 *         accelerations = self.fluid_acceleration_array             # <<<<<<<<<<<<<<
 *         row = (accelerations.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)
 */
  __pyx_t_5 = ((PyObject *)__pyx_v_self->fluid_acceleration_array);
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_DECREF_SET(__pyx_v_accelerations, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":2297
 *             record(self.record_file+file_name, header_x, 'w')
 *         accelerations = self.fluid_acceleration_array
 *         row = (accelerations.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 * 
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_accelerations, __pyx_n_s_flatten); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__135, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tolist); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2297, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":2298
 *         accelerations = self.fluid_acceleration_array
 *         row = (accelerations.flatten('C')).tolist()
 *         record(self.record_file+file_name, row)             # <<<<<<<<<<<<<<
 * 
 *     def getTensionBack(self):
 */
  __pyx_t_5 = PyNumber_Add(__pyx_v_self->record_file, __pyx_v_file_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_v_row);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_record, __pyx_t_15, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "mbd/ChRigidBody.pyx":2202
 *             tree.write(f)
 * 
 *     def _recordValues(self):             # <<<<<<<<<<<<<<
 *         """Records values in csv files
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings._recordValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_record);
  __Pyx_XDECREF(__pyx_v_t_last);
  __Pyx_XDECREF(__pyx_v_dt_last);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_t_sim);
  __Pyx_XDECREF(__pyx_v_header_x);
  __Pyx_XDECREF(__pyx_v_file_name);
  __Pyx_XDECREF(__pyx_v_row);
  __Pyx_XDECREF(__pyx_v_positions);
  __Pyx_XDECREF(__pyx_v_velocities);
  __Pyx_XDECREF(__pyx_v_accelerations);
  __Pyx_XDECREF(__pyx_v_Tb);
  __Pyx_XDECREF(__pyx_v_Tf);
  __Pyx_XDECREF(__pyx_v_eta);
  __Pyx_XDECREF(__pyx_v_tensions);
  __Pyx_XDECREF(__pyx_v_forces);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2300
 *         record(self.record_file+file_name, row)
 * 
 *     def getTensionBack(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get Tension at the back of the cable
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_13getTensionBack(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_12getTensionBack[] = "\n        Get Tension at the back of the cable\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_13getTensionBack(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTensionBack (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12getTensionBack(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12getTensionBack(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  ChVector<double>  __pyx_v_T;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getTensionBack", 0);

  /* "mbd/ChRigidBody.pyx":2305
 *         """
 *         cdef ch.ChVector T
 *         if self.thisptr.constraint_back:             # <<<<<<<<<<<<<<
 *             T = deref(self.thisptr.constraint_back).Get_react_force()
 *             return pych.ChVector_to_npArray(T)
 */
  __pyx_t_1 = __pyx_v_self->thisptr->constraint_back.operator bool();
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2306
 *         cdef ch.ChVector T
 *         if self.thisptr.constraint_back:
 *             T = deref(self.thisptr.constraint_back).Get_react_force()             # <<<<<<<<<<<<<<
 *             return pych.ChVector_to_npArray(T)
 *         else:
 */
    __pyx_v_T = (*__pyx_v_self->thisptr->constraint_back).Get_react_force();

    /* "mbd/ChRigidBody.pyx":2307
 *         if self.thisptr.constraint_back:
 *             T = deref(self.thisptr.constraint_back).Get_react_force()
 *             return pych.ChVector_to_npArray(T)             # <<<<<<<<<<<<<<
 *         else:
 *             return np.zeros(3)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_7proteus_3mbd_12pyChronoCore_ChVector_to_npArray(((ChVector<double>  &)__pyx_v_T))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "mbd/ChRigidBody.pyx":2305
 *         """
 *         cdef ch.ChVector T
 *         if self.thisptr.constraint_back:             # <<<<<<<<<<<<<<
 *             T = deref(self.thisptr.constraint_back).Get_react_force()
 *             return pych.ChVector_to_npArray(T)
 */
  }

  /* "mbd/ChRigidBody.pyx":2309
 *             return pych.ChVector_to_npArray(T)
 *         else:
 *             return np.zeros(3)             # <<<<<<<<<<<<<<
 * 
 *     def getTensionFront(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__136, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "mbd/ChRigidBody.pyx":2300
 *         record(self.record_file+file_name, row)
 * 
 *     def getTensionBack(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get Tension at the back of the cable
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getTensionBack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2311
 *             return np.zeros(3)
 * 
 *     def getTensionFront(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get Tension at the front of the cable
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_15getTensionFront(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_14getTensionFront[] = "\n        Get Tension at the front of the cable\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_15getTensionFront(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTensionFront (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14getTensionFront(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14getTensionFront(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  ChVector<double>  __pyx_v_T;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getTensionFront", 0);

  /* "mbd/ChRigidBody.pyx":2316
 *         """
 *         cdef ch.ChVector T
 *         if self.thisptr.constraint_front:             # <<<<<<<<<<<<<<
 *             T = deref(self.thisptr.constraint_front).Get_react_force()
 *             return pych.ChVector_to_npArray(T)
 */
  __pyx_t_1 = __pyx_v_self->thisptr->constraint_front.operator bool();
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2317
 *         cdef ch.ChVector T
 *         if self.thisptr.constraint_front:
 *             T = deref(self.thisptr.constraint_front).Get_react_force()             # <<<<<<<<<<<<<<
 *             return pych.ChVector_to_npArray(T)
 *         else:
 */
    __pyx_v_T = (*__pyx_v_self->thisptr->constraint_front).Get_react_force();

    /* "mbd/ChRigidBody.pyx":2318
 *         if self.thisptr.constraint_front:
 *             T = deref(self.thisptr.constraint_front).Get_react_force()
 *             return pych.ChVector_to_npArray(T)             # <<<<<<<<<<<<<<
 *         else:
 *             return np.zeros(3)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_7proteus_3mbd_12pyChronoCore_ChVector_to_npArray(((ChVector<double>  &)__pyx_v_T))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "mbd/ChRigidBody.pyx":2316
 *         """
 *         cdef ch.ChVector T
 *         if self.thisptr.constraint_front:             # <<<<<<<<<<<<<<
 *             T = deref(self.thisptr.constraint_front).Get_react_force()
 *             return pych.ChVector_to_npArray(T)
 */
  }

  /* "mbd/ChRigidBody.pyx":2320
 *             return pych.ChVector_to_npArray(T)
 *         else:
 *             return np.zeros(3)             # <<<<<<<<<<<<<<
 * 
 *     def calculate_init(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__137, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "mbd/ChRigidBody.pyx":2311
 *             return np.zeros(3)
 * 
 *     def getTensionFront(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get Tension at the front of the cable
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getTensionFront", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2322
 *             return np.zeros(3)
 * 
 *     def calculate_init(self):             # <<<<<<<<<<<<<<
 *         # build position vector of nodes (for each segment)
 *         # self.setNodesPosition()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_17calculate_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_17calculate_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_init (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_16calculate_init(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_16calculate_init(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  size_t __pyx_v_nb_nodes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("calculate_init", 0);

  /* "mbd/ChRigidBody.pyx":2326
 *         # self.setNodesPosition()
 *         # build cable (nodes, elements, etc)
 *         self.thisptr.buildCable()             # <<<<<<<<<<<<<<
 *         if self.beam_type == "BeamEuler":
 *             nb_nodes = self.thisptr.nodesRot.size()
 */
  __pyx_v_self->thisptr->buildCable();

  /* "mbd/ChRigidBody.pyx":2327
 *         # build cable (nodes, elements, etc)
 *         self.thisptr.buildCable()
 *         if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *             nb_nodes = self.thisptr.nodesRot.size()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2328
 *         self.thisptr.buildCable()
 *         if self.beam_type == "BeamEuler":
 *             nb_nodes = self.thisptr.nodesRot.size()             # <<<<<<<<<<<<<<
 *         else:
 *             nb_nodes = self.thisptr.nodes.size()
 */
    __pyx_v_nb_nodes = __pyx_v_self->thisptr->nodesRot.size();

    /* "mbd/ChRigidBody.pyx":2327
 *         # build cable (nodes, elements, etc)
 *         self.thisptr.buildCable()
 *         if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *             nb_nodes = self.thisptr.nodesRot.size()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2330
 *             nb_nodes = self.thisptr.nodesRot.size()
 *         else:
 *             nb_nodes = self.thisptr.nodes.size()             # <<<<<<<<<<<<<<
 *         if self.fluid_velocity_array is None:
 *             self.fluid_velocity_array = np.zeros((nb_nodes, 3))
 */
  /*else*/ {
    __pyx_v_nb_nodes = __pyx_v_self->thisptr->nodes.size();
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2331
 *         else:
 *             nb_nodes = self.thisptr.nodes.size()
 *         if self.fluid_velocity_array is None:             # <<<<<<<<<<<<<<
 *             self.fluid_velocity_array = np.zeros((nb_nodes, 3))
 *             self.fluid_velocity_array_previous = np.zeros((nb_nodes, 3))
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->fluid_velocity_array) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":2332
 *             nb_nodes = self.thisptr.nodes.size()
 *         if self.fluid_velocity_array is None:
 *             self.fluid_velocity_array = np.zeros((nb_nodes, 3))             # <<<<<<<<<<<<<<
 *             self.fluid_velocity_array_previous = np.zeros((nb_nodes, 3))
 *         if self.fluid_acceleration_array is None:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_nb_nodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_3);
    __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2332, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2332, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2332, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2332, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2332, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2332, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->fluid_velocity_array);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_velocity_array));
    __pyx_v_self->fluid_velocity_array = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":2333
 *         if self.fluid_velocity_array is None:
 *             self.fluid_velocity_array = np.zeros((nb_nodes, 3))
 *             self.fluid_velocity_array_previous = np.zeros((nb_nodes, 3))             # <<<<<<<<<<<<<<
 *         if self.fluid_acceleration_array is None:
 *             self.fluid_acceleration_array = np.zeros((nb_nodes, 3))
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_FromSize_t(__pyx_v_nb_nodes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_3);
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2333, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2333, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2333, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2333, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->fluid_velocity_array_previous);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_velocity_array_previous));
    __pyx_v_self->fluid_velocity_array_previous = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":2331
 *         else:
 *             nb_nodes = self.thisptr.nodes.size()
 *         if self.fluid_velocity_array is None:             # <<<<<<<<<<<<<<
 *             self.fluid_velocity_array = np.zeros((nb_nodes, 3))
 *             self.fluid_velocity_array_previous = np.zeros((nb_nodes, 3))
 */
  }

  /* "mbd/ChRigidBody.pyx":2334
 *             self.fluid_velocity_array = np.zeros((nb_nodes, 3))
 *             self.fluid_velocity_array_previous = np.zeros((nb_nodes, 3))
 *         if self.fluid_acceleration_array is None:             # <<<<<<<<<<<<<<
 *             self.fluid_acceleration_array = np.zeros((nb_nodes, 3))
 *         if self.fluid_density_array is None:
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_self->fluid_acceleration_array) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2335
 *             self.fluid_velocity_array_previous = np.zeros((nb_nodes, 3))
 *         if self.fluid_acceleration_array is None:
 *             self.fluid_acceleration_array = np.zeros((nb_nodes, 3))             # <<<<<<<<<<<<<<
 *         if self.fluid_density_array is None:
 *             self.fluid_density_array = np.zeros(nb_nodes)
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_v_nb_nodes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_3);
    __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2335, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2335, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2335, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2335, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->fluid_acceleration_array);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_acceleration_array));
    __pyx_v_self->fluid_acceleration_array = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":2334
 *             self.fluid_velocity_array = np.zeros((nb_nodes, 3))
 *             self.fluid_velocity_array_previous = np.zeros((nb_nodes, 3))
 *         if self.fluid_acceleration_array is None:             # <<<<<<<<<<<<<<
 *             self.fluid_acceleration_array = np.zeros((nb_nodes, 3))
 *         if self.fluid_density_array is None:
 */
  }

  /* "mbd/ChRigidBody.pyx":2336
 *         if self.fluid_acceleration_array is None:
 *             self.fluid_acceleration_array = np.zeros((nb_nodes, 3))
 *         if self.fluid_density_array is None:             # <<<<<<<<<<<<<<
 *             self.fluid_density_array = np.zeros(nb_nodes)
 *         self.nearest_node_array = np.zeros(nb_nodes, dtype=np.int32)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->fluid_density_array) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":2337
 *             self.fluid_acceleration_array = np.zeros((nb_nodes, 3))
 *         if self.fluid_density_array is None:
 *             self.fluid_density_array = np.zeros(nb_nodes)             # <<<<<<<<<<<<<<
 *         self.nearest_node_array = np.zeros(nb_nodes, dtype=np.int32)
 *         self.containing_element_array = np.zeros(nb_nodes, dtype=np.int32)
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_nb_nodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2337, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2337, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2337, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2337, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->fluid_density_array);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_density_array));
    __pyx_v_self->fluid_density_array = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":2336
 *         if self.fluid_acceleration_array is None:
 *             self.fluid_acceleration_array = np.zeros((nb_nodes, 3))
 *         if self.fluid_density_array is None:             # <<<<<<<<<<<<<<
 *             self.fluid_density_array = np.zeros(nb_nodes)
 *         self.nearest_node_array = np.zeros(nb_nodes, dtype=np.int32)
 */
  }

  /* "mbd/ChRigidBody.pyx":2338
 *         if self.fluid_density_array is None:
 *             self.fluid_density_array = np.zeros(nb_nodes)
 *         self.nearest_node_array = np.zeros(nb_nodes, dtype=np.int32)             # <<<<<<<<<<<<<<
 *         self.containing_element_array = np.zeros(nb_nodes, dtype=np.int32)
 *         self.owning_rank = np.zeros(nb_nodes, dtype=np.int32)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_nb_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_t_6);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->nearest_node_array, 0);
  __pyx_v_self->nearest_node_array = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "mbd/ChRigidBody.pyx":2339
 *             self.fluid_density_array = np.zeros(nb_nodes)
 *         self.nearest_node_array = np.zeros(nb_nodes, dtype=np.int32)
 *         self.containing_element_array = np.zeros(nb_nodes, dtype=np.int32)             # <<<<<<<<<<<<<<
 *         self.owning_rank = np.zeros(nb_nodes, dtype=np.int32)
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_v_nb_nodes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_t_4);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->containing_element_array, 0);
  __pyx_v_self->containing_element_array = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "mbd/ChRigidBody.pyx":2340
 *         self.nearest_node_array = np.zeros(nb_nodes, dtype=np.int32)
 *         self.containing_element_array = np.zeros(nb_nodes, dtype=np.int32)
 *         self.owning_rank = np.zeros(nb_nodes, dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *     def prestep(self):
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_nb_nodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_t_5);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->owning_rank, 0);
  __pyx_v_self->owning_rank = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "mbd/ChRigidBody.pyx":2322
 *             return np.zeros(3)
 * 
 *     def calculate_init(self):             # <<<<<<<<<<<<<<
 *         # build position vector of nodes (for each segment)
 *         # self.setNodesPosition()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.calculate_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2342
 *         self.owning_rank = np.zeros(nb_nodes, dtype=np.int32)
 * 
 *     def prestep(self):             # <<<<<<<<<<<<<<
 *         """Sets external forces on the cable (if any)
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19prestep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_18prestep[] = "Sets external forces on the cable (if any)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19prestep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prestep (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_18prestep(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_18prestep(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("prestep", 0);

  /* "mbd/ChRigidBody.pyx":2345
 *         """Sets external forces on the cable (if any)
 *         """
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:             # <<<<<<<<<<<<<<
 *             self.setExternalForces()
 *         elif self.external_forces_manual is True:
 */
  __pyx_t_2 = (__pyx_v_self->ProtChSystem->model != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_self->external_forces_from_ns == 1) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2346
 *         """
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:
 *             self.setExternalForces()             # <<<<<<<<<<<<<<
 *         elif self.external_forces_manual is True:
 *             self.setExternalForces()
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setExternalForces); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2346, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2346, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2345
 *         """Sets external forces on the cable (if any)
 *         """
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:             # <<<<<<<<<<<<<<
 *             self.setExternalForces()
 *         elif self.external_forces_manual is True:
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2347
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:
 *             self.setExternalForces()
 *         elif self.external_forces_manual is True:             # <<<<<<<<<<<<<<
 *             self.setExternalForces()
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->external_forces_manual == 1) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2348
 *             self.setExternalForces()
 *         elif self.external_forces_manual is True:
 *             self.setExternalForces()             # <<<<<<<<<<<<<<
 * 
 *     def poststep(self):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setExternalForces); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2348, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2348, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2347
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:
 *             self.setExternalForces()
 *         elif self.external_forces_manual is True:             # <<<<<<<<<<<<<<
 *             self.setExternalForces()
 * 
 */
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2342
 *         self.owning_rank = np.zeros(nb_nodes, dtype=np.int32)
 * 
 *     def prestep(self):             # <<<<<<<<<<<<<<
 *         """Sets external forces on the cable (if any)
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.prestep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2350
 *             self.setExternalForces()
 * 
 *     def poststep(self):             # <<<<<<<<<<<<<<
 *         """Records values
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_21poststep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_20poststep[] = "Records values\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_21poststep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("poststep (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20poststep(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20poststep(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_v_comm = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("poststep", 0);

  /* "mbd/ChRigidBody.pyx":2353
 *         """Records values
 *         """
 *         if self.initialized is False:             # <<<<<<<<<<<<<<
 *             self.initialized = True
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->initialized == 0) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2354
 *         """
 *         if self.initialized is False:
 *             self.initialized = True             # <<<<<<<<<<<<<<
 * 
 *         comm = Comm.get().comm.tompi4py()
 */
    __pyx_v_self->initialized = 1;

    /* "mbd/ChRigidBody.pyx":2353
 *         """Records values
 *         """
 *         if self.initialized is False:             # <<<<<<<<<<<<<<
 *             self.initialized = True
 * 
 */
  }

  /* "mbd/ChRigidBody.pyx":2356
 *             self.initialized = True
 * 
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:
 *             self._recordValues()
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2356, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_comm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2356, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_comm = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":2357
 * 
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:             # <<<<<<<<<<<<<<
 *             self._recordValues()
 *             self._recordH5()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_rank); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = ((__pyx_v_self->ProtChSystem->record_values == 1) != 0);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2358
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:
 *             self._recordValues()             # <<<<<<<<<<<<<<
 *             self._recordH5()
 *             self._recordXML()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_recordValues); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2358, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2358, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2359
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:
 *             self._recordValues()
 *             self._recordH5()             # <<<<<<<<<<<<<<
 *             self._recordXML()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_recordH5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2359, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2359, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2360
 *             self._recordValues()
 *             self._recordH5()
 *             self._recordXML()             # <<<<<<<<<<<<<<
 * 
 *     def setApplyDrag(self, bool boolval):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_recordXML); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2360, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2360, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2357
 * 
 *         comm = Comm.get().comm.tompi4py()
 *         if comm.rank == self.ProtChSystem.chrono_processor and self.ProtChSystem.record_values is True:             # <<<<<<<<<<<<<<
 *             self._recordValues()
 *             self._recordH5()
 */
  }

  /* "mbd/ChRigidBody.pyx":2350
 *             self.setExternalForces()
 * 
 *     def poststep(self):             # <<<<<<<<<<<<<<
 *         """Records values
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.poststep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2362
 *             self._recordXML()
 * 
 *     def setApplyDrag(self, bool boolval):             # <<<<<<<<<<<<<<
 *         for i in range(self.thisptr.cables.size()):
 *             deref(self.thisptr.cables[i]).applyDrag = True
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23setApplyDrag(PyObject *__pyx_v_self, PyObject *__pyx_arg_boolval); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23setApplyDrag(PyObject *__pyx_v_self, PyObject *__pyx_arg_boolval) {
  CYTHON_UNUSED bool __pyx_v_boolval;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setApplyDrag (wrapper)", 0);
  assert(__pyx_arg_boolval); {
    __pyx_v_boolval = __Pyx_PyObject_IsTrue(__pyx_arg_boolval); if (unlikely((__pyx_v_boolval == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2362, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setApplyDrag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22setApplyDrag(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((bool)__pyx_v_boolval));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22setApplyDrag(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, CYTHON_UNUSED bool __pyx_v_boolval) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("setApplyDrag", 0);

  /* "mbd/ChRigidBody.pyx":2363
 * 
 *     def setApplyDrag(self, bool boolval):
 *         for i in range(self.thisptr.cables.size()):             # <<<<<<<<<<<<<<
 *             deref(self.thisptr.cables[i]).applyDrag = True
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->cables.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "mbd/ChRigidBody.pyx":2364
 *     def setApplyDrag(self, bool boolval):
 *         for i in range(self.thisptr.cables.size()):
 *             deref(self.thisptr.cables[i]).applyDrag = True             # <<<<<<<<<<<<<<
 * 
 *     def setApplyAddedMass(self, bool boolval):
 */
    (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).applyDrag = 1;
  }

  /* "mbd/ChRigidBody.pyx":2362
 *             self._recordXML()
 * 
 *     def setApplyDrag(self, bool boolval):             # <<<<<<<<<<<<<<
 *         for i in range(self.thisptr.cables.size()):
 *             deref(self.thisptr.cables[i]).applyDrag = True
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2366
 *             deref(self.thisptr.cables[i]).applyDrag = True
 * 
 *     def setApplyAddedMass(self, bool boolval):             # <<<<<<<<<<<<<<
 *         for i in range(self.thisptr.cables.size()):
 *             deref(self.thisptr.cables[i]).applyAddedMass = True
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_25setApplyAddedMass(PyObject *__pyx_v_self, PyObject *__pyx_arg_boolval); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_25setApplyAddedMass(PyObject *__pyx_v_self, PyObject *__pyx_arg_boolval) {
  CYTHON_UNUSED bool __pyx_v_boolval;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setApplyAddedMass (wrapper)", 0);
  assert(__pyx_arg_boolval); {
    __pyx_v_boolval = __Pyx_PyObject_IsTrue(__pyx_arg_boolval); if (unlikely((__pyx_v_boolval == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2366, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setApplyAddedMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24setApplyAddedMass(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((bool)__pyx_v_boolval));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24setApplyAddedMass(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, CYTHON_UNUSED bool __pyx_v_boolval) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("setApplyAddedMass", 0);

  /* "mbd/ChRigidBody.pyx":2367
 * 
 *     def setApplyAddedMass(self, bool boolval):
 *         for i in range(self.thisptr.cables.size()):             # <<<<<<<<<<<<<<
 *             deref(self.thisptr.cables[i]).applyAddedMass = True
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->cables.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "mbd/ChRigidBody.pyx":2368
 *     def setApplyAddedMass(self, bool boolval):
 *         for i in range(self.thisptr.cables.size()):
 *             deref(self.thisptr.cables[i]).applyAddedMass = True             # <<<<<<<<<<<<<<
 * 
 *     def setApplyBuoyancy(self, bool boolval):
 */
    (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).applyAddedMass = 1;
  }

  /* "mbd/ChRigidBody.pyx":2366
 *             deref(self.thisptr.cables[i]).applyDrag = True
 * 
 *     def setApplyAddedMass(self, bool boolval):             # <<<<<<<<<<<<<<
 *         for i in range(self.thisptr.cables.size()):
 *             deref(self.thisptr.cables[i]).applyAddedMass = True
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2370
 *             deref(self.thisptr.cables[i]).applyAddedMass = True
 * 
 *     def setApplyBuoyancy(self, bool boolval):             # <<<<<<<<<<<<<<
 *         for i in range(self.thisptr.cables.size()):
 *             deref(self.thisptr.cables[i]).applyBuoyancy = True
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_27setApplyBuoyancy(PyObject *__pyx_v_self, PyObject *__pyx_arg_boolval); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_27setApplyBuoyancy(PyObject *__pyx_v_self, PyObject *__pyx_arg_boolval) {
  CYTHON_UNUSED bool __pyx_v_boolval;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setApplyBuoyancy (wrapper)", 0);
  assert(__pyx_arg_boolval); {
    __pyx_v_boolval = __Pyx_PyObject_IsTrue(__pyx_arg_boolval); if (unlikely((__pyx_v_boolval == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2370, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setApplyBuoyancy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_26setApplyBuoyancy(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((bool)__pyx_v_boolval));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_26setApplyBuoyancy(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, CYTHON_UNUSED bool __pyx_v_boolval) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("setApplyBuoyancy", 0);

  /* "mbd/ChRigidBody.pyx":2371
 * 
 *     def setApplyBuoyancy(self, bool boolval):
 *         for i in range(self.thisptr.cables.size()):             # <<<<<<<<<<<<<<
 *             deref(self.thisptr.cables[i]).applyBuoyancy = True
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->cables.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "mbd/ChRigidBody.pyx":2372
 *     def setApplyBuoyancy(self, bool boolval):
 *         for i in range(self.thisptr.cables.size()):
 *             deref(self.thisptr.cables[i]).applyBuoyancy = True             # <<<<<<<<<<<<<<
 * 
 *     def setNodesPositionFunction(self, function_position, function_tangent=None):
 */
    (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).applyBuoyancy = 1;
  }

  /* "mbd/ChRigidBody.pyx":2370
 *             deref(self.thisptr.cables[i]).applyAddedMass = True
 * 
 *     def setApplyBuoyancy(self, bool boolval):             # <<<<<<<<<<<<<<
 *         for i in range(self.thisptr.cables.size()):
 *             deref(self.thisptr.cables[i]).applyBuoyancy = True
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2374
 *             deref(self.thisptr.cables[i]).applyBuoyancy = True
 * 
 *     def setNodesPositionFunction(self, function_position, function_tangent=None):             # <<<<<<<<<<<<<<
 *         """Function to build nodes
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29setNodesPositionFunction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_28setNodesPositionFunction[] = "Function to build nodes\n\n        Parameters\n        ----------\n        function_position:\n            Must be a function taking one argument (e.g. distance\n            along cable) and returning 3 arguments (x, y, z) coords.\n        function_position: Optional\n            Must be a function taking one argument (e.g. distance\n            along cable) and returning 3 arguments (x, y, z) tangents at coords.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29setNodesPositionFunction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_function_position = 0;
  PyObject *__pyx_v_function_tangent = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodesPositionFunction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_function_position,&__pyx_n_s_function_tangent,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_function_position)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_function_tangent);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setNodesPositionFunction") < 0)) __PYX_ERR(0, 2374, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_function_position = values[0];
    __pyx_v_function_tangent = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodesPositionFunction", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2374, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setNodesPositionFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_28setNodesPositionFunction(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), __pyx_v_function_position, __pyx_v_function_tangent);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_28setNodesPositionFunction(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_function_position, PyObject *__pyx_v_function_tangent) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodesPositionFunction", 0);

  /* "mbd/ChRigidBody.pyx":2386
 *             along cable) and returning 3 arguments (x, y, z) tangents at coords.
 *         """
 *         self.nodes_function = function_position             # <<<<<<<<<<<<<<
 *         self.nodes_function_tangent = function_tangent
 * 
 */
  __Pyx_INCREF(__pyx_v_function_position);
  __Pyx_GIVEREF(__pyx_v_function_position);
  __Pyx_GOTREF(__pyx_v_self->nodes_function);
  __Pyx_DECREF(__pyx_v_self->nodes_function);
  __pyx_v_self->nodes_function = __pyx_v_function_position;

  /* "mbd/ChRigidBody.pyx":2387
 *         """
 *         self.nodes_function = function_position
 *         self.nodes_function_tangent = function_tangent             # <<<<<<<<<<<<<<
 * 
 *     def setFluidVelocityFunction(self, function):
 */
  __Pyx_INCREF(__pyx_v_function_tangent);
  __Pyx_GIVEREF(__pyx_v_function_tangent);
  __Pyx_GOTREF(__pyx_v_self->nodes_function_tangent);
  __Pyx_DECREF(__pyx_v_self->nodes_function_tangent);
  __pyx_v_self->nodes_function_tangent = __pyx_v_function_tangent;

  /* "mbd/ChRigidBody.pyx":2374
 *             deref(self.thisptr.cables[i]).applyBuoyancy = True
 * 
 *     def setNodesPositionFunction(self, function_position, function_tangent=None):             # <<<<<<<<<<<<<<
 *         """Function to build nodes
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2389
 *         self.nodes_function_tangent = function_tangent
 * 
 *     def setFluidVelocityFunction(self, function):             # <<<<<<<<<<<<<<
 *         """Function to build nodes
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_31setFluidVelocityFunction(PyObject *__pyx_v_self, PyObject *__pyx_v_function); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_30setFluidVelocityFunction[] = "Function to build nodes\n\n        Parameters\n        ----------\n        function:\n            Must be a function taking two arguments (3D coordinates\n            and time), and returning velocity (x, y, z).\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_31setFluidVelocityFunction(PyObject *__pyx_v_self, PyObject *__pyx_v_function) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFluidVelocityFunction (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_30setFluidVelocityFunction(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_function));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_30setFluidVelocityFunction(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_function) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFluidVelocityFunction", 0);

  /* "mbd/ChRigidBody.pyx":2398
 *             and time), and returning velocity (x, y, z).
 *         """
 *         self.fluid_velocity_function = function             # <<<<<<<<<<<<<<
 * 
 *     def fixFrontNode(self, bool fixed):
 */
  __Pyx_INCREF(__pyx_v_function);
  __Pyx_GIVEREF(__pyx_v_function);
  __Pyx_GOTREF(__pyx_v_self->fluid_velocity_function);
  __Pyx_DECREF(__pyx_v_self->fluid_velocity_function);
  __pyx_v_self->fluid_velocity_function = __pyx_v_function;

  /* "mbd/ChRigidBody.pyx":2389
 *         self.nodes_function_tangent = function_tangent
 * 
 *     def setFluidVelocityFunction(self, function):             # <<<<<<<<<<<<<<
 *         """Function to build nodes
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2400
 *         self.fluid_velocity_function = function
 * 
 *     def fixFrontNode(self, bool fixed):             # <<<<<<<<<<<<<<
 *         """Fix front node of cable
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_33fixFrontNode(PyObject *__pyx_v_self, PyObject *__pyx_arg_fixed); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_32fixFrontNode[] = "Fix front node of cable\n\n        Parameters\n        ----------\n        fixed: bool\n            Fixes node if True\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_33fixFrontNode(PyObject *__pyx_v_self, PyObject *__pyx_arg_fixed) {
  bool __pyx_v_fixed;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixFrontNode (wrapper)", 0);
  assert(__pyx_arg_fixed); {
    __pyx_v_fixed = __Pyx_PyObject_IsTrue(__pyx_arg_fixed); if (unlikely((__pyx_v_fixed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2400, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.fixFrontNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_32fixFrontNode(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((bool)__pyx_v_fixed));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_32fixFrontNode(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, bool __pyx_v_fixed) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("fixFrontNode", 0);

  /* "mbd/ChRigidBody.pyx":2408
 *             Fixes node if True
 *         """
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'             # <<<<<<<<<<<<<<
 *         if self.beam_type == "BeamEuler":
 *             deref(self.thisptr.nodesRot.front()).SetFixed(fixed)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->nodes_built == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_call_buildNodes_before_calling_t);
      __PYX_ERR(0, 2408, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":2409
 *         """
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'
 *         if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *             deref(self.thisptr.nodesRot.front()).SetFixed(fixed)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2410
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'
 *         if self.beam_type == "BeamEuler":
 *             deref(self.thisptr.nodesRot.front()).SetFixed(fixed)             # <<<<<<<<<<<<<<
 *         else:
 *             deref(self.thisptr.nodes.front()).SetFixed(fixed)
 */
    (*__pyx_v_self->thisptr->nodesRot.front()).SetFixed(__pyx_v_fixed);

    /* "mbd/ChRigidBody.pyx":2409
 *         """
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'
 *         if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *             deref(self.thisptr.nodesRot.front()).SetFixed(fixed)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2412
 *             deref(self.thisptr.nodesRot.front()).SetFixed(fixed)
 *         else:
 *             deref(self.thisptr.nodes.front()).SetFixed(fixed)             # <<<<<<<<<<<<<<
 * 
 *     def fixBackNode(self, bool fixed):
 */
  /*else*/ {
    (*__pyx_v_self->thisptr->nodes.front()).SetFixed(__pyx_v_fixed);
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2400
 *         self.fluid_velocity_function = function
 * 
 *     def fixFrontNode(self, bool fixed):             # <<<<<<<<<<<<<<
 *         """Fix front node of cable
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.fixFrontNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2414
 *             deref(self.thisptr.nodes.front()).SetFixed(fixed)
 * 
 *     def fixBackNode(self, bool fixed):             # <<<<<<<<<<<<<<
 *         """Fix back node of cable
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_35fixBackNode(PyObject *__pyx_v_self, PyObject *__pyx_arg_fixed); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_34fixBackNode[] = "Fix back node of cable\n\n        Parameters\n        ----------\n        fixed: bool\n            Fixes node if True\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_35fixBackNode(PyObject *__pyx_v_self, PyObject *__pyx_arg_fixed) {
  bool __pyx_v_fixed;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixBackNode (wrapper)", 0);
  assert(__pyx_arg_fixed); {
    __pyx_v_fixed = __Pyx_PyObject_IsTrue(__pyx_arg_fixed); if (unlikely((__pyx_v_fixed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2414, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.fixBackNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_34fixBackNode(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((bool)__pyx_v_fixed));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_34fixBackNode(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, bool __pyx_v_fixed) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("fixBackNode", 0);

  /* "mbd/ChRigidBody.pyx":2422
 *             Fixes node if True
 *         """
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'             # <<<<<<<<<<<<<<
 *         if self.beam_type == "BeamEuler":
 *             deref(self.thisptr.nodesRot.back()).SetFixed(fixed)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->nodes_built == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_call_buildNodes_before_calling_t);
      __PYX_ERR(0, 2422, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":2423
 *         """
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'
 *         if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *             deref(self.thisptr.nodesRot.back()).SetFixed(fixed)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2424
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'
 *         if self.beam_type == "BeamEuler":
 *             deref(self.thisptr.nodesRot.back()).SetFixed(fixed)             # <<<<<<<<<<<<<<
 *         else:
 *             deref(self.thisptr.nodes.back()).SetFixed(fixed)
 */
    (*__pyx_v_self->thisptr->nodesRot.back()).SetFixed(__pyx_v_fixed);

    /* "mbd/ChRigidBody.pyx":2423
 *         """
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'
 *         if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *             deref(self.thisptr.nodesRot.back()).SetFixed(fixed)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2426
 *             deref(self.thisptr.nodesRot.back()).SetFixed(fixed)
 *         else:
 *             deref(self.thisptr.nodes.back()).SetFixed(fixed)             # <<<<<<<<<<<<<<
 * 
 *     def attachBackNodeToBody(self, ProtChBody body):
 */
  /*else*/ {
    (*__pyx_v_self->thisptr->nodes.back()).SetFixed(__pyx_v_fixed);
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2414
 *             deref(self.thisptr.nodes.front()).SetFixed(fixed)
 * 
 *     def fixBackNode(self, bool fixed):             # <<<<<<<<<<<<<<
 *         """Fix back node of cable
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.fixBackNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2428
 *             deref(self.thisptr.nodes.back()).SetFixed(fixed)
 * 
 *     def attachBackNodeToBody(self, ProtChBody body):             # <<<<<<<<<<<<<<
 *         """Attaches back node to a body with ChLinkLockLock
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_37attachBackNodeToBody(PyObject *__pyx_v_self, PyObject *__pyx_v_body); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_36attachBackNodeToBody[] = "Attaches back node to a body with ChLinkLockLock\n\n        Parameters\n        ----------\n        body: ProtChBody\n            body to which the node will be attached\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_37attachBackNodeToBody(PyObject *__pyx_v_self, PyObject *__pyx_v_body) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachBackNodeToBody (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_body), __pyx_ptype_3mbd_11ChRigidBody_ProtChBody, 1, "body", 0))) __PYX_ERR(0, 2428, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_36attachBackNodeToBody(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_body));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_36attachBackNodeToBody(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachBackNodeToBody", 0);

  /* "mbd/ChRigidBody.pyx":2436
 *             body to which the node will be attached
 *         """
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'             # <<<<<<<<<<<<<<
 *         self.thisptr.attachBackNodeToBody(body.thisptr.body)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->nodes_built == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_call_buildNodes_before_calling_t);
      __PYX_ERR(0, 2436, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":2437
 *         """
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'
 *         self.thisptr.attachBackNodeToBody(body.thisptr.body)             # <<<<<<<<<<<<<<
 * 
 *     def attachFrontNodeToBody(self, ProtChBody body):
 */
  __pyx_v_self->thisptr->attachBackNodeToBody(__pyx_v_body->thisptr->body);

  /* "mbd/ChRigidBody.pyx":2428
 *             deref(self.thisptr.nodes.back()).SetFixed(fixed)
 * 
 *     def attachBackNodeToBody(self, ProtChBody body):             # <<<<<<<<<<<<<<
 *         """Attaches back node to a body with ChLinkLockLock
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.attachBackNodeToBody", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2439
 *         self.thisptr.attachBackNodeToBody(body.thisptr.body)
 * 
 *     def attachFrontNodeToBody(self, ProtChBody body):             # <<<<<<<<<<<<<<
 *         """Attaches front node to a body with ChLinkLockLock
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_39attachFrontNodeToBody(PyObject *__pyx_v_self, PyObject *__pyx_v_body); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_38attachFrontNodeToBody[] = "Attaches front node to a body with ChLinkLockLock\n\n        Parameters\n        ----------\n        body: ProtChBody\n            body to which the node will be attached\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_39attachFrontNodeToBody(PyObject *__pyx_v_self, PyObject *__pyx_v_body) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachFrontNodeToBody (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_body), __pyx_ptype_3mbd_11ChRigidBody_ProtChBody, 1, "body", 0))) __PYX_ERR(0, 2439, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_38attachFrontNodeToBody(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_v_body));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_38attachFrontNodeToBody(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachFrontNodeToBody", 0);

  /* "mbd/ChRigidBody.pyx":2447
 *             body to which the node will be attached
 *         """
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'             # <<<<<<<<<<<<<<
 *         self.thisptr.attachFrontNodeToBody(body.thisptr.body)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->nodes_built == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_call_buildNodes_before_calling_t);
      __PYX_ERR(0, 2447, __pyx_L1_error)
    }
  }
  #endif

  /* "mbd/ChRigidBody.pyx":2448
 *         """
 *         assert self.nodes_built is True, 'call buildNodes() before calling this function'
 *         self.thisptr.attachFrontNodeToBody(body.thisptr.body)             # <<<<<<<<<<<<<<
 * 
 *     def getTensionElement(self, int i=0, eta=0.):
 */
  __pyx_v_self->thisptr->attachFrontNodeToBody(__pyx_v_body->thisptr->body);

  /* "mbd/ChRigidBody.pyx":2439
 *         self.thisptr.attachBackNodeToBody(body.thisptr.body)
 * 
 *     def attachFrontNodeToBody(self, ProtChBody body):             # <<<<<<<<<<<<<<
 *         """Attaches front node to a body with ChLinkLockLock
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.attachFrontNodeToBody", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2450
 *         self.thisptr.attachFrontNodeToBody(body.thisptr.body)
 * 
 *     def getTensionElement(self, int i=0, eta=0.):             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector[double] F
 *         F = self.thisptr.getTensionElement(i, eta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_41getTensionElement(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_41getTensionElement(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_i;
  PyObject *__pyx_v_eta = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTensionElement (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i_2,&__pyx_n_s_eta,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_float_0_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i_2);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eta);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getTensionElement") < 0)) __PYX_ERR(0, 2450, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2450, __pyx_L3_error)
    } else {
      __pyx_v_i = ((int)0);
    }
    __pyx_v_eta = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getTensionElement", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2450, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getTensionElement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_40getTensionElement(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), __pyx_v_i, __pyx_v_eta);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_40getTensionElement(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, int __pyx_v_i, PyObject *__pyx_v_eta) {
  ChVector<double>  __pyx_v_F;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("getTensionElement", 0);

  /* "mbd/ChRigidBody.pyx":2452
 *     def getTensionElement(self, int i=0, eta=0.):
 *         cdef ch.ChVector[double] F
 *         F = self.thisptr.getTensionElement(i, eta)             # <<<<<<<<<<<<<<
 *         return np.array([F.x(), F.y(), F.z()])
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_eta); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L1_error)
  __pyx_v_F = ((ChVector<double> )__pyx_v_self->thisptr->getTensionElement(__pyx_v_i, __pyx_t_1));

  /* "mbd/ChRigidBody.pyx":2453
 *         cdef ch.ChVector[double] F
 *         F = self.thisptr.getTensionElement(i, eta)
 *         return np.array([F.x(), F.y(), F.z()])             # <<<<<<<<<<<<<<
 * 
 *     def getNodesTension(self, eta=0.):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_F.x()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_F.y()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_F.z()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2453, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2453, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2453, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2453, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2453, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":2450
 *         self.thisptr.attachFrontNodeToBody(body.thisptr.body)
 * 
 *     def getTensionElement(self, int i=0, eta=0.):             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector[double] F
 *         F = self.thisptr.getTensionElement(i, eta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getTensionElement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2455
 *         return np.array([F.x(), F.y(), F.z()])
 * 
 *     def getNodesTension(self, eta=0.):             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector[double] vec
 *         if self.beam_type == 'BeamEuler':
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_43getNodesTension(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_43getNodesTension(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_eta = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodesTension (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eta,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_float_0_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eta);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodesTension") < 0)) __PYX_ERR(0, 2455, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_eta = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodesTension", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2455, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getNodesTension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_42getNodesTension(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), __pyx_v_eta);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_42getNodesTension(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_eta) {
  ChVector<double>  __pyx_v_vec;
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  double __pyx_t_10;
  __Pyx_RefNannySetupContext("getNodesTension", 0);

  /* "mbd/ChRigidBody.pyx":2457
 *     def getNodesTension(self, eta=0.):
 *         cdef ch.ChVector[double] vec
 *         if self.beam_type == 'BeamEuler':             # <<<<<<<<<<<<<<
 *             T = np.zeros((self.thisptr.nodesRot.size()-1,3 ))
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2458
 *         cdef ch.ChVector[double] vec
 *         if self.beam_type == 'BeamEuler':
 *             T = np.zeros((self.thisptr.nodesRot.size()-1,3 ))             # <<<<<<<<<<<<<<
 *         else:
 *             T = np.zeros(( self.thisptr.nodes.size()-1,3 ))
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_FromSize_t((__pyx_v_self->thisptr->nodesRot.size() - 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2458, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2458, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2458, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_T = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2457
 *     def getNodesTension(self, eta=0.):
 *         cdef ch.ChVector[double] vec
 *         if self.beam_type == 'BeamEuler':             # <<<<<<<<<<<<<<
 *             T = np.zeros((self.thisptr.nodesRot.size()-1,3 ))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2460
 *             T = np.zeros((self.thisptr.nodesRot.size()-1,3 ))
 *         else:
 *             T = np.zeros(( self.thisptr.nodes.size()-1,3 ))             # <<<<<<<<<<<<<<
 *         for i in range(np.sum(self.nb_elems)):
 *             vec = self.thisptr.getTensionElement(i, eta)
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_FromSize_t((__pyx_v_self->thisptr->nodes.size() - 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
    __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2460, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2460, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2460, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_T = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2461
 *         else:
 *             T = np.zeros(( self.thisptr.nodes.size()-1,3 ))
 *         for i in range(np.sum(self.nb_elems)):             # <<<<<<<<<<<<<<
 *             vec = self.thisptr.getTensionElement(i, eta)
 *             T[i] = [vec.x(), vec.y(), vec.z()]
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_sum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self->nb_elems)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, ((PyObject *)__pyx_v_self->nb_elems)};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2461, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, ((PyObject *)__pyx_v_self->nb_elems)};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2461, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2461, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self->nb_elems));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->nb_elems));
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_self->nb_elems));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2461, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2461, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 2461, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2461, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 2461, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2461, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2461, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2462
 *             T = np.zeros(( self.thisptr.nodes.size()-1,3 ))
 *         for i in range(np.sum(self.nb_elems)):
 *             vec = self.thisptr.getTensionElement(i, eta)             # <<<<<<<<<<<<<<
 *             T[i] = [vec.x(), vec.y(), vec.z()]
 *         return T
 */
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2462, __pyx_L1_error)
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_eta); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2462, __pyx_L1_error)
    __pyx_v_vec = ((ChVector<double> )__pyx_v_self->thisptr->getTensionElement(__pyx_t_9, __pyx_t_10));

    /* "mbd/ChRigidBody.pyx":2463
 *         for i in range(np.sum(self.nb_elems)):
 *             vec = self.thisptr.getTensionElement(i, eta)
 *             T[i] = [vec.x(), vec.y(), vec.z()]             # <<<<<<<<<<<<<<
 *         return T
 * 
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_vec.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec.y()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_vec.z()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_T, __pyx_v_i, __pyx_t_4) < 0)) __PYX_ERR(0, 2463, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2461
 *         else:
 *             T = np.zeros(( self.thisptr.nodes.size()-1,3 ))
 *         for i in range(np.sum(self.nb_elems)):             # <<<<<<<<<<<<<<
 *             vec = self.thisptr.getTensionElement(i, eta)
 *             T[i] = [vec.x(), vec.y(), vec.z()]
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":2464
 *             vec = self.thisptr.getTensionElement(i, eta)
 *             T[i] = [vec.x(), vec.y(), vec.z()]
 *         return T             # <<<<<<<<<<<<<<
 * 
 *     def setDragCoefficients(self, double tangential, double normal, int segment_nb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_T);
  __pyx_r = __pyx_v_T;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":2455
 *         return np.array([F.x(), F.y(), F.z()])
 * 
 *     def getNodesTension(self, eta=0.):             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector[double] vec
 *         if self.beam_type == 'BeamEuler':
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getNodesTension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2466
 *         return T
 * 
 *     def setDragCoefficients(self, double tangential, double normal, int segment_nb):             # <<<<<<<<<<<<<<
 *         """Sets drag coefficients of cable
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_45setDragCoefficients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_44setDragCoefficients[] = "Sets drag coefficients of cable\n\n        Parameters\n        ----------\n        tangential: double\n            Tangential drag coefficient.\n        normal: double\n            Normal drag coefficient.\n        segment_nb: int\n            Segment number to which these coefficients apply.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_45setDragCoefficients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_tangential;
  double __pyx_v_normal;
  int __pyx_v_segment_nb;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDragCoefficients (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tangential,&__pyx_n_s_normal,&__pyx_n_s_segment_nb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tangential)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDragCoefficients", 1, 3, 3, 1); __PYX_ERR(0, 2466, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_segment_nb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDragCoefficients", 1, 3, 3, 2); __PYX_ERR(0, 2466, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDragCoefficients") < 0)) __PYX_ERR(0, 2466, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_tangential = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_tangential == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2466, __pyx_L3_error)
    __pyx_v_normal = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_normal == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2466, __pyx_L3_error)
    __pyx_v_segment_nb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_segment_nb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2466, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDragCoefficients", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2466, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setDragCoefficients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_44setDragCoefficients(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), __pyx_v_tangential, __pyx_v_normal, __pyx_v_segment_nb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_44setDragCoefficients(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, double __pyx_v_tangential, double __pyx_v_normal, int __pyx_v_segment_nb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDragCoefficients", 0);

  /* "mbd/ChRigidBody.pyx":2478
 *             Segment number to which these coefficients apply.
 *         """
 *         deref(self.thisptr.cables[segment_nb]).setDragCoefficients(tangential, normal)             # <<<<<<<<<<<<<<
 * 
 *     def setAddedMassCoefficients(self, double tangential, double normal, int segment_nb):
 */
  (*(__pyx_v_self->thisptr->cables[__pyx_v_segment_nb])).setDragCoefficients(__pyx_v_tangential, __pyx_v_normal);

  /* "mbd/ChRigidBody.pyx":2466
 *         return T
 * 
 *     def setDragCoefficients(self, double tangential, double normal, int segment_nb):             # <<<<<<<<<<<<<<
 *         """Sets drag coefficients of cable
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2480
 *         deref(self.thisptr.cables[segment_nb]).setDragCoefficients(tangential, normal)
 * 
 *     def setAddedMassCoefficients(self, double tangential, double normal, int segment_nb):             # <<<<<<<<<<<<<<
 *         """Sets added mass coefficients of cable
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_47setAddedMassCoefficients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_46setAddedMassCoefficients[] = "Sets added mass coefficients of cable\n\n        Parameters\n        ----------\n        tangential: double\n            Tangential added mass coefficient.\n        normal: double\n            Normal added mass coefficient.\n        segment_nb: int\n            Segment number to which these coefficients apply.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_47setAddedMassCoefficients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_tangential;
  double __pyx_v_normal;
  int __pyx_v_segment_nb;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAddedMassCoefficients (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tangential,&__pyx_n_s_normal,&__pyx_n_s_segment_nb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tangential)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normal)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAddedMassCoefficients", 1, 3, 3, 1); __PYX_ERR(0, 2480, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_segment_nb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAddedMassCoefficients", 1, 3, 3, 2); __PYX_ERR(0, 2480, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAddedMassCoefficients") < 0)) __PYX_ERR(0, 2480, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_tangential = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_tangential == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2480, __pyx_L3_error)
    __pyx_v_normal = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_normal == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2480, __pyx_L3_error)
    __pyx_v_segment_nb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_segment_nb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2480, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAddedMassCoefficients", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2480, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setAddedMassCoefficients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_46setAddedMassCoefficients(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), __pyx_v_tangential, __pyx_v_normal, __pyx_v_segment_nb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_46setAddedMassCoefficients(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, double __pyx_v_tangential, double __pyx_v_normal, int __pyx_v_segment_nb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAddedMassCoefficients", 0);

  /* "mbd/ChRigidBody.pyx":2492
 *             Segment number to which these coefficients apply.
 *         """
 *         deref(self.thisptr.cables[segment_nb]).setAddedMassCoefficients(tangential, normal)             # <<<<<<<<<<<<<<
 * 
 *     def setNodesPosition(self, double[:,:,:] positions=None, tangents=None):
 */
  (*(__pyx_v_self->thisptr->cables[__pyx_v_segment_nb])).setAddedMassCoefficients(__pyx_v_tangential, __pyx_v_normal);

  /* "mbd/ChRigidBody.pyx":2480
 *         deref(self.thisptr.cables[segment_nb]).setDragCoefficients(tangential, normal)
 * 
 *     def setAddedMassCoefficients(self, double tangential, double normal, int segment_nb):             # <<<<<<<<<<<<<<
 *         """Sets added mass coefficients of cable
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2494
 *         deref(self.thisptr.cables[segment_nb]).setAddedMassCoefficients(tangential, normal)
 * 
 *     def setNodesPosition(self, double[:,:,:] positions=None, tangents=None):             # <<<<<<<<<<<<<<
 *         """Builds the nodes of the cable.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_49setNodesPosition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_48setNodesPosition[] = "Builds the nodes of the cable.\n\n        (!) Must be called after setNodesPositionFunction()\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_49setNodesPosition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_positions = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_tangents = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodesPosition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_positions,&__pyx_n_s_tangents,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_positions);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tangents);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setNodesPosition") < 0)) __PYX_ERR(0, 2494, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_positions = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(values[0]); if (unlikely(!__pyx_v_positions.memview)) __PYX_ERR(0, 2494, __pyx_L3_error)
    } else {
      __pyx_v_positions = __pyx_k__138;
      __PYX_INC_MEMVIEW(&__pyx_v_positions, 1);
    }
    __pyx_v_tangents = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodesPosition", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2494, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setNodesPosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_48setNodesPosition(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), __pyx_v_positions, __pyx_v_tangents);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_48setNodesPosition(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, __Pyx_memviewslice __pyx_v_positions, PyObject *__pyx_v_tangents) {
  ChVector<double>  __pyx_v_vec;
  size_t __pyx_v_i;
  double __pyx_v_L0;
  double __pyx_v_L;
  PyObject *__pyx_v_nb_elems = NULL;
  PyObject *__pyx_v_nb_nodes = NULL;
  PyObject *__pyx_v_ds = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_z = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  double __pyx_t_15;
  double __pyx_t_16;
  __Pyx_memviewslice __pyx_t_17 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_18;
  __Pyx_memviewslice __pyx_t_19 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("setNodesPosition", 0);

  /* "mbd/ChRigidBody.pyx":2500
 *         """
 *         cdef ch.ChVector[double] vec
 *         if positions is None:             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs.clear()
 */
  __pyx_t_1 = ((((PyObject *) __pyx_v_positions.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2501
 *         cdef ch.ChVector[double] vec
 *         if positions is None:
 *             for i in range(self.thisptr.cables.size()):             # <<<<<<<<<<<<<<
 *                 deref(self.thisptr.cables[i]).mvecs.clear()
 *                 L0 = deref(self.thisptr.cables[i]).L0
 */
    __pyx_t_2 = __pyx_v_self->thisptr->cables.size();
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "mbd/ChRigidBody.pyx":2502
 *         if positions is None:
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs.clear()             # <<<<<<<<<<<<<<
 *                 L0 = deref(self.thisptr.cables[i]).L0
 *                 L = deref(self.thisptr.cables[i]).length
 */
      (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).mvecs.clear();

      /* "mbd/ChRigidBody.pyx":2503
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs.clear()
 *                 L0 = deref(self.thisptr.cables[i]).L0             # <<<<<<<<<<<<<<
 *                 L = deref(self.thisptr.cables[i]).length
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems
 */
      __pyx_t_4 = (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).L0;
      __pyx_v_L0 = __pyx_t_4;

      /* "mbd/ChRigidBody.pyx":2504
 *                 deref(self.thisptr.cables[i]).mvecs.clear()
 *                 L0 = deref(self.thisptr.cables[i]).L0
 *                 L = deref(self.thisptr.cables[i]).length             # <<<<<<<<<<<<<<
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems
 *                 if self.beam_type == "CableANCF" or self.beam_type == "BeamEuler":
 */
      __pyx_t_4 = (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).length;
      __pyx_v_L = __pyx_t_4;

      /* "mbd/ChRigidBody.pyx":2505
 *                 L0 = deref(self.thisptr.cables[i]).L0
 *                 L = deref(self.thisptr.cables[i]).length
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems             # <<<<<<<<<<<<<<
 *                 if self.beam_type == "CableANCF" or self.beam_type == "BeamEuler":
 *                     nb_nodes = nb_elems+1
 */
      __pyx_t_5 = __Pyx_PyInt_From_int((*(__pyx_v_self->thisptr->cables[__pyx_v_i])).nb_elems); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_nb_elems, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "mbd/ChRigidBody.pyx":2506
 *                 L = deref(self.thisptr.cables[i]).length
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems
 *                 if self.beam_type == "CableANCF" or self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *                     nb_nodes = nb_elems+1
 *                 else:
 */
      __pyx_t_6 = ((__pyx_v_self->beam_type == ((char *)"CableANCF")) != 0);
      if (!__pyx_t_6) {
      } else {
        __pyx_t_1 = __pyx_t_6;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_6 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
      __pyx_t_1 = __pyx_t_6;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_1) {

        /* "mbd/ChRigidBody.pyx":2507
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems
 *                 if self.beam_type == "CableANCF" or self.beam_type == "BeamEuler":
 *                     nb_nodes = nb_elems+1             # <<<<<<<<<<<<<<
 *                 else:
 *                     print("set element type")
 */
        __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_nb_elems, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2507, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_nb_nodes, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "mbd/ChRigidBody.pyx":2506
 *                 L = deref(self.thisptr.cables[i]).length
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems
 *                 if self.beam_type == "CableANCF" or self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *                     nb_nodes = nb_elems+1
 *                 else:
 */
        goto __pyx_L6;
      }

      /* "mbd/ChRigidBody.pyx":2509
 *                     nb_nodes = nb_elems+1
 *                 else:
 *                     print("set element type")             # <<<<<<<<<<<<<<
 *                     sys.exit()
 *                 ds = L/(nb_nodes-1)
 */
      /*else*/ {
        if (__Pyx_PrintOne(0, __pyx_kp_s_set_element_type) < 0) __PYX_ERR(0, 2509, __pyx_L1_error)

        /* "mbd/ChRigidBody.pyx":2510
 *                 else:
 *                     print("set element type")
 *                     sys.exit()             # <<<<<<<<<<<<<<
 *                 ds = L/(nb_nodes-1)
 *                 for j in range(nb_nodes):
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (__pyx_t_7) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2510, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2510, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L6:;

      /* "mbd/ChRigidBody.pyx":2511
 *                     print("set element type")
 *                     sys.exit()
 *                 ds = L/(nb_nodes-1)             # <<<<<<<<<<<<<<
 *                 for j in range(nb_nodes):
 *                     x, y, z = self.nodes_function(L0+ds*j)
 */
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_L); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2511, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(!__pyx_v_nb_nodes)) { __Pyx_RaiseUnboundLocalError("nb_nodes"); __PYX_ERR(0, 2511, __pyx_L1_error) }
      __pyx_t_8 = __Pyx_PyInt_SubtractObjC(__pyx_v_nb_nodes, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2511, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2511, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ds, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "mbd/ChRigidBody.pyx":2512
 *                     sys.exit()
 *                 ds = L/(nb_nodes-1)
 *                 for j in range(nb_nodes):             # <<<<<<<<<<<<<<
 *                     x, y, z = self.nodes_function(L0+ds*j)
 *                     vec = ch.ChVector[double](x, y, z)
 */
      if (unlikely(!__pyx_v_nb_nodes)) { __Pyx_RaiseUnboundLocalError("nb_nodes"); __PYX_ERR(0, 2512, __pyx_L1_error) }
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_nb_nodes);
      __Pyx_GIVEREF(__pyx_v_nb_nodes);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_nb_nodes);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_7 = __pyx_t_8; __Pyx_INCREF(__pyx_t_7); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2512, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2512, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2512, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2512, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2512, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2512, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_10(__pyx_t_7);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2512, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "mbd/ChRigidBody.pyx":2513
 *                 ds = L/(nb_nodes-1)
 *                 for j in range(nb_nodes):
 *                     x, y, z = self.nodes_function(L0+ds*j)             # <<<<<<<<<<<<<<
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs.push_back(vec)
 */
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_L0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2513, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = PyNumber_Multiply(__pyx_v_ds, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2513, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = PyNumber_Add(__pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2513, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_INCREF(__pyx_v_self->nodes_function);
        __pyx_t_11 = __pyx_v_self->nodes_function; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        if (!__pyx_t_5) {
          __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2513, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_12};
            __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2513, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_12};
            __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2513, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else
          #endif
          {
            __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2513, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_5); __pyx_t_5 = NULL;
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_12);
            __pyx_t_12 = 0;
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_13, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2513, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
          PyObject* sequence = __pyx_t_8;
          #if !CYTHON_COMPILING_IN_PYPY
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 2513, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_12 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_12 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_12);
          #else
          __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2513, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2513, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_12 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2513, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_5 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2513, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_14 = Py_TYPE(__pyx_t_5)->tp_iternext;
          index = 0; __pyx_t_11 = __pyx_t_14(__pyx_t_5); if (unlikely(!__pyx_t_11)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_11);
          index = 1; __pyx_t_13 = __pyx_t_14(__pyx_t_5); if (unlikely(!__pyx_t_13)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_13);
          index = 2; __pyx_t_12 = __pyx_t_14(__pyx_t_5); if (unlikely(!__pyx_t_12)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_12);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_5), 3) < 0) __PYX_ERR(0, 2513, __pyx_L1_error)
          __pyx_t_14 = NULL;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L12_unpacking_done;
          __pyx_L11_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_14 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 2513, __pyx_L1_error)
          __pyx_L12_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "mbd/ChRigidBody.pyx":2514
 *                 for j in range(nb_nodes):
 *                     x, y, z = self.nodes_function(L0+ds*j)
 *                     vec = ch.ChVector[double](x, y, z)             # <<<<<<<<<<<<<<
 *                     deref(self.thisptr.cables[i]).mvecs.push_back(vec)
 *         else:
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2514, __pyx_L1_error)
        __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2514, __pyx_L1_error)
        __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2514, __pyx_L1_error)
        __pyx_v_vec = ChVector<double> (__pyx_t_4, __pyx_t_15, __pyx_t_16);

        /* "mbd/ChRigidBody.pyx":2515
 *                     x, y, z = self.nodes_function(L0+ds*j)
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs.push_back(vec)             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(self.thisptr.cables.size()):
 */
        try {
          (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).mvecs.push_back(((ChVector<double>  &)__pyx_v_vec));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 2515, __pyx_L1_error)
        }

        /* "mbd/ChRigidBody.pyx":2512
 *                     sys.exit()
 *                 ds = L/(nb_nodes-1)
 *                 for j in range(nb_nodes):             # <<<<<<<<<<<<<<
 *                     x, y, z = self.nodes_function(L0+ds*j)
 *                     vec = ch.ChVector[double](x, y, z)
 */
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }

    /* "mbd/ChRigidBody.pyx":2500
 *         """
 *         cdef ch.ChVector[double] vec
 *         if positions is None:             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs.clear()
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2517
 *                     deref(self.thisptr.cables[i]).mvecs.push_back(vec)
 *         else:
 *             for i in range(self.thisptr.cables.size()):             # <<<<<<<<<<<<<<
 *                 deref(self.thisptr.cables[i]).mvecs.clear()
 *                 nb_nodes = len(positions[i])
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_self->thisptr->cables.size();
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "mbd/ChRigidBody.pyx":2518
 *         else:
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs.clear()             # <<<<<<<<<<<<<<
 *                 nb_nodes = len(positions[i])
 *                 for j in range(len(positions[i])):
 */
      (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).mvecs.clear();

      /* "mbd/ChRigidBody.pyx":2519
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs.clear()
 *                 nb_nodes = len(positions[i])             # <<<<<<<<<<<<<<
 *                 for j in range(len(positions[i])):
 *                     x, y, z = positions[i][j]
 */
      __pyx_t_17.data = __pyx_v_positions.data;
      __pyx_t_17.memview = __pyx_v_positions.memview;
      __PYX_INC_MEMVIEW(&__pyx_t_17, 0);
      {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_positions.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_positions.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2519, __pyx_L1_error)
    }
        __pyx_t_17.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_17.shape[0] = __pyx_v_positions.shape[1];
__pyx_t_17.strides[0] = __pyx_v_positions.strides[1];
    __pyx_t_17.suboffsets[0] = -1;

__pyx_t_17.shape[1] = __pyx_v_positions.shape[2];
__pyx_t_17.strides[1] = __pyx_v_positions.strides[2];
    __pyx_t_17.suboffsets[1] = -1;

__pyx_t_7 = __pyx_memoryview_fromslice(__pyx_t_17, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __PYX_XDEC_MEMVIEW(&__pyx_t_17, 1);
      __pyx_t_17.memview = NULL;
      __pyx_t_17.data = NULL;
      __pyx_t_9 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2519, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_nb_nodes, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "mbd/ChRigidBody.pyx":2520
 *                 deref(self.thisptr.cables[i]).mvecs.clear()
 *                 nb_nodes = len(positions[i])
 *                 for j in range(len(positions[i])):             # <<<<<<<<<<<<<<
 *                     x, y, z = positions[i][j]
 *                     vec = ch.ChVector[double](x, y, z)
 */
      __pyx_t_17.data = __pyx_v_positions.data;
      __pyx_t_17.memview = __pyx_v_positions.memview;
      __PYX_INC_MEMVIEW(&__pyx_t_17, 0);
      {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_positions.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_positions.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2520, __pyx_L1_error)
    }
        __pyx_t_17.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_17.shape[0] = __pyx_v_positions.shape[1];
__pyx_t_17.strides[0] = __pyx_v_positions.strides[1];
    __pyx_t_17.suboffsets[0] = -1;

__pyx_t_17.shape[1] = __pyx_v_positions.shape[2];
__pyx_t_17.strides[1] = __pyx_v_positions.strides[2];
    __pyx_t_17.suboffsets[1] = -1;

__pyx_t_7 = __pyx_memoryview_fromslice(__pyx_t_17, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2520, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __PYX_XDEC_MEMVIEW(&__pyx_t_17, 1);
      __pyx_t_17.memview = NULL;
      __pyx_t_17.data = NULL;
      __pyx_t_9 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2520, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2520, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2520, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2520, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_8 = __pyx_t_7; __Pyx_INCREF(__pyx_t_8); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2520, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_8))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2520, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2520, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2520, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2520, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_10(__pyx_t_8);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2520, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "mbd/ChRigidBody.pyx":2521
 *                 nb_nodes = len(positions[i])
 *                 for j in range(len(positions[i])):
 *                     x, y, z = positions[i][j]             # <<<<<<<<<<<<<<
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs.push_back(vec)
 */
        __pyx_t_17.data = __pyx_v_positions.data;
        __pyx_t_17.memview = __pyx_v_positions.memview;
        __PYX_INC_MEMVIEW(&__pyx_t_17, 0);
        {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_positions.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_positions.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2521, __pyx_L1_error)
    }
        __pyx_t_17.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_17.shape[0] = __pyx_v_positions.shape[1];
__pyx_t_17.strides[0] = __pyx_v_positions.strides[1];
    __pyx_t_17.suboffsets[0] = -1;

__pyx_t_17.shape[1] = __pyx_v_positions.shape[2];
__pyx_t_17.strides[1] = __pyx_v_positions.strides[2];
    __pyx_t_17.suboffsets[1] = -1;

__pyx_t_18 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_18 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2521, __pyx_L1_error)
        __pyx_t_19.data = __pyx_t_17.data;
        __pyx_t_19.memview = __pyx_t_17.memview;
        __PYX_INC_MEMVIEW(&__pyx_t_19, 0);
        {
    Py_ssize_t __pyx_tmp_idx = __pyx_t_18;
    Py_ssize_t __pyx_tmp_shape = __pyx_t_17.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_t_17.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2521, __pyx_L1_error)
    }
        __pyx_t_19.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_19.shape[0] = __pyx_t_17.shape[1];
__pyx_t_19.strides[0] = __pyx_t_17.strides[1];
    __pyx_t_19.suboffsets[0] = -1;

__PYX_XDEC_MEMVIEW(&__pyx_t_17, 1);
        __pyx_t_17.memview = NULL;
        __pyx_t_17.data = NULL;
        __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_t_19, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2521, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __PYX_XDEC_MEMVIEW(&__pyx_t_19, 1);
        __pyx_t_19.memview = NULL;
        __pyx_t_19.data = NULL;
        if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
          PyObject* sequence = __pyx_t_7;
          #if !CYTHON_COMPILING_IN_PYPY
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 2521, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_12 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_12 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_11);
          #else
          __pyx_t_12 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2521, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2521, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_11 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2521, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_5 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2521, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_14 = Py_TYPE(__pyx_t_5)->tp_iternext;
          index = 0; __pyx_t_12 = __pyx_t_14(__pyx_t_5); if (unlikely(!__pyx_t_12)) goto __pyx_L17_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_12);
          index = 1; __pyx_t_13 = __pyx_t_14(__pyx_t_5); if (unlikely(!__pyx_t_13)) goto __pyx_L17_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_13);
          index = 2; __pyx_t_11 = __pyx_t_14(__pyx_t_5); if (unlikely(!__pyx_t_11)) goto __pyx_L17_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_11);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_5), 3) < 0) __PYX_ERR(0, 2521, __pyx_L1_error)
          __pyx_t_14 = NULL;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L18_unpacking_done;
          __pyx_L17_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_14 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 2521, __pyx_L1_error)
          __pyx_L18_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_12);
        __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "mbd/ChRigidBody.pyx":2522
 *                 for j in range(len(positions[i])):
 *                     x, y, z = positions[i][j]
 *                     vec = ch.ChVector[double](x, y, z)             # <<<<<<<<<<<<<<
 *                     deref(self.thisptr.cables[i]).mvecs.push_back(vec)
 *         if tangents is None:
 */
        __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2522, __pyx_L1_error)
        __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2522, __pyx_L1_error)
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2522, __pyx_L1_error)
        __pyx_v_vec = ChVector<double> (__pyx_t_16, __pyx_t_15, __pyx_t_4);

        /* "mbd/ChRigidBody.pyx":2523
 *                     x, y, z = positions[i][j]
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs.push_back(vec)             # <<<<<<<<<<<<<<
 *         if tangents is None:
 *             for i in range(self.thisptr.cables.size()):
 */
        try {
          (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).mvecs.push_back(((ChVector<double>  &)__pyx_v_vec));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 2523, __pyx_L1_error)
        }

        /* "mbd/ChRigidBody.pyx":2520
 *                 deref(self.thisptr.cables[i]).mvecs.clear()
 *                 nb_nodes = len(positions[i])
 *                 for j in range(len(positions[i])):             # <<<<<<<<<<<<<<
 *                     x, y, z = positions[i][j]
 *                     vec = ch.ChVector[double](x, y, z)
 */
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2524
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs.push_back(vec)
 *         if tangents is None:             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()
 */
  __pyx_t_1 = (__pyx_v_tangents == Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "mbd/ChRigidBody.pyx":2525
 *                     deref(self.thisptr.cables[i]).mvecs.push_back(vec)
 *         if tangents is None:
 *             for i in range(self.thisptr.cables.size()):             # <<<<<<<<<<<<<<
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()
 *                 L0 = deref(self.thisptr.cables[i]).L0
 */
    __pyx_t_2 = __pyx_v_self->thisptr->cables.size();
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "mbd/ChRigidBody.pyx":2526
 *         if tangents is None:
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()             # <<<<<<<<<<<<<<
 *                 L0 = deref(self.thisptr.cables[i]).L0
 *                 L = deref(self.thisptr.cables[i]).length
 */
      (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).mvecs_tangents.clear();

      /* "mbd/ChRigidBody.pyx":2527
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()
 *                 L0 = deref(self.thisptr.cables[i]).L0             # <<<<<<<<<<<<<<
 *                 L = deref(self.thisptr.cables[i]).length
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems
 */
      __pyx_t_4 = (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).L0;
      __pyx_v_L0 = __pyx_t_4;

      /* "mbd/ChRigidBody.pyx":2528
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()
 *                 L0 = deref(self.thisptr.cables[i]).L0
 *                 L = deref(self.thisptr.cables[i]).length             # <<<<<<<<<<<<<<
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems
 *                 if self.beam_type == "CableANCF" or self.beam_type == "BeamEuler":
 */
      __pyx_t_4 = (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).length;
      __pyx_v_L = __pyx_t_4;

      /* "mbd/ChRigidBody.pyx":2529
 *                 L0 = deref(self.thisptr.cables[i]).L0
 *                 L = deref(self.thisptr.cables[i]).length
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems             # <<<<<<<<<<<<<<
 *                 if self.beam_type == "CableANCF" or self.beam_type == "BeamEuler":
 *                     nb_nodes = nb_elems+1
 */
      __pyx_t_8 = __Pyx_PyInt_From_int((*(__pyx_v_self->thisptr->cables[__pyx_v_i])).nb_elems); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2529, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_nb_elems, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "mbd/ChRigidBody.pyx":2530
 *                 L = deref(self.thisptr.cables[i]).length
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems
 *                 if self.beam_type == "CableANCF" or self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *                     nb_nodes = nb_elems+1
 *                 else:
 */
      __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"CableANCF")) != 0);
      if (!__pyx_t_1) {
      } else {
        __pyx_t_6 = __pyx_t_1;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
      __pyx_t_6 = __pyx_t_1;
      __pyx_L23_bool_binop_done:;
      if (__pyx_t_6) {

        /* "mbd/ChRigidBody.pyx":2531
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems
 *                 if self.beam_type == "CableANCF" or self.beam_type == "BeamEuler":
 *                     nb_nodes = nb_elems+1             # <<<<<<<<<<<<<<
 *                 else:
 *                     print("set element type")
 */
        __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_nb_elems, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2531, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_XDECREF_SET(__pyx_v_nb_nodes, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "mbd/ChRigidBody.pyx":2530
 *                 L = deref(self.thisptr.cables[i]).length
 *                 nb_elems = deref(self.thisptr.cables[i]).nb_elems
 *                 if self.beam_type == "CableANCF" or self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *                     nb_nodes = nb_elems+1
 *                 else:
 */
        goto __pyx_L22;
      }

      /* "mbd/ChRigidBody.pyx":2533
 *                     nb_nodes = nb_elems+1
 *                 else:
 *                     print("set element type")             # <<<<<<<<<<<<<<
 *                     sys.exit()
 *                 ds = L/(nb_nodes-1)
 */
      /*else*/ {
        if (__Pyx_PrintOne(0, __pyx_kp_s_set_element_type) < 0) __PYX_ERR(0, 2533, __pyx_L1_error)

        /* "mbd/ChRigidBody.pyx":2534
 *                 else:
 *                     print("set element type")
 *                     sys.exit()             # <<<<<<<<<<<<<<
 *                 ds = L/(nb_nodes-1)
 *                 for j in range(nb_nodes):
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2534, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2534, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        if (__pyx_t_7) {
          __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2534, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2534, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __pyx_L22:;

      /* "mbd/ChRigidBody.pyx":2535
 *                     print("set element type")
 *                     sys.exit()
 *                 ds = L/(nb_nodes-1)             # <<<<<<<<<<<<<<
 *                 for j in range(nb_nodes):
 *                     x, y, z = self.nodes_function_tangent(L0+ds*j)
 */
      __pyx_t_8 = PyFloat_FromDouble(__pyx_v_L); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(!__pyx_v_nb_nodes)) { __Pyx_RaiseUnboundLocalError("nb_nodes"); __PYX_ERR(0, 2535, __pyx_L1_error) }
      __pyx_t_11 = __Pyx_PyInt_SubtractObjC(__pyx_v_nb_nodes, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ds, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "mbd/ChRigidBody.pyx":2536
 *                     sys.exit()
 *                 ds = L/(nb_nodes-1)
 *                 for j in range(nb_nodes):             # <<<<<<<<<<<<<<
 *                     x, y, z = self.nodes_function_tangent(L0+ds*j)
 *                     vec = ch.ChVector[double](x, y, z)
 */
      if (unlikely(!__pyx_v_nb_nodes)) { __Pyx_RaiseUnboundLocalError("nb_nodes"); __PYX_ERR(0, 2536, __pyx_L1_error) }
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_nb_nodes);
      __Pyx_GIVEREF(__pyx_v_nb_nodes);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_nb_nodes);
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_7, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
        __pyx_t_7 = __pyx_t_11; __Pyx_INCREF(__pyx_t_7); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2536, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2536, __pyx_L1_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2536, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2536, __pyx_L1_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2536, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          }
        } else {
          __pyx_t_11 = __pyx_t_10(__pyx_t_7);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2536, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "mbd/ChRigidBody.pyx":2537
 *                 ds = L/(nb_nodes-1)
 *                 for j in range(nb_nodes):
 *                     x, y, z = self.nodes_function_tangent(L0+ds*j)             # <<<<<<<<<<<<<<
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs_tangents.push_back(vec)
 */
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_L0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_13 = PyNumber_Multiply(__pyx_v_ds, __pyx_v_j); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_12 = PyNumber_Add(__pyx_t_8, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_v_self->nodes_function_tangent);
        __pyx_t_13 = __pyx_v_self->nodes_function_tangent; __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        if (!__pyx_t_8) {
          __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2537, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_11);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_13)) {
            PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_12};
            __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2537, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
            PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_12};
            __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2537, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else
          #endif
          {
            __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2537, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_12);
            __pyx_t_12 = 0;
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_5, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2537, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
          PyObject* sequence = __pyx_t_11;
          #if !CYTHON_COMPILING_IN_PYPY
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 2537, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_12 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_12 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_12);
          #else
          __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2537, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2537, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_12 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2537, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_8 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2537, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext;
          index = 0; __pyx_t_13 = __pyx_t_14(__pyx_t_8); if (unlikely(!__pyx_t_13)) goto __pyx_L27_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_13);
          index = 1; __pyx_t_5 = __pyx_t_14(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L27_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_5);
          index = 2; __pyx_t_12 = __pyx_t_14(__pyx_t_8); if (unlikely(!__pyx_t_12)) goto __pyx_L27_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_12);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_8), 3) < 0) __PYX_ERR(0, 2537, __pyx_L1_error)
          __pyx_t_14 = NULL;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L28_unpacking_done;
          __pyx_L27_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_14 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 2537, __pyx_L1_error)
          __pyx_L28_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "mbd/ChRigidBody.pyx":2538
 *                 for j in range(nb_nodes):
 *                     x, y, z = self.nodes_function_tangent(L0+ds*j)
 *                     vec = ch.ChVector[double](x, y, z)             # <<<<<<<<<<<<<<
 *                     deref(self.thisptr.cables[i]).mvecs_tangents.push_back(vec)
 *         else:
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2538, __pyx_L1_error)
        __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2538, __pyx_L1_error)
        __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2538, __pyx_L1_error)
        __pyx_v_vec = ChVector<double> (__pyx_t_4, __pyx_t_15, __pyx_t_16);

        /* "mbd/ChRigidBody.pyx":2539
 *                     x, y, z = self.nodes_function_tangent(L0+ds*j)
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs_tangents.push_back(vec)             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(self.thisptr.cables.size()):
 */
        try {
          (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).mvecs_tangents.push_back(((ChVector<double>  &)__pyx_v_vec));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 2539, __pyx_L1_error)
        }

        /* "mbd/ChRigidBody.pyx":2536
 *                     sys.exit()
 *                 ds = L/(nb_nodes-1)
 *                 for j in range(nb_nodes):             # <<<<<<<<<<<<<<
 *                     x, y, z = self.nodes_function_tangent(L0+ds*j)
 *                     vec = ch.ChVector[double](x, y, z)
 */
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }

    /* "mbd/ChRigidBody.pyx":2524
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs.push_back(vec)
 *         if tangents is None:             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()
 */
    goto __pyx_L19;
  }

  /* "mbd/ChRigidBody.pyx":2541
 *                     deref(self.thisptr.cables[i]).mvecs_tangents.push_back(vec)
 *         else:
 *             for i in range(self.thisptr.cables.size()):             # <<<<<<<<<<<<<<
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()
 *                 nb_nodes = len(tangents[i])
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_self->thisptr->cables.size();
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "mbd/ChRigidBody.pyx":2542
 *         else:
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()             # <<<<<<<<<<<<<<
 *                 nb_nodes = len(tangents[i])
 *                 for j in range(len(tangents[i])):
 */
      (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).mvecs_tangents.clear();

      /* "mbd/ChRigidBody.pyx":2543
 *             for i in range(self.thisptr.cables.size()):
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()
 *                 nb_nodes = len(tangents[i])             # <<<<<<<<<<<<<<
 *                 for j in range(len(tangents[i])):
 *                     x, y, z = tangents[i][j]
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_tangents, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2543, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_nb_nodes, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "mbd/ChRigidBody.pyx":2544
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()
 *                 nb_nodes = len(tangents[i])
 *                 for j in range(len(tangents[i])):             # <<<<<<<<<<<<<<
 *                     x, y, z = tangents[i][j]
 *                     vec = ch.ChVector[double](x, y, z)
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_tangents, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2544, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_11 = __pyx_t_7; __Pyx_INCREF(__pyx_t_11); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2544, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2544, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_11))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_11)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2544, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_11, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2544, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2544, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_11, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2544, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_10(__pyx_t_11);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2544, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "mbd/ChRigidBody.pyx":2545
 *                 nb_nodes = len(tangents[i])
 *                 for j in range(len(tangents[i])):
 *                     x, y, z = tangents[i][j]             # <<<<<<<<<<<<<<
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs_tangents.push_back(vec)
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_tangents, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2545, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_12 = PyObject_GetItem(__pyx_t_7, __pyx_v_j); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2545, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_12))) || (PyList_CheckExact(__pyx_t_12))) {
          PyObject* sequence = __pyx_t_12;
          #if !CYTHON_COMPILING_IN_PYPY
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 2545, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_13 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_13 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_13);
          #else
          __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_13 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_8 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext;
          index = 0; __pyx_t_7 = __pyx_t_14(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L33_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          index = 1; __pyx_t_5 = __pyx_t_14(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L33_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_5);
          index = 2; __pyx_t_13 = __pyx_t_14(__pyx_t_8); if (unlikely(!__pyx_t_13)) goto __pyx_L33_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_13);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_8), 3) < 0) __PYX_ERR(0, 2545, __pyx_L1_error)
          __pyx_t_14 = NULL;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L34_unpacking_done;
          __pyx_L33_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_14 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 2545, __pyx_L1_error)
          __pyx_L34_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "mbd/ChRigidBody.pyx":2546
 *                 for j in range(len(tangents[i])):
 *                     x, y, z = tangents[i][j]
 *                     vec = ch.ChVector[double](x, y, z)             # <<<<<<<<<<<<<<
 *                     deref(self.thisptr.cables[i]).mvecs_tangents.push_back(vec)
 *         self.buildNodes()
 */
        __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2546, __pyx_L1_error)
        __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2546, __pyx_L1_error)
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2546, __pyx_L1_error)
        __pyx_v_vec = ChVector<double> (__pyx_t_16, __pyx_t_15, __pyx_t_4);

        /* "mbd/ChRigidBody.pyx":2547
 *                     x, y, z = tangents[i][j]
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs_tangents.push_back(vec)             # <<<<<<<<<<<<<<
 *         self.buildNodes()
 * 
 */
        try {
          (*(__pyx_v_self->thisptr->cables[__pyx_v_i])).mvecs_tangents.push_back(((ChVector<double>  &)__pyx_v_vec));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 2547, __pyx_L1_error)
        }

        /* "mbd/ChRigidBody.pyx":2544
 *                 deref(self.thisptr.cables[i]).mvecs_tangents.clear()
 *                 nb_nodes = len(tangents[i])
 *                 for j in range(len(tangents[i])):             # <<<<<<<<<<<<<<
 *                     x, y, z = tangents[i][j]
 *                     vec = ch.ChVector[double](x, y, z)
 */
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
  }
  __pyx_L19:;

  /* "mbd/ChRigidBody.pyx":2548
 *                     vec = ch.ChVector[double](x, y, z)
 *                     deref(self.thisptr.cables[i]).mvecs_tangents.push_back(vec)
 *         self.buildNodes()             # <<<<<<<<<<<<<<
 * 
 *     def buildNodes(self):
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_buildNodes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  if (__pyx_t_13) {
    __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2548, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  } else {
    __pyx_t_11 = __Pyx_PyObject_CallNoArg(__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2548, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "mbd/ChRigidBody.pyx":2494
 *         deref(self.thisptr.cables[segment_nb]).setAddedMassCoefficients(tangential, normal)
 * 
 *     def setNodesPosition(self, double[:,:,:] positions=None, tangents=None):             # <<<<<<<<<<<<<<
 *         """Builds the nodes of the cable.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __PYX_XDEC_MEMVIEW(&__pyx_t_17, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_19, 1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setNodesPosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nb_elems);
  __Pyx_XDECREF(__pyx_v_nb_nodes);
  __Pyx_XDECREF(__pyx_v_ds);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_z);
  __PYX_XDEC_MEMVIEW(&__pyx_v_positions, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2550
 *         self.buildNodes()
 * 
 *     def buildNodes(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.buildNodes()
 *         self.nodes_built = True
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_51buildNodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_51buildNodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buildNodes (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_50buildNodes(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_50buildNodes(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("buildNodes", 0);

  /* "mbd/ChRigidBody.pyx":2551
 * 
 *     def buildNodes(self):
 *         self.thisptr.buildNodes()             # <<<<<<<<<<<<<<
 *         self.nodes_built = True
 *         if self.beam_type == "BeamEuler":
 */
  __pyx_v_self->thisptr->buildNodes();

  /* "mbd/ChRigidBody.pyx":2552
 *     def buildNodes(self):
 *         self.thisptr.buildNodes()
 *         self.nodes_built = True             # <<<<<<<<<<<<<<
 *         if self.beam_type == "BeamEuler":
 *             self.nodes_nb = self.thisptr.nodesRot.size()
 */
  __pyx_v_self->nodes_built = 1;

  /* "mbd/ChRigidBody.pyx":2553
 *         self.thisptr.buildNodes()
 *         self.nodes_built = True
 *         if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *             self.nodes_nb = self.thisptr.nodesRot.size()
 *         elif self.beam_type == "CableANCF":
 */
  __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2554
 *         self.nodes_built = True
 *         if self.beam_type == "BeamEuler":
 *             self.nodes_nb = self.thisptr.nodesRot.size()             # <<<<<<<<<<<<<<
 *         elif self.beam_type == "CableANCF":
 *             self.nodes_nb = self.thisptr.nodes.size()
 */
    __pyx_v_self->nodes_nb = __pyx_v_self->thisptr->nodesRot.size();

    /* "mbd/ChRigidBody.pyx":2553
 *         self.thisptr.buildNodes()
 *         self.nodes_built = True
 *         if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *             self.nodes_nb = self.thisptr.nodesRot.size()
 *         elif self.beam_type == "CableANCF":
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2555
 *         if self.beam_type == "BeamEuler":
 *             self.nodes_nb = self.thisptr.nodesRot.size()
 *         elif self.beam_type == "CableANCF":             # <<<<<<<<<<<<<<
 *             self.nodes_nb = self.thisptr.nodes.size()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"CableANCF")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2556
 *             self.nodes_nb = self.thisptr.nodesRot.size()
 *         elif self.beam_type == "CableANCF":
 *             self.nodes_nb = self.thisptr.nodes.size()             # <<<<<<<<<<<<<<
 *         else:
 *             print("set element type")
 */
    __pyx_v_self->nodes_nb = __pyx_v_self->thisptr->nodes.size();

    /* "mbd/ChRigidBody.pyx":2555
 *         if self.beam_type == "BeamEuler":
 *             self.nodes_nb = self.thisptr.nodesRot.size()
 *         elif self.beam_type == "CableANCF":             # <<<<<<<<<<<<<<
 *             self.nodes_nb = self.thisptr.nodes.size()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2558
 *             self.nodes_nb = self.thisptr.nodes.size()
 *         else:
 *             print("set element type")             # <<<<<<<<<<<<<<
 *             sys.exit()
 * 
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_set_element_type) < 0) __PYX_ERR(0, 2558, __pyx_L1_error)

    /* "mbd/ChRigidBody.pyx":2559
 *         else:
 *             print("set element type")
 *             sys.exit()             # <<<<<<<<<<<<<<
 * 
 *     def getNodesPosition(self):
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2559, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2559, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2550
 *         self.buildNodes()
 * 
 *     def buildNodes(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.buildNodes()
 *         self.nodes_built = True
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.buildNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2561
 *             sys.exit()
 * 
 *     def getNodesPosition(self):             # <<<<<<<<<<<<<<
 *         """Gives array of nodes position
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_53getNodesPosition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_52getNodesPosition[] = "Gives array of nodes position\n\n        Returns\n        -------\n        pos: np.ndarray\n            Array of nodes position.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_53getNodesPosition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodesPosition (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_52getNodesPosition(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_52getNodesPosition(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_v_pos = NULL;
  size_t __pyx_v_i;
  ChVector<double>  __pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  __Pyx_RefNannySetupContext("getNodesPosition", 0);

  /* "mbd/ChRigidBody.pyx":2569
 *             Array of nodes position.
 *         """
 *         if self.beam_type == 'BeamEuler':             # <<<<<<<<<<<<<<
 *             pos = np.zeros(( self.thisptr.nodesRot.size(),3 ))
 *             for i in range(self.thisptr.nodesRot.size()):
 */
  __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2570
 *         """
 *         if self.beam_type == 'BeamEuler':
 *             pos = np.zeros(( self.thisptr.nodesRot.size(),3 ))             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.nodesRot.size()):
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos()
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->nodesRot.size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2570, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2570, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2570, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_pos = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2571
 *         if self.beam_type == 'BeamEuler':
 *             pos = np.zeros(( self.thisptr.nodesRot.size(),3 ))
 *             for i in range(self.thisptr.nodesRot.size()):             # <<<<<<<<<<<<<<
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 */
    __pyx_t_7 = __pyx_v_self->thisptr->nodesRot.size();
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "mbd/ChRigidBody.pyx":2572
 *             pos = np.zeros(( self.thisptr.nodesRot.size(),3 ))
 *             for i in range(self.thisptr.nodesRot.size()):
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos()             # <<<<<<<<<<<<<<
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos
 */
      __pyx_v_vec = (*(__pyx_v_self->thisptr->nodesRot[__pyx_v_i])).GetPos();

      /* "mbd/ChRigidBody.pyx":2573
 *             for i in range(self.thisptr.nodesRot.size()):
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]             # <<<<<<<<<<<<<<
 *             return pos
 *         else:
 */
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_vec.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_vec.z()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_6);
      __pyx_t_2 = 0;
      __pyx_t_4 = 0;
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_pos, __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2573, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "mbd/ChRigidBody.pyx":2574
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos             # <<<<<<<<<<<<<<
 *         else:
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pos);
    __pyx_r = __pyx_v_pos;
    goto __pyx_L0;

    /* "mbd/ChRigidBody.pyx":2569
 *             Array of nodes position.
 *         """
 *         if self.beam_type == 'BeamEuler':             # <<<<<<<<<<<<<<
 *             pos = np.zeros(( self.thisptr.nodesRot.size(),3 ))
 *             for i in range(self.thisptr.nodesRot.size()):
 */
  }

  /* "mbd/ChRigidBody.pyx":2576
 *             return pos
 *         else:
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.nodes.size()):
 *                 vec = deref(self.thisptr.nodes[i]).GetPos()
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->nodes.size()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_3);
    __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2576, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2576, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2576, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_pos = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2577
 *         else:
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))
 *             for i in range(self.thisptr.nodes.size()):             # <<<<<<<<<<<<<<
 *                 vec = deref(self.thisptr.nodes[i]).GetPos()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 */
    __pyx_t_7 = __pyx_v_self->thisptr->nodes.size();
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "mbd/ChRigidBody.pyx":2578
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))
 *             for i in range(self.thisptr.nodes.size()):
 *                 vec = deref(self.thisptr.nodes[i]).GetPos()             # <<<<<<<<<<<<<<
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos
 */
      __pyx_v_vec = (*(__pyx_v_self->thisptr->nodes[__pyx_v_i])).GetPos();

      /* "mbd/ChRigidBody.pyx":2579
 *             for i in range(self.thisptr.nodes.size()):
 *                 vec = deref(self.thisptr.nodes[i]).GetPos()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]             # <<<<<<<<<<<<<<
 *             return pos
 * 
 */
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec.x()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2579, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2579, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.z()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2579, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2579, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_pos, __pyx_v_i, __pyx_t_2, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2579, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "mbd/ChRigidBody.pyx":2580
 *                 vec = deref(self.thisptr.nodes[i]).GetPos()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos             # <<<<<<<<<<<<<<
 * 
 *     def getNodesVelocity(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pos);
    __pyx_r = __pyx_v_pos;
    goto __pyx_L0;
  }

  /* "mbd/ChRigidBody.pyx":2561
 *             sys.exit()
 * 
 *     def getNodesPosition(self):             # <<<<<<<<<<<<<<
 *         """Gives array of nodes position
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getNodesPosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2582
 *             return pos
 * 
 *     def getNodesVelocity(self):             # <<<<<<<<<<<<<<
 *         """Gives array of nodes velocity
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_55getNodesVelocity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_54getNodesVelocity[] = "Gives array of nodes velocity\n\n        Returns\n        -------\n        pos: np.ndarray\n            Array of nodes velocity.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_55getNodesVelocity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodesVelocity (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_54getNodesVelocity(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_54getNodesVelocity(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_v_pos = NULL;
  size_t __pyx_v_i;
  ChVector<double>  __pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  __Pyx_RefNannySetupContext("getNodesVelocity", 0);

  /* "mbd/ChRigidBody.pyx":2590
 *             Array of nodes velocity.
 *         """
 *         if self.beam_type == 'BeamEuler':             # <<<<<<<<<<<<<<
 *             pos = np.zeros(( self.thisptr.nodesRot.size(),3 ))
 *             for i in range(self.thisptr.nodesRot.size()):
 */
  __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2591
 *         """
 *         if self.beam_type == 'BeamEuler':
 *             pos = np.zeros(( self.thisptr.nodesRot.size(),3 ))             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.nodesRot.size()):
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos_dt()
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->nodesRot.size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2591, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2591, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2591, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2591, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2591, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_pos = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2592
 *         if self.beam_type == 'BeamEuler':
 *             pos = np.zeros(( self.thisptr.nodesRot.size(),3 ))
 *             for i in range(self.thisptr.nodesRot.size()):             # <<<<<<<<<<<<<<
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos_dt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 */
    __pyx_t_7 = __pyx_v_self->thisptr->nodesRot.size();
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "mbd/ChRigidBody.pyx":2593
 *             pos = np.zeros(( self.thisptr.nodesRot.size(),3 ))
 *             for i in range(self.thisptr.nodesRot.size()):
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos_dt()             # <<<<<<<<<<<<<<
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos
 */
      __pyx_v_vec = (*(__pyx_v_self->thisptr->nodesRot[__pyx_v_i])).GetPos_dt();

      /* "mbd/ChRigidBody.pyx":2594
 *             for i in range(self.thisptr.nodesRot.size()):
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos_dt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]             # <<<<<<<<<<<<<<
 *             return pos
 *         else:
 */
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_vec.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_vec.z()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_6);
      __pyx_t_2 = 0;
      __pyx_t_4 = 0;
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_pos, __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2594, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "mbd/ChRigidBody.pyx":2595
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos_dt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos             # <<<<<<<<<<<<<<
 *         else:
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pos);
    __pyx_r = __pyx_v_pos;
    goto __pyx_L0;

    /* "mbd/ChRigidBody.pyx":2590
 *             Array of nodes velocity.
 *         """
 *         if self.beam_type == 'BeamEuler':             # <<<<<<<<<<<<<<
 *             pos = np.zeros(( self.thisptr.nodesRot.size(),3 ))
 *             for i in range(self.thisptr.nodesRot.size()):
 */
  }

  /* "mbd/ChRigidBody.pyx":2597
 *             return pos
 *         else:
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.nodes.size()):
 *                 vec = deref(self.thisptr.nodes[i]).GetPos_dt()
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->nodes.size()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_3);
    __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2597, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2597, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2597, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2597, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2597, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_pos = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2598
 *         else:
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))
 *             for i in range(self.thisptr.nodes.size()):             # <<<<<<<<<<<<<<
 *                 vec = deref(self.thisptr.nodes[i]).GetPos_dt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 */
    __pyx_t_7 = __pyx_v_self->thisptr->nodes.size();
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "mbd/ChRigidBody.pyx":2599
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))
 *             for i in range(self.thisptr.nodes.size()):
 *                 vec = deref(self.thisptr.nodes[i]).GetPos_dt()             # <<<<<<<<<<<<<<
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos
 */
      __pyx_v_vec = (*(__pyx_v_self->thisptr->nodes[__pyx_v_i])).GetPos_dt();

      /* "mbd/ChRigidBody.pyx":2600
 *             for i in range(self.thisptr.nodes.size()):
 *                 vec = deref(self.thisptr.nodes[i]).GetPos_dt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]             # <<<<<<<<<<<<<<
 *             return pos
 * 
 */
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec.x()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.z()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_pos, __pyx_v_i, __pyx_t_2, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2600, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "mbd/ChRigidBody.pyx":2601
 *                 vec = deref(self.thisptr.nodes[i]).GetPos_dt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos             # <<<<<<<<<<<<<<
 * 
 *     def getNodesAcceleration(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pos);
    __pyx_r = __pyx_v_pos;
    goto __pyx_L0;
  }

  /* "mbd/ChRigidBody.pyx":2582
 *             return pos
 * 
 *     def getNodesVelocity(self):             # <<<<<<<<<<<<<<
 *         """Gives array of nodes velocity
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getNodesVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2603
 *             return pos
 * 
 *     def getNodesAcceleration(self):             # <<<<<<<<<<<<<<
 *         """Gives array of nodes acceleration
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_57getNodesAcceleration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_56getNodesAcceleration[] = "Gives array of nodes acceleration\n\n        Returns\n        -------\n        pos: np.ndarray\n            Array of nodes acceleration.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_57getNodesAcceleration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodesAcceleration (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_56getNodesAcceleration(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_56getNodesAcceleration(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_v_pos = NULL;
  size_t __pyx_v_i;
  ChVector<double>  __pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  __Pyx_RefNannySetupContext("getNodesAcceleration", 0);

  /* "mbd/ChRigidBody.pyx":2611
 *             Array of nodes acceleration.
 *         """
 *         if self.beam_type == 'BeamEuler':             # <<<<<<<<<<<<<<
 *             pos = np.zeros((self.nodes_nb,3 ))
 *             for i in range(self.thisptr.nodesRot.size()):
 */
  __pyx_t_1 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2612
 *         """
 *         if self.beam_type == 'BeamEuler':
 *             pos = np.zeros((self.nodes_nb,3 ))             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.nodesRot.size()):
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos_dtdt()
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->nodes_nb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2612, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2612, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2612, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2612, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2612, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_pos = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2613
 *         if self.beam_type == 'BeamEuler':
 *             pos = np.zeros((self.nodes_nb,3 ))
 *             for i in range(self.thisptr.nodesRot.size()):             # <<<<<<<<<<<<<<
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos_dtdt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 */
    __pyx_t_7 = __pyx_v_self->thisptr->nodesRot.size();
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "mbd/ChRigidBody.pyx":2614
 *             pos = np.zeros((self.nodes_nb,3 ))
 *             for i in range(self.thisptr.nodesRot.size()):
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos_dtdt()             # <<<<<<<<<<<<<<
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos
 */
      __pyx_v_vec = (*(__pyx_v_self->thisptr->nodesRot[__pyx_v_i])).GetPos_dtdt();

      /* "mbd/ChRigidBody.pyx":2615
 *             for i in range(self.thisptr.nodesRot.size()):
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos_dtdt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]             # <<<<<<<<<<<<<<
 *             return pos
 *         else:
 */
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_vec.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_vec.z()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_6);
      __pyx_t_2 = 0;
      __pyx_t_4 = 0;
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_pos, __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2615, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "mbd/ChRigidBody.pyx":2616
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos_dtdt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos             # <<<<<<<<<<<<<<
 *         else:
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pos);
    __pyx_r = __pyx_v_pos;
    goto __pyx_L0;

    /* "mbd/ChRigidBody.pyx":2611
 *             Array of nodes acceleration.
 *         """
 *         if self.beam_type == 'BeamEuler':             # <<<<<<<<<<<<<<
 *             pos = np.zeros((self.nodes_nb,3 ))
 *             for i in range(self.thisptr.nodesRot.size()):
 */
  }

  /* "mbd/ChRigidBody.pyx":2618
 *             return pos
 *         else:
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))             # <<<<<<<<<<<<<<
 *             for i in range(self.thisptr.nodes.size()):
 *                 vec = deref(self.thisptr.nodes[i]).GetPos_dtdt()
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->nodes.size()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_3);
    __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2618, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2618, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2618, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_pos = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "mbd/ChRigidBody.pyx":2619
 *         else:
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))
 *             for i in range(self.thisptr.nodes.size()):             # <<<<<<<<<<<<<<
 *                 vec = deref(self.thisptr.nodes[i]).GetPos_dtdt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 */
    __pyx_t_7 = __pyx_v_self->thisptr->nodes.size();
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "mbd/ChRigidBody.pyx":2620
 *             pos = np.zeros(( self.thisptr.nodes.size(),3 ))
 *             for i in range(self.thisptr.nodes.size()):
 *                 vec = deref(self.thisptr.nodes[i]).GetPos_dtdt()             # <<<<<<<<<<<<<<
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos
 */
      __pyx_v_vec = (*(__pyx_v_self->thisptr->nodes[__pyx_v_i])).GetPos_dtdt();

      /* "mbd/ChRigidBody.pyx":2621
 *             for i in range(self.thisptr.nodes.size()):
 *                 vec = deref(self.thisptr.nodes[i]).GetPos_dtdt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]             # <<<<<<<<<<<<<<
 *             return pos
 * 
 */
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec.x()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.z()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_pos, __pyx_v_i, __pyx_t_2, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2621, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "mbd/ChRigidBody.pyx":2622
 *                 vec = deref(self.thisptr.nodes[i]).GetPos_dtdt()
 *                 pos[i] = [vec.x(), vec.y(), vec.z()]
 *             return pos             # <<<<<<<<<<<<<<
 * 
 *     def getDragForces(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pos);
    __pyx_r = __pyx_v_pos;
    goto __pyx_L0;
  }

  /* "mbd/ChRigidBody.pyx":2603
 *             return pos
 * 
 *     def getNodesAcceleration(self):             # <<<<<<<<<<<<<<
 *         """Gives array of nodes acceleration
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getNodesAcceleration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2624
 *             return pos
 * 
 *     def getDragForces(self):             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector Fd
 *         drag = np.zeros((self.nodes_nb,3 ))
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_59getDragForces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_59getDragForces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDragForces (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_58getDragForces(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_58getDragForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  ChVector<double>  __pyx_v_Fd;
  PyObject *__pyx_v_drag = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  __Pyx_RefNannySetupContext("getDragForces", 0);

  /* "mbd/ChRigidBody.pyx":2626
 *     def getDragForces(self):
 *         cdef ch.ChVector Fd
 *         drag = np.zeros((self.nodes_nb,3 ))             # <<<<<<<<<<<<<<
 *         for i in range(self.thisptr.forces_drag.size()):
 *             Fd = self.thisptr.forces_drag[i]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->nodes_nb); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2626, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2626, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_drag = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2627
 *         cdef ch.ChVector Fd
 *         drag = np.zeros((self.nodes_nb,3 ))
 *         for i in range(self.thisptr.forces_drag.size()):             # <<<<<<<<<<<<<<
 *             Fd = self.thisptr.forces_drag[i]
 *             drag[i] = [Fd.x(), Fd.y(), Fd.z()]
 */
  __pyx_t_6 = __pyx_v_self->thisptr->forces_drag.size();
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "mbd/ChRigidBody.pyx":2628
 *         drag = np.zeros((self.nodes_nb,3 ))
 *         for i in range(self.thisptr.forces_drag.size()):
 *             Fd = self.thisptr.forces_drag[i]             # <<<<<<<<<<<<<<
 *             drag[i] = [Fd.x(), Fd.y(), Fd.z()]
 *         return drag
 */
    __pyx_v_Fd = (__pyx_v_self->thisptr->forces_drag[__pyx_v_i]);

    /* "mbd/ChRigidBody.pyx":2629
 *         for i in range(self.thisptr.forces_drag.size()):
 *             Fd = self.thisptr.forces_drag[i]
 *             drag[i] = [Fd.x(), Fd.y(), Fd.z()]             # <<<<<<<<<<<<<<
 *         return drag
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_Fd.x()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_Fd.y()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_Fd.z()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_drag, __pyx_v_i, __pyx_t_4, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2629, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "mbd/ChRigidBody.pyx":2630
 *             Fd = self.thisptr.forces_drag[i]
 *             drag[i] = [Fd.x(), Fd.y(), Fd.z()]
 *         return drag             # <<<<<<<<<<<<<<
 * 
 *     def getAddedMassForces(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_drag);
  __pyx_r = __pyx_v_drag;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":2624
 *             return pos
 * 
 *     def getDragForces(self):             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector Fd
 *         drag = np.zeros((self.nodes_nb,3 ))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getDragForces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_drag);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2632
 *         return drag
 * 
 *     def getAddedMassForces(self):             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector Fd
 *         drag = np.zeros((self.nodes_nb,3 ))
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_61getAddedMassForces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_61getAddedMassForces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAddedMassForces (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_60getAddedMassForces(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_60getAddedMassForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  ChVector<double>  __pyx_v_Fd;
  PyObject *__pyx_v_drag = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  __Pyx_RefNannySetupContext("getAddedMassForces", 0);

  /* "mbd/ChRigidBody.pyx":2634
 *     def getAddedMassForces(self):
 *         cdef ch.ChVector Fd
 *         drag = np.zeros((self.nodes_nb,3 ))             # <<<<<<<<<<<<<<
 *         for i in range(self.thisptr.forces_addedmass.size()):
 *             Fd = self.thisptr.forces_addedmass[i]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->nodes_nb); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2634, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2634, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2634, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_drag = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2635
 *         cdef ch.ChVector Fd
 *         drag = np.zeros((self.nodes_nb,3 ))
 *         for i in range(self.thisptr.forces_addedmass.size()):             # <<<<<<<<<<<<<<
 *             Fd = self.thisptr.forces_addedmass[i]
 *             drag[i] = [Fd.x(), Fd.y(), Fd.z()]
 */
  __pyx_t_6 = __pyx_v_self->thisptr->forces_addedmass.size();
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "mbd/ChRigidBody.pyx":2636
 *         drag = np.zeros((self.nodes_nb,3 ))
 *         for i in range(self.thisptr.forces_addedmass.size()):
 *             Fd = self.thisptr.forces_addedmass[i]             # <<<<<<<<<<<<<<
 *             drag[i] = [Fd.x(), Fd.y(), Fd.z()]
 *         return drag
 */
    __pyx_v_Fd = (__pyx_v_self->thisptr->forces_addedmass[__pyx_v_i]);

    /* "mbd/ChRigidBody.pyx":2637
 *         for i in range(self.thisptr.forces_addedmass.size()):
 *             Fd = self.thisptr.forces_addedmass[i]
 *             drag[i] = [Fd.x(), Fd.y(), Fd.z()]             # <<<<<<<<<<<<<<
 *         return drag
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_Fd.x()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_Fd.y()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_Fd.z()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_drag, __pyx_v_i, __pyx_t_4, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2637, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "mbd/ChRigidBody.pyx":2638
 *             Fd = self.thisptr.forces_addedmass[i]
 *             drag[i] = [Fd.x(), Fd.y(), Fd.z()]
 *         return drag             # <<<<<<<<<<<<<<
 * 
 *     def setIyy(self, double Iyy, int cable_nb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_drag);
  __pyx_r = __pyx_v_drag;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":2632
 *         return drag
 * 
 *     def getAddedMassForces(self):             # <<<<<<<<<<<<<<
 *         cdef ch.ChVector Fd
 *         drag = np.zeros((self.nodes_nb,3 ))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getAddedMassForces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_drag);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2640
 *         return drag
 * 
 *     def setIyy(self, double Iyy, int cable_nb):             # <<<<<<<<<<<<<<
 *         deref(self.thisptr.cables[cable_nb]).setIyy(Iyy)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_63setIyy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_63setIyy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Iyy;
  int __pyx_v_cable_nb;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setIyy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Iyy,&__pyx_n_s_cable_nb,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Iyy)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cable_nb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setIyy", 1, 2, 2, 1); __PYX_ERR(0, 2640, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setIyy") < 0)) __PYX_ERR(0, 2640, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_Iyy = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Iyy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2640, __pyx_L3_error)
    __pyx_v_cable_nb = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_cable_nb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2640, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setIyy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2640, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setIyy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_62setIyy(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), __pyx_v_Iyy, __pyx_v_cable_nb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_62setIyy(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, double __pyx_v_Iyy, int __pyx_v_cable_nb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setIyy", 0);

  /* "mbd/ChRigidBody.pyx":2641
 * 
 *     def setIyy(self, double Iyy, int cable_nb):
 *         deref(self.thisptr.cables[cable_nb]).setIyy(Iyy)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (*(__pyx_v_self->thisptr->cables[__pyx_v_cable_nb])).setIyy(__pyx_v_Iyy);

  /* "mbd/ChRigidBody.pyx":2640
 *         return drag
 * 
 *     def setIyy(self, double Iyy, int cable_nb):             # <<<<<<<<<<<<<<
 *         deref(self.thisptr.cables[cable_nb]).setIyy(Iyy)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2644
 * 
 * 
 *     def getNodesD(self):             # <<<<<<<<<<<<<<
 *         """Gives direction of nodes
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_65getNodesD(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_64getNodesD[] = "Gives direction of nodes\n\n        Returns\n        -------\n        dire: np.ndarray\n            Array of nodes direction.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_65getNodesD(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodesD (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_64getNodesD(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_64getNodesD(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_v_dire = NULL;
  size_t __pyx_v_i;
  ChVector<double>  __pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  __Pyx_RefNannySetupContext("getNodesD", 0);

  /* "mbd/ChRigidBody.pyx":2652
 *             Array of nodes direction.
 *         """
 *         dire = np.zeros(( self.thisptr.nodes.size(),3 ))             # <<<<<<<<<<<<<<
 *         for i in range(self.thisptr.nodes.size()):
 *             vec = deref(self.thisptr.nodes[i]).GetD()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->nodes.size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2652, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2652, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2652, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dire = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2653
 *         """
 *         dire = np.zeros(( self.thisptr.nodes.size(),3 ))
 *         for i in range(self.thisptr.nodes.size()):             # <<<<<<<<<<<<<<
 *             vec = deref(self.thisptr.nodes[i]).GetD()
 *             dire[i] = [vec.x(), vec.y(), vec.z()]
 */
  __pyx_t_6 = __pyx_v_self->thisptr->nodes.size();
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "mbd/ChRigidBody.pyx":2654
 *         dire = np.zeros(( self.thisptr.nodes.size(),3 ))
 *         for i in range(self.thisptr.nodes.size()):
 *             vec = deref(self.thisptr.nodes[i]).GetD()             # <<<<<<<<<<<<<<
 *             dire[i] = [vec.x(), vec.y(), vec.z()]
 *         return dire
 */
    __pyx_v_vec = (*(__pyx_v_self->thisptr->nodes[__pyx_v_i])).GetD();

    /* "mbd/ChRigidBody.pyx":2655
 *         for i in range(self.thisptr.nodes.size()):
 *             vec = deref(self.thisptr.nodes[i]).GetD()
 *             dire[i] = [vec.x(), vec.y(), vec.z()]             # <<<<<<<<<<<<<<
 *         return dire
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_vec.x()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.y()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec.z()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_dire, __pyx_v_i, __pyx_t_4, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2655, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "mbd/ChRigidBody.pyx":2656
 *             vec = deref(self.thisptr.nodes[i]).GetD()
 *             dire[i] = [vec.x(), vec.y(), vec.z()]
 *         return dire             # <<<<<<<<<<<<<<
 * 
 *     def setContactMaterial(self, pych.ChMaterialSurfaceSMC mat):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dire);
  __pyx_r = __pyx_v_dire;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":2644
 * 
 * 
 *     def getNodesD(self):             # <<<<<<<<<<<<<<
 *         """Gives direction of nodes
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.getNodesD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dire);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2658
 *         return dire
 * 
 *     def setContactMaterial(self, pych.ChMaterialSurfaceSMC mat):             # <<<<<<<<<<<<<<
 *         """Sets contact material of the cable
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_67setContactMaterial(PyObject *__pyx_v_self, PyObject *__pyx_v_mat); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_66setContactMaterial[] = "Sets contact material of the cable\n\n        Parameters\n        ----------\n        mat: ChMaterialSurfaceSMC\n            Material of cable.\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_67setContactMaterial(PyObject *__pyx_v_self, PyObject *__pyx_v_mat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setContactMaterial (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mat), __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC, 1, "mat", 0))) __PYX_ERR(0, 2658, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_66setContactMaterial(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *)__pyx_v_mat));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_66setContactMaterial(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC *__pyx_v_mat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setContactMaterial", 0);

  /* "mbd/ChRigidBody.pyx":2666
 *             Material of cable.
 *         """
 *         self.thisptr.setContactMaterial(mat.sharedptr)             # <<<<<<<<<<<<<<
 * 
 *     def setExternalForces(self, fluid_velocity_array=None, fluid_density_array=None,
 */
  __pyx_v_self->thisptr->setContactMaterial(((std::shared_ptr<ChMaterialSurfaceSMC> )__pyx_v_mat->sharedptr));

  /* "mbd/ChRigidBody.pyx":2658
 *         return dire
 * 
 *     def setContactMaterial(self, pych.ChMaterialSurfaceSMC mat):             # <<<<<<<<<<<<<<
 *         """Sets contact material of the cable
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2668
 *         self.thisptr.setContactMaterial(mat.sharedptr)
 * 
 *     def setExternalForces(self, fluid_velocity_array=None, fluid_density_array=None,             # <<<<<<<<<<<<<<
 *                           fluid_acceleration_array=None):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_69setExternalForces(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_68setExternalForces[] = "\n        Sets external forces acting on cables\n        Pass fluid velocity_array as argument only for debugging (must be an array as long as the number of nodes)\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_69setExternalForces(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fluid_velocity_array = 0;
  PyObject *__pyx_v_fluid_density_array = 0;
  PyObject *__pyx_v_fluid_acceleration_array = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setExternalForces (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fluid_velocity_array,&__pyx_n_s_fluid_density_array,&__pyx_n_s_fluid_acceleration_array,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);

    /* "mbd/ChRigidBody.pyx":2669
 * 
 *     def setExternalForces(self, fluid_velocity_array=None, fluid_density_array=None,
 *                           fluid_acceleration_array=None):             # <<<<<<<<<<<<<<
 *         """
 *         Sets external forces acting on cables
 */
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fluid_velocity_array);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fluid_density_array);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fluid_acceleration_array);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setExternalForces") < 0)) __PYX_ERR(0, 2668, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fluid_velocity_array = values[0];
    __pyx_v_fluid_density_array = values[1];
    __pyx_v_fluid_acceleration_array = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setExternalForces", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2668, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setExternalForces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_68setExternalForces(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), __pyx_v_fluid_velocity_array, __pyx_v_fluid_density_array, __pyx_v_fluid_acceleration_array);

  /* "mbd/ChRigidBody.pyx":2668
 *         self.thisptr.setContactMaterial(mat.sharedptr)
 * 
 *     def setExternalForces(self, fluid_velocity_array=None, fluid_density_array=None,             # <<<<<<<<<<<<<<
 *                           fluid_acceleration_array=None):
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_68setExternalForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_fluid_velocity_array, PyObject *__pyx_v_fluid_density_array, PyObject *__pyx_v_fluid_acceleration_array) {
  std::vector<ChVector<double> >  __pyx_v_fluid_velocity;
  std::vector<ChVector<double> >  __pyx_v_fluid_acceleration;
  ChVector<double>  __pyx_v_vel;
  ChVector<double>  __pyx_v_acc;
  std::vector<double>  __pyx_v_fluid_density;
  double __pyx_v_dens;
  PyObject *__pyx_v_comm = NULL;
  size_t __pyx_v_nb_nodes;
  bool __pyx_v_mesh_search;
  bool __pyx_v_dist_search;
  size_t __pyx_v_i;
  ChVector<double>  __pyx_v_vec;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_z = NULL;
  PyObject *__pyx_v_coords = NULL;
  PyObject *__pyx_v_vel_arr = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_vel_grad_arr = NULL;
  PyObject *__pyx_v_xi = NULL;
  PyObject *__pyx_v_nearest_node = NULL;
  PyObject *__pyx_v_el = NULL;
  PyObject *__pyx_v_rank = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  size_t __pyx_t_17;
  int __pyx_t_18;
  size_t __pyx_t_19;
  size_t __pyx_t_20;
  double __pyx_t_21;
  double __pyx_t_22;
  double __pyx_t_23;
  __Pyx_RefNannySetupContext("setExternalForces", 0);

  /* "mbd/ChRigidBody.pyx":2676
 *         # get velocity at nodes
 *         # cdef np.ndarray fluid_velocity = np.zeros((len(self.thisptr.nodes.size()), 3))
 *         self.fluid_velocity_array_previous[:] = self.fluid_velocity_array             # <<<<<<<<<<<<<<
 *         if fluid_velocity_array is not None:
 *             self.fluid_velocity_array = fluid_velocity_array
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->fluid_velocity_array);
  __Pyx_INCREF(__pyx_t_1);
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->fluid_velocity_array_previous), __pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice__139, 0, 0, 1) < 0) __PYX_ERR(0, 2676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2677
 *         # cdef np.ndarray fluid_velocity = np.zeros((len(self.thisptr.nodes.size()), 3))
 *         self.fluid_velocity_array_previous[:] = self.fluid_velocity_array
 *         if fluid_velocity_array is not None:             # <<<<<<<<<<<<<<
 *             self.fluid_velocity_array = fluid_velocity_array
 *         if fluid_density_array is not None:
 */
  __pyx_t_2 = (__pyx_v_fluid_velocity_array != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "mbd/ChRigidBody.pyx":2678
 *         self.fluid_velocity_array_previous[:] = self.fluid_velocity_array
 *         if fluid_velocity_array is not None:
 *             self.fluid_velocity_array = fluid_velocity_array             # <<<<<<<<<<<<<<
 *         if fluid_density_array is not None:
 *             self.fluid_density_array = fluid_density_array
 */
    if (!(likely(((__pyx_v_fluid_velocity_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_fluid_velocity_array, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2678, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_fluid_velocity_array;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->fluid_velocity_array);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_velocity_array));
    __pyx_v_self->fluid_velocity_array = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":2677
 *         # cdef np.ndarray fluid_velocity = np.zeros((len(self.thisptr.nodes.size()), 3))
 *         self.fluid_velocity_array_previous[:] = self.fluid_velocity_array
 *         if fluid_velocity_array is not None:             # <<<<<<<<<<<<<<
 *             self.fluid_velocity_array = fluid_velocity_array
 *         if fluid_density_array is not None:
 */
  }

  /* "mbd/ChRigidBody.pyx":2679
 *         if fluid_velocity_array is not None:
 *             self.fluid_velocity_array = fluid_velocity_array
 *         if fluid_density_array is not None:             # <<<<<<<<<<<<<<
 *             self.fluid_density_array = fluid_density_array
 *         if fluid_acceleration_array is not None:
 */
  __pyx_t_3 = (__pyx_v_fluid_density_array != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "mbd/ChRigidBody.pyx":2680
 *             self.fluid_velocity_array = fluid_velocity_array
 *         if fluid_density_array is not None:
 *             self.fluid_density_array = fluid_density_array             # <<<<<<<<<<<<<<
 *         if fluid_acceleration_array is not None:
 *             self.fluid_acceleration_array = fluid_acceleration_array
 */
    if (!(likely(((__pyx_v_fluid_density_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_fluid_density_array, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2680, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_fluid_density_array;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->fluid_density_array);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_density_array));
    __pyx_v_self->fluid_density_array = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":2679
 *         if fluid_velocity_array is not None:
 *             self.fluid_velocity_array = fluid_velocity_array
 *         if fluid_density_array is not None:             # <<<<<<<<<<<<<<
 *             self.fluid_density_array = fluid_density_array
 *         if fluid_acceleration_array is not None:
 */
  }

  /* "mbd/ChRigidBody.pyx":2681
 *         if fluid_density_array is not None:
 *             self.fluid_density_array = fluid_density_array
 *         if fluid_acceleration_array is not None:             # <<<<<<<<<<<<<<
 *             self.fluid_acceleration_array = fluid_acceleration_array
 *         cdef vector[ch.ChVector[double]] fluid_velocity
 */
  __pyx_t_2 = (__pyx_v_fluid_acceleration_array != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "mbd/ChRigidBody.pyx":2682
 *             self.fluid_density_array = fluid_density_array
 *         if fluid_acceleration_array is not None:
 *             self.fluid_acceleration_array = fluid_acceleration_array             # <<<<<<<<<<<<<<
 *         cdef vector[ch.ChVector[double]] fluid_velocity
 *         cdef vector[ch.ChVector[double]] fluid_acceleration
 */
    if (!(likely(((__pyx_v_fluid_acceleration_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_fluid_acceleration_array, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2682, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_fluid_acceleration_array;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->fluid_acceleration_array);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_acceleration_array));
    __pyx_v_self->fluid_acceleration_array = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":2681
 *         if fluid_density_array is not None:
 *             self.fluid_density_array = fluid_density_array
 *         if fluid_acceleration_array is not None:             # <<<<<<<<<<<<<<
 *             self.fluid_acceleration_array = fluid_acceleration_array
 *         cdef vector[ch.ChVector[double]] fluid_velocity
 */
  }

  /* "mbd/ChRigidBody.pyx":2689
 *         cdef vector[double] fluid_density
 *         cdef double dens
 *         comm = Comm.get().comm.tompi4py()             # <<<<<<<<<<<<<<
 *         if self.beam_type == "BeamEuler":
 *             nb_nodes = self.thisptr.nodesRot.size()
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_Comm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2689, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_comm); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tompi4py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2689, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_comm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2690
 *         cdef double dens
 *         comm = Comm.get().comm.tompi4py()
 *         if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *             nb_nodes = self.thisptr.nodesRot.size()
 *         else:
 */
  __pyx_t_3 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
  if (__pyx_t_3) {

    /* "mbd/ChRigidBody.pyx":2691
 *         comm = Comm.get().comm.tompi4py()
 *         if self.beam_type == "BeamEuler":
 *             nb_nodes = self.thisptr.nodesRot.size()             # <<<<<<<<<<<<<<
 *         else:
 *             nb_nodes = self.thisptr.nodes.size()
 */
    __pyx_v_nb_nodes = __pyx_v_self->thisptr->nodesRot.size();

    /* "mbd/ChRigidBody.pyx":2690
 *         cdef double dens
 *         comm = Comm.get().comm.tompi4py()
 *         if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *             nb_nodes = self.thisptr.nodesRot.size()
 *         else:
 */
    goto __pyx_L6;
  }

  /* "mbd/ChRigidBody.pyx":2693
 *             nb_nodes = self.thisptr.nodesRot.size()
 *         else:
 *             nb_nodes = self.thisptr.nodes.size()             # <<<<<<<<<<<<<<
 *         cdef bool mesh_search = False
 *         cdef bool dist_search = False
 */
  /*else*/ {
    __pyx_v_nb_nodes = __pyx_v_self->thisptr->nodes.size();
  }
  __pyx_L6:;

  /* "mbd/ChRigidBody.pyx":2694
 *         else:
 *             nb_nodes = self.thisptr.nodes.size()
 *         cdef bool mesh_search = False             # <<<<<<<<<<<<<<
 *         cdef bool dist_search = False
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:
 */
  __pyx_v_mesh_search = 0;

  /* "mbd/ChRigidBody.pyx":2695
 *             nb_nodes = self.thisptr.nodes.size()
 *         cdef bool mesh_search = False
 *         cdef bool dist_search = False             # <<<<<<<<<<<<<<
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:
 *             mesh_search = True
 */
  __pyx_v_dist_search = 0;

  /* "mbd/ChRigidBody.pyx":2696
 *         cdef bool mesh_search = False
 *         cdef bool dist_search = False
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:             # <<<<<<<<<<<<<<
 *             mesh_search = True
 *             if self.ProtChSystem.dist_search is True and self.ProtChSystem.first_step is False:
 */
  __pyx_t_2 = (__pyx_v_self->ProtChSystem->model != Py_None);
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_3 = __pyx_t_7;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_self->external_forces_from_ns == 1) != 0);
  __pyx_t_3 = __pyx_t_7;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_3) {

    /* "mbd/ChRigidBody.pyx":2697
 *         cdef bool dist_search = False
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:
 *             mesh_search = True             # <<<<<<<<<<<<<<
 *             if self.ProtChSystem.dist_search is True and self.ProtChSystem.first_step is False:
 *                 Profiling.logEvent("Starting distance search for cable nodes")
 */
    __pyx_v_mesh_search = 1;

    /* "mbd/ChRigidBody.pyx":2698
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:
 *             mesh_search = True
 *             if self.ProtChSystem.dist_search is True and self.ProtChSystem.first_step is False:             # <<<<<<<<<<<<<<
 *                 Profiling.logEvent("Starting distance search for cable nodes")
 *                 dist_search = True
 */
    __pyx_t_7 = ((__pyx_v_self->ProtChSystem->dist_search == 1) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_3 = __pyx_t_7;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_self->ProtChSystem->first_step == 0) != 0);
    __pyx_t_3 = __pyx_t_7;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_3) {

      /* "mbd/ChRigidBody.pyx":2699
 *             mesh_search = True
 *             if self.ProtChSystem.dist_search is True and self.ProtChSystem.first_step is False:
 *                 Profiling.logEvent("Starting distance search for cable nodes")             # <<<<<<<<<<<<<<
 *                 dist_search = True
 *             else:
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__140, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":2700
 *             if self.ProtChSystem.dist_search is True and self.ProtChSystem.first_step is False:
 *                 Profiling.logEvent("Starting distance search for cable nodes")
 *                 dist_search = True             # <<<<<<<<<<<<<<
 *             else:
 *                 Profiling.logEvent("Starting k-d tree search for cable nodes")
 */
      __pyx_v_dist_search = 1;

      /* "mbd/ChRigidBody.pyx":2698
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:
 *             mesh_search = True
 *             if self.ProtChSystem.dist_search is True and self.ProtChSystem.first_step is False:             # <<<<<<<<<<<<<<
 *                 Profiling.logEvent("Starting distance search for cable nodes")
 *                 dist_search = True
 */
      goto __pyx_L10;
    }

    /* "mbd/ChRigidBody.pyx":2702
 *                 dist_search = True
 *             else:
 *                 Profiling.logEvent("Starting k-d tree search for cable nodes")             # <<<<<<<<<<<<<<
 *         for i in range(nb_nodes):
 *             if self.beam_type == "BeamEuler":
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2702, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2702, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__141, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2702, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L10:;

    /* "mbd/ChRigidBody.pyx":2696
 *         cdef bool mesh_search = False
 *         cdef bool dist_search = False
 *         if self.ProtChSystem.model is not None and self.external_forces_from_ns is True:             # <<<<<<<<<<<<<<
 *             mesh_search = True
 *             if self.ProtChSystem.dist_search is True and self.ProtChSystem.first_step is False:
 */
  }

  /* "mbd/ChRigidBody.pyx":2703
 *             else:
 *                 Profiling.logEvent("Starting k-d tree search for cable nodes")
 *         for i in range(nb_nodes):             # <<<<<<<<<<<<<<
 *             if self.beam_type == "BeamEuler":
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos()
 */
  __pyx_t_8 = __pyx_v_nb_nodes;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "mbd/ChRigidBody.pyx":2704
 *                 Profiling.logEvent("Starting k-d tree search for cable nodes")
 *         for i in range(nb_nodes):
 *             if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos()
 *             else:
 */
    __pyx_t_3 = ((__pyx_v_self->beam_type == ((char *)"BeamEuler")) != 0);
    if (__pyx_t_3) {

      /* "mbd/ChRigidBody.pyx":2705
 *         for i in range(nb_nodes):
 *             if self.beam_type == "BeamEuler":
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos()             # <<<<<<<<<<<<<<
 *             else:
 *                 vec = deref(self.thisptr.nodes[i]).GetPos()
 */
      __pyx_v_vec = (*(__pyx_v_self->thisptr->nodesRot[__pyx_v_i])).GetPos();

      /* "mbd/ChRigidBody.pyx":2704
 *                 Profiling.logEvent("Starting k-d tree search for cable nodes")
 *         for i in range(nb_nodes):
 *             if self.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos()
 *             else:
 */
      goto __pyx_L15;
    }

    /* "mbd/ChRigidBody.pyx":2707
 *                 vec = deref(self.thisptr.nodesRot[i]).GetPos()
 *             else:
 *                 vec = deref(self.thisptr.nodes[i]).GetPos()             # <<<<<<<<<<<<<<
 *             x = vec.x()
 *             y = vec.y()
 */
    /*else*/ {
      __pyx_v_vec = (*(__pyx_v_self->thisptr->nodes[__pyx_v_i])).GetPos();
    }
    __pyx_L15:;

    /* "mbd/ChRigidBody.pyx":2708
 *             else:
 *                 vec = deref(self.thisptr.nodes[i]).GetPos()
 *             x = vec.x()             # <<<<<<<<<<<<<<
 *             y = vec.y()
 *             z = vec.z()
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_vec.x()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":2709
 *                 vec = deref(self.thisptr.nodes[i]).GetPos()
 *             x = vec.x()
 *             y = vec.y()             # <<<<<<<<<<<<<<
 *             z = vec.z()
 *             if self.ProtChSystem.parallel_mode is True:
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_vec.y()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":2710
 *             x = vec.x()
 *             y = vec.y()
 *             z = vec.z()             # <<<<<<<<<<<<<<
 *             if self.ProtChSystem.parallel_mode is True:
 *                 x = comm.bcast(x, self.ProtChSystem.chrono_processor)
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_vec.z()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":2711
 *             y = vec.y()
 *             z = vec.z()
 *             if self.ProtChSystem.parallel_mode is True:             # <<<<<<<<<<<<<<
 *                 x = comm.bcast(x, self.ProtChSystem.chrono_processor)
 *                 y = comm.bcast(y, self.ProtChSystem.chrono_processor)
 */
    __pyx_t_3 = ((__pyx_v_self->ProtChSystem->parallel_mode == 1) != 0);
    if (__pyx_t_3) {

      /* "mbd/ChRigidBody.pyx":2712
 *             z = vec.z()
 *             if self.ProtChSystem.parallel_mode is True:
 *                 x = comm.bcast(x, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *                 y = comm.bcast(y, self.ProtChSystem.chrono_processor)
 *                 z = comm.bcast(z, self.ProtChSystem.chrono_processor)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2712, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2712, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_x, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2712, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_x, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2712, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_v_x);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_x, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":2713
 *             if self.ProtChSystem.parallel_mode is True:
 *                 x = comm.bcast(x, self.ProtChSystem.chrono_processor)
 *                 y = comm.bcast(y, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *                 z = comm.bcast(z, self.ProtChSystem.chrono_processor)
 *             coords = np.array([x, y, z])
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2713, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2713, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_6 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_y, __pyx_t_11};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2713, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_y, __pyx_t_11};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2713, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2713, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_v_y);
        __Pyx_GIVEREF(__pyx_v_y);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_10, __pyx_v_y);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_10, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2713, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_y, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":2714
 *                 x = comm.bcast(x, self.ProtChSystem.chrono_processor)
 *                 y = comm.bcast(y, self.ProtChSystem.chrono_processor)
 *                 z = comm.bcast(z, self.ProtChSystem.chrono_processor)             # <<<<<<<<<<<<<<
 *             coords = np.array([x, y, z])
 *             vel_arr = np.zeros(3)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_bcast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->ProtChSystem->chrono_processor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_z, __pyx_t_5};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2714, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_z, __pyx_t_5};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2714, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2714, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_11) {
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_11); __pyx_t_11 = NULL;
        }
        __Pyx_INCREF(__pyx_v_z);
        __Pyx_GIVEREF(__pyx_v_z);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_10, __pyx_v_z);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_10, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2714, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_z, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":2711
 *             y = vec.y()
 *             z = vec.z()
 *             if self.ProtChSystem.parallel_mode is True:             # <<<<<<<<<<<<<<
 *                 x = comm.bcast(x, self.ProtChSystem.chrono_processor)
 *                 y = comm.bcast(y, self.ProtChSystem.chrono_processor)
 */
    }

    /* "mbd/ChRigidBody.pyx":2715
 *                 y = comm.bcast(y, self.ProtChSystem.chrono_processor)
 *                 z = comm.bcast(z, self.ProtChSystem.chrono_processor)
 *             coords = np.array([x, y, z])             # <<<<<<<<<<<<<<
 *             vel_arr = np.zeros(3)
 *             if mesh_search is True:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_v_y);
    __Pyx_INCREF(__pyx_v_z);
    __Pyx_GIVEREF(__pyx_v_z);
    PyList_SET_ITEM(__pyx_t_4, 2, __pyx_v_z);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2715, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2715, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2715, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2715, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2715, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_coords, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":2716
 *                 z = comm.bcast(z, self.ProtChSystem.chrono_processor)
 *             coords = np.array([x, y, z])
 *             vel_arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *             if mesh_search is True:
 *                 vel_grad_arr = np.zeros(3)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__142, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vel_arr, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "mbd/ChRigidBody.pyx":2717
 *             coords = np.array([x, y, z])
 *             vel_arr = np.zeros(3)
 *             if mesh_search is True:             # <<<<<<<<<<<<<<
 *                 vel_grad_arr = np.zeros(3)
 *                 if dist_search is True:
 */
    __pyx_t_3 = ((__pyx_v_mesh_search == 1) != 0);
    if (__pyx_t_3) {

      /* "mbd/ChRigidBody.pyx":2718
 *             vel_arr = np.zeros(3)
 *             if mesh_search is True:
 *                 vel_grad_arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *                 if dist_search is True:
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsDist(coords=coords[:self.nd],
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2718, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2718, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__143, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2718, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_vel_grad_arr, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "mbd/ChRigidBody.pyx":2719
 *             if mesh_search is True:
 *                 vel_grad_arr = np.zeros(3)
 *                 if dist_search is True:             # <<<<<<<<<<<<<<
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsDist(coords=coords[:self.nd],
 *                                                                                                    node_guess=self.nearest_node_array[i],
 */
      __pyx_t_3 = ((__pyx_v_dist_search == 1) != 0);
      if (__pyx_t_3) {

        /* "mbd/ChRigidBody.pyx":2720
 *                 vel_grad_arr = np.zeros(3)
 *                 if dist_search is True:
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsDist(coords=coords[:self.nd],             # <<<<<<<<<<<<<<
 *                                                                                                    node_guess=self.nearest_node_array[i],
 *                                                                                                    eN_guess=self.containing_element_array[i],
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->ProtChSystem), __pyx_n_s_findElementContainingCoordsDist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2720, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2720, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_v_coords, 0, __pyx_v_self->nd, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2720, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_coords, __pyx_t_11) < 0) __PYX_ERR(0, 2720, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "mbd/ChRigidBody.pyx":2721
 *                 if dist_search is True:
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsDist(coords=coords[:self.nd],
 *                                                                                                    node_guess=self.nearest_node_array[i],             # <<<<<<<<<<<<<<
 *                                                                                                    eN_guess=self.containing_element_array[i],
 *                                                                                                    rank_guess=self.owning_rank[i])
 */
        if (unlikely(!__pyx_v_self->nearest_node_array.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2721, __pyx_L1_error)}
        __pyx_t_12 = __pyx_v_i;
        __pyx_t_10 = -1;
        if (unlikely(__pyx_t_12 >= (size_t)__pyx_v_self->nearest_node_array.shape[0])) __pyx_t_10 = 0;
        if (unlikely(__pyx_t_10 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_10);
          __PYX_ERR(0, 2721, __pyx_L1_error)
        }
        __pyx_t_11 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_self->nearest_node_array.data + __pyx_t_12 * __pyx_v_self->nearest_node_array.strides[0]) )))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_node_guess, __pyx_t_11) < 0) __PYX_ERR(0, 2720, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "mbd/ChRigidBody.pyx":2722
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsDist(coords=coords[:self.nd],
 *                                                                                                    node_guess=self.nearest_node_array[i],
 *                                                                                                    eN_guess=self.containing_element_array[i],             # <<<<<<<<<<<<<<
 *                                                                                                    rank_guess=self.owning_rank[i])
 *                 else:
 */
        if (unlikely(!__pyx_v_self->containing_element_array.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2722, __pyx_L1_error)}
        __pyx_t_13 = __pyx_v_i;
        __pyx_t_10 = -1;
        if (unlikely(__pyx_t_13 >= (size_t)__pyx_v_self->containing_element_array.shape[0])) __pyx_t_10 = 0;
        if (unlikely(__pyx_t_10 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_10);
          __PYX_ERR(0, 2722, __pyx_L1_error)
        }
        __pyx_t_11 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_self->containing_element_array.data + __pyx_t_13 * __pyx_v_self->containing_element_array.strides[0]) )))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2722, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_eN_guess, __pyx_t_11) < 0) __PYX_ERR(0, 2720, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "mbd/ChRigidBody.pyx":2723
 *                                                                                                    node_guess=self.nearest_node_array[i],
 *                                                                                                    eN_guess=self.containing_element_array[i],
 *                                                                                                    rank_guess=self.owning_rank[i])             # <<<<<<<<<<<<<<
 *                 else:
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsKD(coords[:self.nd])
 */
        if (unlikely(!__pyx_v_self->owning_rank.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2723, __pyx_L1_error)}
        __pyx_t_14 = __pyx_v_i;
        __pyx_t_10 = -1;
        if (unlikely(__pyx_t_14 >= (size_t)__pyx_v_self->owning_rank.shape[0])) __pyx_t_10 = 0;
        if (unlikely(__pyx_t_10 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_10);
          __PYX_ERR(0, 2723, __pyx_L1_error)
        }
        __pyx_t_11 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_self->owning_rank.data + __pyx_t_14 * __pyx_v_self->owning_rank.strides[0]) )))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_rank_guess, __pyx_t_11) < 0) __PYX_ERR(0, 2720, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "mbd/ChRigidBody.pyx":2720
 *                 vel_grad_arr = np.zeros(3)
 *                 if dist_search is True:
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsDist(coords=coords[:self.nd],             # <<<<<<<<<<<<<<
 *                                                                                                    node_guess=self.nearest_node_array[i],
 *                                                                                                    eN_guess=self.containing_element_array[i],
 */
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2720, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
          PyObject* sequence = __pyx_t_11;
          #if !CYTHON_COMPILING_IN_PYPY
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 4)) {
            if (size > 4) __Pyx_RaiseTooManyValuesError(4);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 2720, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
          } else {
            __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
          }
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[4] = {&__pyx_t_6,&__pyx_t_1,&__pyx_t_4,&__pyx_t_5};
            for (i=0; i < 4; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 2720, __pyx_L1_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[4] = {&__pyx_t_6,&__pyx_t_1,&__pyx_t_4,&__pyx_t_5};
          __pyx_t_15 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2720, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_16 = Py_TYPE(__pyx_t_15)->tp_iternext;
          for (index=0; index < 4; index++) {
            PyObject* item = __pyx_t_16(__pyx_t_15); if (unlikely(!item)) goto __pyx_L19_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_15), 4) < 0) __PYX_ERR(0, 2720, __pyx_L1_error)
          __pyx_t_16 = NULL;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          goto __pyx_L20_unpacking_done;
          __pyx_L19_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_16 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 2720, __pyx_L1_error)
          __pyx_L20_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_xi, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_v_nearest_node, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_el, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_rank, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "mbd/ChRigidBody.pyx":2719
 *             if mesh_search is True:
 *                 vel_grad_arr = np.zeros(3)
 *                 if dist_search is True:             # <<<<<<<<<<<<<<
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsDist(coords=coords[:self.nd],
 *                                                                                                    node_guess=self.nearest_node_array[i],
 */
        goto __pyx_L18;
      }

      /* "mbd/ChRigidBody.pyx":2725
 *                                                                                                    rank_guess=self.owning_rank[i])
 *                 else:
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsKD(coords[:self.nd])             # <<<<<<<<<<<<<<
 *                 if el is None:
 *                     el = -1
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->ProtChSystem), __pyx_n_s_findElementContainingCoordsKD); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2725, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_v_coords, 0, __pyx_v_self->nd, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2725, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_1) {
          __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2725, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_11);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_4};
            __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2725, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_4};
            __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2725, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else
          #endif
          {
            __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2725, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __pyx_t_1 = NULL;
            __Pyx_GIVEREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
            __pyx_t_4 = 0;
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2725, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
          PyObject* sequence = __pyx_t_11;
          #if !CYTHON_COMPILING_IN_PYPY
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 4)) {
            if (size > 4) __Pyx_RaiseTooManyValuesError(4);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 2725, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 3); 
          } else {
            __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_1 = PyList_GET_ITEM(sequence, 3); 
          }
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_4,&__pyx_t_1};
            for (i=0; i < 4; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 2725, __pyx_L1_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_4,&__pyx_t_1};
          __pyx_t_15 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2725, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_16 = Py_TYPE(__pyx_t_15)->tp_iternext;
          for (index=0; index < 4; index++) {
            PyObject* item = __pyx_t_16(__pyx_t_15); if (unlikely(!item)) goto __pyx_L21_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_15), 4) < 0) __PYX_ERR(0, 2725, __pyx_L1_error)
          __pyx_t_16 = NULL;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          goto __pyx_L22_unpacking_done;
          __pyx_L21_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_16 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 2725, __pyx_L1_error)
          __pyx_L22_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_xi, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_nearest_node, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_v_el, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_rank, __pyx_t_1);
        __pyx_t_1 = 0;
      }
      __pyx_L18:;

      /* "mbd/ChRigidBody.pyx":2726
 *                 else:
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsKD(coords[:self.nd])
 *                 if el is None:             # <<<<<<<<<<<<<<
 *                     el = -1
 *                 self.nearest_node_array[i] = nearest_node
 */
      __pyx_t_3 = (__pyx_v_el == Py_None);
      __pyx_t_7 = (__pyx_t_3 != 0);
      if (__pyx_t_7) {

        /* "mbd/ChRigidBody.pyx":2727
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsKD(coords[:self.nd])
 *                 if el is None:
 *                     el = -1             # <<<<<<<<<<<<<<
 *                 self.nearest_node_array[i] = nearest_node
 *                 self.containing_element_array[i] = el
 */
        __Pyx_INCREF(__pyx_int_neg_1);
        __Pyx_DECREF_SET(__pyx_v_el, __pyx_int_neg_1);

        /* "mbd/ChRigidBody.pyx":2726
 *                 else:
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsKD(coords[:self.nd])
 *                 if el is None:             # <<<<<<<<<<<<<<
 *                     el = -1
 *                 self.nearest_node_array[i] = nearest_node
 */
      }

      /* "mbd/ChRigidBody.pyx":2728
 *                 if el is None:
 *                     el = -1
 *                 self.nearest_node_array[i] = nearest_node             # <<<<<<<<<<<<<<
 *                 self.containing_element_array[i] = el
 *                 self.owning_rank[i] = rank
 */
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_nearest_node); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2728, __pyx_L1_error)
      if (unlikely(!__pyx_v_self->nearest_node_array.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2728, __pyx_L1_error)}
      __pyx_t_17 = __pyx_v_i;
      __pyx_t_18 = -1;
      if (unlikely(__pyx_t_17 >= (size_t)__pyx_v_self->nearest_node_array.shape[0])) __pyx_t_18 = 0;
      if (unlikely(__pyx_t_18 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_18);
        __PYX_ERR(0, 2728, __pyx_L1_error)
      }
      *((int *) ( /* dim=0 */ (__pyx_v_self->nearest_node_array.data + __pyx_t_17 * __pyx_v_self->nearest_node_array.strides[0]) )) = __pyx_t_10;

      /* "mbd/ChRigidBody.pyx":2729
 *                     el = -1
 *                 self.nearest_node_array[i] = nearest_node
 *                 self.containing_element_array[i] = el             # <<<<<<<<<<<<<<
 *                 self.owning_rank[i] = rank
 *                 comm.barrier()
 */
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_el); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2729, __pyx_L1_error)
      if (unlikely(!__pyx_v_self->containing_element_array.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2729, __pyx_L1_error)}
      __pyx_t_19 = __pyx_v_i;
      __pyx_t_18 = -1;
      if (unlikely(__pyx_t_19 >= (size_t)__pyx_v_self->containing_element_array.shape[0])) __pyx_t_18 = 0;
      if (unlikely(__pyx_t_18 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_18);
        __PYX_ERR(0, 2729, __pyx_L1_error)
      }
      *((int *) ( /* dim=0 */ (__pyx_v_self->containing_element_array.data + __pyx_t_19 * __pyx_v_self->containing_element_array.strides[0]) )) = __pyx_t_10;

      /* "mbd/ChRigidBody.pyx":2730
 *                 self.nearest_node_array[i] = nearest_node
 *                 self.containing_element_array[i] = el
 *                 self.owning_rank[i] = rank             # <<<<<<<<<<<<<<
 *                 comm.barrier()
 *                 if rank is not None and xi is not None:
 */
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_rank); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2730, __pyx_L1_error)
      if (unlikely(!__pyx_v_self->owning_rank.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2730, __pyx_L1_error)}
      __pyx_t_20 = __pyx_v_i;
      __pyx_t_18 = -1;
      if (unlikely(__pyx_t_20 >= (size_t)__pyx_v_self->owning_rank.shape[0])) __pyx_t_18 = 0;
      if (unlikely(__pyx_t_18 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_18);
        __PYX_ERR(0, 2730, __pyx_L1_error)
      }
      *((int *) ( /* dim=0 */ (__pyx_v_self->owning_rank.data + __pyx_t_20 * __pyx_v_self->owning_rank.strides[0]) )) = __pyx_t_10;

      /* "mbd/ChRigidBody.pyx":2731
 *                 self.containing_element_array[i] = el
 *                 self.owning_rank[i] = rank
 *                 comm.barrier()             # <<<<<<<<<<<<<<
 *                 if rank is not None and xi is not None:
 *                     vel_arr[:] = self.ProtChSystem.getFluidVelocityLocalCoords(xi, el, rank)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_barrier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2731, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2731, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2731, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "mbd/ChRigidBody.pyx":2732
 *                 self.owning_rank[i] = rank
 *                 comm.barrier()
 *                 if rank is not None and xi is not None:             # <<<<<<<<<<<<<<
 *                     vel_arr[:] = self.ProtChSystem.getFluidVelocityLocalCoords(xi, el, rank)
 *                 else:  # means node is outside domain
 */
      __pyx_t_3 = (__pyx_v_rank != Py_None);
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_7 = __pyx_t_2;
        goto __pyx_L25_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_xi != Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      __pyx_t_7 = __pyx_t_3;
      __pyx_L25_bool_binop_done:;
      if (__pyx_t_7) {

        /* "mbd/ChRigidBody.pyx":2733
 *                 comm.barrier()
 *                 if rank is not None and xi is not None:
 *                     vel_arr[:] = self.ProtChSystem.getFluidVelocityLocalCoords(xi, el, rank)             # <<<<<<<<<<<<<<
 *                 else:  # means node is outside domain
 *                     if self.fluid_velocity_function is not None:
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->ProtChSystem), __pyx_n_s_getFluidVelocityLocalCoords); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2733, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_10 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xi, __pyx_v_el, __pyx_v_rank};
          __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2733, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_11);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xi, __pyx_v_el, __pyx_v_rank};
          __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2733, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_11);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v_xi);
          __Pyx_GIVEREF(__pyx_v_xi);
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_10, __pyx_v_xi);
          __Pyx_INCREF(__pyx_v_el);
          __Pyx_GIVEREF(__pyx_v_el);
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_10, __pyx_v_el);
          __Pyx_INCREF(__pyx_v_rank);
          __Pyx_GIVEREF(__pyx_v_rank);
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_10, __pyx_v_rank);
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_vel_arr, __pyx_t_11, 0, 0, NULL, NULL, &__pyx_slice__144, 0, 0, 1) < 0) __PYX_ERR(0, 2733, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "mbd/ChRigidBody.pyx":2732
 *                 self.owning_rank[i] = rank
 *                 comm.barrier()
 *                 if rank is not None and xi is not None:             # <<<<<<<<<<<<<<
 *                     vel_arr[:] = self.ProtChSystem.getFluidVelocityLocalCoords(xi, el, rank)
 *                 else:  # means node is outside domain
 */
        goto __pyx_L24;
      }

      /* "mbd/ChRigidBody.pyx":2735
 *                     vel_arr[:] = self.ProtChSystem.getFluidVelocityLocalCoords(xi, el, rank)
 *                 else:  # means node is outside domain
 *                     if self.fluid_velocity_function is not None:             # <<<<<<<<<<<<<<
 *                         vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                     else:
 */
      /*else*/ {
        __pyx_t_7 = (__pyx_v_self->fluid_velocity_function != Py_None);
        __pyx_t_3 = (__pyx_t_7 != 0);
        if (__pyx_t_3) {

          /* "mbd/ChRigidBody.pyx":2736
 *                 else:  # means node is outside domain
 *                     if self.fluid_velocity_function is not None:
 *                         vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)             # <<<<<<<<<<<<<<
 *                     else:
 *                         vel_arr[:] = 0.
 */
          __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ProtChSystem->t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2736, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_v_self->fluid_velocity_function);
          __pyx_t_6 = __pyx_v_self->fluid_velocity_function; __pyx_t_4 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
              __pyx_t_10 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_coords, __pyx_t_1};
            __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2736, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_coords, __pyx_t_1};
            __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2736, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          } else
          #endif
          {
            __pyx_t_5 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2736, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (__pyx_t_4) {
              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
            }
            __Pyx_INCREF(__pyx_v_coords);
            __Pyx_GIVEREF(__pyx_v_coords);
            PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_10, __pyx_v_coords);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_10, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2736, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (__Pyx_PyObject_SetSlice(__pyx_v_vel_arr, __pyx_t_11, 0, 0, NULL, NULL, &__pyx_slice__145, 0, 0, 1) < 0) __PYX_ERR(0, 2736, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "mbd/ChRigidBody.pyx":2735
 *                     vel_arr[:] = self.ProtChSystem.getFluidVelocityLocalCoords(xi, el, rank)
 *                 else:  # means node is outside domain
 *                     if self.fluid_velocity_function is not None:             # <<<<<<<<<<<<<<
 *                         vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                     else:
 */
          goto __pyx_L27;
        }

        /* "mbd/ChRigidBody.pyx":2738
 *                         vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                     else:
 *                         vel_arr[:] = 0.             # <<<<<<<<<<<<<<
 *                 comm.barrier()
 *             else:
 */
        /*else*/ {
          if (__Pyx_PyObject_SetSlice(__pyx_v_vel_arr, __pyx_float_0_, 0, 0, NULL, NULL, &__pyx_slice__146, 0, 0, 1) < 0) __PYX_ERR(0, 2738, __pyx_L1_error)
        }
        __pyx_L27:;
      }
      __pyx_L24:;

      /* "mbd/ChRigidBody.pyx":2739
 *                     else:
 *                         vel_arr[:] = 0.
 *                 comm.barrier()             # <<<<<<<<<<<<<<
 *             else:
 *                 if self.fluid_velocity_function is not None:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_comm, __pyx_n_s_barrier); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2739, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (__pyx_t_5) {
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2739, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2739, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "mbd/ChRigidBody.pyx":2717
 *             coords = np.array([x, y, z])
 *             vel_arr = np.zeros(3)
 *             if mesh_search is True:             # <<<<<<<<<<<<<<
 *                 vel_grad_arr = np.zeros(3)
 *                 if dist_search is True:
 */
      goto __pyx_L17;
    }

    /* "mbd/ChRigidBody.pyx":2741
 *                 comm.barrier()
 *             else:
 *                 if self.fluid_velocity_function is not None:             # <<<<<<<<<<<<<<
 *                     vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                 else:
 */
    /*else*/ {
      __pyx_t_3 = (__pyx_v_self->fluid_velocity_function != Py_None);
      __pyx_t_7 = (__pyx_t_3 != 0);
      if (__pyx_t_7) {

        /* "mbd/ChRigidBody.pyx":2742
 *             else:
 *                 if self.fluid_velocity_function is not None:
 *                     vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)             # <<<<<<<<<<<<<<
 *                 else:
 *                     vel_arr[:] = 0
 */
        __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->ProtChSystem->t); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_self->fluid_velocity_function);
        __pyx_t_5 = __pyx_v_self->fluid_velocity_function; __pyx_t_1 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_10 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_coords, __pyx_t_6};
          __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2742, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_coords, __pyx_t_6};
          __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2742, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_4 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2742, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (__pyx_t_1) {
            __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
          }
          __Pyx_INCREF(__pyx_v_coords);
          __Pyx_GIVEREF(__pyx_v_coords);
          PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_10, __pyx_v_coords);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_10, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2742, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_vel_arr, __pyx_t_11, 0, 0, NULL, NULL, &__pyx_slice__147, 0, 0, 1) < 0) __PYX_ERR(0, 2742, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "mbd/ChRigidBody.pyx":2741
 *                 comm.barrier()
 *             else:
 *                 if self.fluid_velocity_function is not None:             # <<<<<<<<<<<<<<
 *                     vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                 else:
 */
        goto __pyx_L28;
      }

      /* "mbd/ChRigidBody.pyx":2744
 *                     vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                 else:
 *                     vel_arr[:] = 0             # <<<<<<<<<<<<<<
 *             self.fluid_velocity_array[i] = vel_arr
 *             vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])
 */
      /*else*/ {
        if (__Pyx_PyObject_SetSlice(__pyx_v_vel_arr, __pyx_int_0, 0, 0, NULL, NULL, &__pyx_slice__148, 0, 0, 1) < 0) __PYX_ERR(0, 2744, __pyx_L1_error)
      }
      __pyx_L28:;
    }
    __pyx_L17:;

    /* "mbd/ChRigidBody.pyx":2745
 *                 else:
 *                     vel_arr[:] = 0
 *             self.fluid_velocity_array[i] = vel_arr             # <<<<<<<<<<<<<<
 *             vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])
 *             fluid_velocity.push_back(vel)
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->fluid_velocity_array), __pyx_v_i, __pyx_v_vel_arr, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2745, __pyx_L1_error)

    /* "mbd/ChRigidBody.pyx":2746
 *                     vel_arr[:] = 0
 *             self.fluid_velocity_array[i] = vel_arr
 *             vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])             # <<<<<<<<<<<<<<
 *             fluid_velocity.push_back(vel)
 *             if self.fluid_velocity_function is not None and fluid_velocity_array is None:
 */
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_vel_arr, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_vel_arr, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_vel_arr, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_23 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_23 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_vel = ChVector<double> (__pyx_t_21, __pyx_t_22, __pyx_t_23);

    /* "mbd/ChRigidBody.pyx":2747
 *             self.fluid_velocity_array[i] = vel_arr
 *             vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])
 *             fluid_velocity.push_back(vel)             # <<<<<<<<<<<<<<
 *             if self.fluid_velocity_function is not None and fluid_velocity_array is None:
 *                 vel_arr = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 */
    try {
      __pyx_v_fluid_velocity.push_back(__pyx_v_vel);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2747, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":2748
 *             vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])
 *             fluid_velocity.push_back(vel)
 *             if self.fluid_velocity_function is not None and fluid_velocity_array is None:             # <<<<<<<<<<<<<<
 *                 vel_arr = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                 vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])
 */
    __pyx_t_3 = (__pyx_v_self->fluid_velocity_function != Py_None);
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_7 = __pyx_t_2;
      goto __pyx_L30_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_fluid_velocity_array == Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_7 = __pyx_t_3;
    __pyx_L30_bool_binop_done:;
    if (__pyx_t_7) {

      /* "mbd/ChRigidBody.pyx":2749
 *             fluid_velocity.push_back(vel)
 *             if self.fluid_velocity_function is not None and fluid_velocity_array is None:
 *                 vel_arr = self.fluid_velocity_function(coords, self.ProtChSystem.t)             # <<<<<<<<<<<<<<
 *                 vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])
 *             else:
 */
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->ProtChSystem->t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_self->fluid_velocity_function);
      __pyx_t_4 = __pyx_v_self->fluid_velocity_function; __pyx_t_6 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_coords, __pyx_t_5};
        __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2749, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_coords, __pyx_t_5};
        __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2749, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_v_coords);
        __Pyx_GIVEREF(__pyx_v_coords);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, __pyx_v_coords);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_vel_arr, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "mbd/ChRigidBody.pyx":2750
 *             if self.fluid_velocity_function is not None and fluid_velocity_array is None:
 *                 vel_arr = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                 vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])             # <<<<<<<<<<<<<<
 *             else:
 *                 vel = ch.ChVector[double](self.fluid_velocity_array[i][0], self.fluid_velocity_array[i][1], self.fluid_velocity_array[i][2])
 */
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_vel_arr, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_23 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_23 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2750, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_vel_arr, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2750, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_vel_arr, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2750, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_vel = ChVector<double> (__pyx_t_23, __pyx_t_22, __pyx_t_21);

      /* "mbd/ChRigidBody.pyx":2748
 *             vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])
 *             fluid_velocity.push_back(vel)
 *             if self.fluid_velocity_function is not None and fluid_velocity_array is None:             # <<<<<<<<<<<<<<
 *                 vel_arr = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                 vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])
 */
      goto __pyx_L29;
    }

    /* "mbd/ChRigidBody.pyx":2752
 *                 vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])
 *             else:
 *                 vel = ch.ChVector[double](self.fluid_velocity_array[i][0], self.fluid_velocity_array[i][1], self.fluid_velocity_array[i][2])             # <<<<<<<<<<<<<<
 *             fluid_velocity.push_back(vel)
 *             self.fluid_acceleration_array[i] = (self.fluid_velocity_array[i]-self.fluid_velocity_array_previous[i])/self.ProtChSystem.proteus_dt
 */
    /*else*/ {
      __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->fluid_velocity_array), __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_11, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->fluid_velocity_array), __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->fluid_velocity_array), __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_11, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_23 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_23 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_vel = ChVector<double> (__pyx_t_21, __pyx_t_22, __pyx_t_23);
    }
    __pyx_L29:;

    /* "mbd/ChRigidBody.pyx":2753
 *             else:
 *                 vel = ch.ChVector[double](self.fluid_velocity_array[i][0], self.fluid_velocity_array[i][1], self.fluid_velocity_array[i][2])
 *             fluid_velocity.push_back(vel)             # <<<<<<<<<<<<<<
 *             self.fluid_acceleration_array[i] = (self.fluid_velocity_array[i]-self.fluid_velocity_array_previous[i])/self.ProtChSystem.proteus_dt
 *             # acc = du/dt+u.grad(u)
 */
    try {
      __pyx_v_fluid_velocity.push_back(__pyx_v_vel);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2753, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":2754
 *                 vel = ch.ChVector[double](self.fluid_velocity_array[i][0], self.fluid_velocity_array[i][1], self.fluid_velocity_array[i][2])
 *             fluid_velocity.push_back(vel)
 *             self.fluid_acceleration_array[i] = (self.fluid_velocity_array[i]-self.fluid_velocity_array_previous[i])/self.ProtChSystem.proteus_dt             # <<<<<<<<<<<<<<
 *             # acc = du/dt+u.grad(u)
 *             #vel_grad_arr[:] = self.ProtChSystem.getFluidVelocityGradientLocalCoords(xi, el, rank)
 */
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->fluid_velocity_array), __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->fluid_velocity_array_previous), __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_4, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_self->ProtChSystem->proteus_dt); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->fluid_acceleration_array), __pyx_v_i, __pyx_t_4, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 2754, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2759
 *             #acc_arr = (vel_arr-fluid_velocity_array_previous[i])/dt+vel_arr*vel_grad_arr
 *             #arr[:self.nd] = self.ProtChSystem.findFluidVelocityAtCoords(coords[:self.nd])
 *             acc = ch.ChVector[double](self.fluid_acceleration_array[i][0], self.fluid_acceleration_array[i][1], self.fluid_acceleration_array[i][2])             # <<<<<<<<<<<<<<
 *             fluid_acceleration.push_back(acc)
 *             dens = self.fluid_density_array[i]
 */
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->fluid_acceleration_array), __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_23 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_23 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2759, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->fluid_acceleration_array), __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_11, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2759, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->fluid_acceleration_array), __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_4, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2759, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_acc = ChVector<double> (__pyx_t_23, __pyx_t_22, __pyx_t_21);

    /* "mbd/ChRigidBody.pyx":2760
 *             #arr[:self.nd] = self.ProtChSystem.findFluidVelocityAtCoords(coords[:self.nd])
 *             acc = ch.ChVector[double](self.fluid_acceleration_array[i][0], self.fluid_acceleration_array[i][1], self.fluid_acceleration_array[i][2])
 *             fluid_acceleration.push_back(acc)             # <<<<<<<<<<<<<<
 *             dens = self.fluid_density_array[i]
 *             fluid_density.push_back(dens)
 */
    try {
      __pyx_v_fluid_acceleration.push_back(__pyx_v_acc);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2760, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":2761
 *             acc = ch.ChVector[double](self.fluid_acceleration_array[i][0], self.fluid_acceleration_array[i][1], self.fluid_acceleration_array[i][2])
 *             fluid_acceleration.push_back(acc)
 *             dens = self.fluid_density_array[i]             # <<<<<<<<<<<<<<
 *             fluid_density.push_back(dens)
 *         Profiling.logEvent("Finished search for cable nodes")
 */
    __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->fluid_density_array), __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2761, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_dens = __pyx_t_21;

    /* "mbd/ChRigidBody.pyx":2762
 *             fluid_acceleration.push_back(acc)
 *             dens = self.fluid_density_array[i]
 *             fluid_density.push_back(dens)             # <<<<<<<<<<<<<<
 *         Profiling.logEvent("Finished search for cable nodes")
 *         self.thisptr.setFluidAccelerationAtNodes(fluid_acceleration)
 */
    try {
      __pyx_v_fluid_density.push_back(__pyx_v_dens);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2762, __pyx_L1_error)
    }
  }

  /* "mbd/ChRigidBody.pyx":2763
 *             dens = self.fluid_density_array[i]
 *             fluid_density.push_back(dens)
 *         Profiling.logEvent("Finished search for cable nodes")             # <<<<<<<<<<<<<<
 *         self.thisptr.setFluidAccelerationAtNodes(fluid_acceleration)
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_Profiling); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_logEvent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__149, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "mbd/ChRigidBody.pyx":2764
 *             fluid_density.push_back(dens)
 *         Profiling.logEvent("Finished search for cable nodes")
 *         self.thisptr.setFluidAccelerationAtNodes(fluid_acceleration)             # <<<<<<<<<<<<<<
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)
 *         self.thisptr.setFluidDensityAtNodes(fluid_density)
 */
  __pyx_v_self->thisptr->setFluidAccelerationAtNodes(((std::vector<ChVector<double> > )__pyx_v_fluid_acceleration));

  /* "mbd/ChRigidBody.pyx":2765
 *         Profiling.logEvent("Finished search for cable nodes")
 *         self.thisptr.setFluidAccelerationAtNodes(fluid_acceleration)
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)             # <<<<<<<<<<<<<<
 *         self.thisptr.setFluidDensityAtNodes(fluid_density)
 *         self.updateForces()
 */
  __pyx_v_self->thisptr->setFluidVelocityAtNodes(((std::vector<ChVector<double> > )__pyx_v_fluid_velocity));

  /* "mbd/ChRigidBody.pyx":2766
 *         self.thisptr.setFluidAccelerationAtNodes(fluid_acceleration)
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)
 *         self.thisptr.setFluidDensityAtNodes(fluid_density)             # <<<<<<<<<<<<<<
 *         self.updateForces()
 * 
 */
  __pyx_v_self->thisptr->setFluidDensityAtNodes(__pyx_v_fluid_density);

  /* "mbd/ChRigidBody.pyx":2767
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)
 *         self.thisptr.setFluidDensityAtNodes(fluid_density)
 *         self.updateForces()             # <<<<<<<<<<<<<<
 * 
 *     def updateForces(self):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateForces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2767, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_11 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2767, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "mbd/ChRigidBody.pyx":2668
 *         self.thisptr.setContactMaterial(mat.sharedptr)
 * 
 *     def setExternalForces(self, fluid_velocity_array=None, fluid_density_array=None,             # <<<<<<<<<<<<<<
 *                           fluid_acceleration_array=None):
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setExternalForces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_comm);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XDECREF(__pyx_v_vel_arr);
  __Pyx_XDECREF(__pyx_v_vel_grad_arr);
  __Pyx_XDECREF(__pyx_v_xi);
  __Pyx_XDECREF(__pyx_v_nearest_node);
  __Pyx_XDECREF(__pyx_v_el);
  __Pyx_XDECREF(__pyx_v_rank);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2769
 *         self.updateForces()
 * 
 *     def updateForces(self):             # <<<<<<<<<<<<<<
 *         # update drag forces
 *         self.thisptr.updateDragForces()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_71updateForces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_71updateForces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateForces (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_70updateForces(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_70updateForces(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateForces", 0);

  /* "mbd/ChRigidBody.pyx":2771
 *     def updateForces(self):
 *         # update drag forces
 *         self.thisptr.updateDragForces()             # <<<<<<<<<<<<<<
 *         # update added mass forces
 *         self.thisptr.updateAddedMassForces()
 */
  __pyx_v_self->thisptr->updateDragForces();

  /* "mbd/ChRigidBody.pyx":2773
 *         self.thisptr.updateDragForces()
 *         # update added mass forces
 *         self.thisptr.updateAddedMassForces()             # <<<<<<<<<<<<<<
 *         # update buoyancy forces
 *         # self.thisptr.updateBuoyancyForces()
 */
  __pyx_v_self->thisptr->updateAddedMassForces();

  /* "mbd/ChRigidBody.pyx":2777
 *         # self.thisptr.updateBuoyancyForces()
 *         # apply forces
 *         self.thisptr.applyForces()             # <<<<<<<<<<<<<<
 * 
 *     def setFluidDensityAtNodes(self, np.ndarray density_array):
 */
  __pyx_v_self->thisptr->applyForces();

  /* "mbd/ChRigidBody.pyx":2769
 *         self.updateForces()
 * 
 *     def updateForces(self):             # <<<<<<<<<<<<<<
 *         # update drag forces
 *         self.thisptr.updateDragForces()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2779
 *         self.thisptr.applyForces()
 * 
 *     def setFluidDensityAtNodes(self, np.ndarray density_array):             # <<<<<<<<<<<<<<
 *         cdef vector[double] fluid_density
 *         self.fluid_density_array = density_array
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_73setFluidDensityAtNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_density_array); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_73setFluidDensityAtNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_density_array) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFluidDensityAtNodes (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_density_array), __pyx_ptype_5numpy_ndarray, 1, "density_array", 0))) __PYX_ERR(0, 2779, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_72setFluidDensityAtNodes(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyArrayObject *)__pyx_v_density_array));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_72setFluidDensityAtNodes(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyArrayObject *__pyx_v_density_array) {
  std::vector<double>  __pyx_v_fluid_density;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("setFluidDensityAtNodes", 0);

  /* "mbd/ChRigidBody.pyx":2781
 *     def setFluidDensityAtNodes(self, np.ndarray density_array):
 *         cdef vector[double] fluid_density
 *         self.fluid_density_array = density_array             # <<<<<<<<<<<<<<
 *         cdef double dens
 *         for d in density_array:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_density_array));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_density_array));
  __Pyx_GOTREF(__pyx_v_self->fluid_density_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_density_array));
  __pyx_v_self->fluid_density_array = __pyx_v_density_array;

  /* "mbd/ChRigidBody.pyx":2783
 *         self.fluid_density_array = density_array
 *         cdef double dens
 *         for d in density_array:             # <<<<<<<<<<<<<<
 *             fluid_density.push_back(d)
 *         self.thisptr.setFluidDensityAtNodes(fluid_density)
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_density_array))) || PyTuple_CheckExact(((PyObject *)__pyx_v_density_array))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_density_array); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_density_array)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2783, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2783, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2783, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2783, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2783, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2783, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_d, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2784
 *         cdef double dens
 *         for d in density_array:
 *             fluid_density.push_back(d)             # <<<<<<<<<<<<<<
 *         self.thisptr.setFluidDensityAtNodes(fluid_density)
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_d); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L1_error)
    try {
      __pyx_v_fluid_density.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2784, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":2783
 *         self.fluid_density_array = density_array
 *         cdef double dens
 *         for d in density_array:             # <<<<<<<<<<<<<<
 *             fluid_density.push_back(d)
 *         self.thisptr.setFluidDensityAtNodes(fluid_density)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2785
 *         for d in density_array:
 *             fluid_density.push_back(d)
 *         self.thisptr.setFluidDensityAtNodes(fluid_density)             # <<<<<<<<<<<<<<
 * 
 *     def setFluidVelocityAtNodes(self, np.ndarray velocity_array):
 */
  __pyx_v_self->thisptr->setFluidDensityAtNodes(__pyx_v_fluid_density);

  /* "mbd/ChRigidBody.pyx":2779
 *         self.thisptr.applyForces()
 * 
 *     def setFluidDensityAtNodes(self, np.ndarray density_array):             # <<<<<<<<<<<<<<
 *         cdef vector[double] fluid_density
 *         self.fluid_density_array = density_array
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setFluidDensityAtNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2787
 *         self.thisptr.setFluidDensityAtNodes(fluid_density)
 * 
 *     def setFluidVelocityAtNodes(self, np.ndarray velocity_array):             # <<<<<<<<<<<<<<
 *         cdef vector[ch.ChVector[double]] fluid_velocity
 *         cdef ch.ChVector[double] vel
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_75setFluidVelocityAtNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_velocity_array); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_75setFluidVelocityAtNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_velocity_array) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFluidVelocityAtNodes (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocity_array), __pyx_ptype_5numpy_ndarray, 1, "velocity_array", 0))) __PYX_ERR(0, 2787, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_74setFluidVelocityAtNodes(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyArrayObject *)__pyx_v_velocity_array));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_74setFluidVelocityAtNodes(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyArrayObject *__pyx_v_velocity_array) {
  std::vector<ChVector<double> >  __pyx_v_fluid_velocity;
  ChVector<double>  __pyx_v_vel;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  __Pyx_RefNannySetupContext("setFluidVelocityAtNodes", 0);

  /* "mbd/ChRigidBody.pyx":2790
 *         cdef vector[ch.ChVector[double]] fluid_velocity
 *         cdef ch.ChVector[double] vel
 *         self.fluid_velocity_array = velocity_array             # <<<<<<<<<<<<<<
 *         for v in velocity_array:
 *             vel = ch.ChVector[double](v[0], v[1], v[2])
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_velocity_array));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_velocity_array));
  __Pyx_GOTREF(__pyx_v_self->fluid_velocity_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_velocity_array));
  __pyx_v_self->fluid_velocity_array = __pyx_v_velocity_array;

  /* "mbd/ChRigidBody.pyx":2791
 *         cdef ch.ChVector[double] vel
 *         self.fluid_velocity_array = velocity_array
 *         for v in velocity_array:             # <<<<<<<<<<<<<<
 *             vel = ch.ChVector[double](v[0], v[1], v[2])
 *             fluid_velocity.push_back(vel)
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_velocity_array))) || PyTuple_CheckExact(((PyObject *)__pyx_v_velocity_array))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_velocity_array); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_velocity_array)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2791, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2791, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2791, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2791, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2791, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2791, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2792
 *         self.fluid_velocity_array = velocity_array
 *         for v in velocity_array:
 *             vel = ch.ChVector[double](v[0], v[1], v[2])             # <<<<<<<<<<<<<<
 *             fluid_velocity.push_back(vel)
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2792, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2792, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2792, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_vel = ChVector<double> (__pyx_t_5, __pyx_t_6, __pyx_t_7);

    /* "mbd/ChRigidBody.pyx":2793
 *         for v in velocity_array:
 *             vel = ch.ChVector[double](v[0], v[1], v[2])
 *             fluid_velocity.push_back(vel)             # <<<<<<<<<<<<<<
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)
 * 
 */
    try {
      __pyx_v_fluid_velocity.push_back(__pyx_v_vel);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2793, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":2791
 *         cdef ch.ChVector[double] vel
 *         self.fluid_velocity_array = velocity_array
 *         for v in velocity_array:             # <<<<<<<<<<<<<<
 *             vel = ch.ChVector[double](v[0], v[1], v[2])
 *             fluid_velocity.push_back(vel)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2794
 *             vel = ch.ChVector[double](v[0], v[1], v[2])
 *             fluid_velocity.push_back(vel)
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)             # <<<<<<<<<<<<<<
 * 
 *     def setFluidAccelerationAtNodes(self, np.ndarray acceleration_array):
 */
  __pyx_v_self->thisptr->setFluidVelocityAtNodes(((std::vector<ChVector<double> > )__pyx_v_fluid_velocity));

  /* "mbd/ChRigidBody.pyx":2787
 *         self.thisptr.setFluidDensityAtNodes(fluid_density)
 * 
 *     def setFluidVelocityAtNodes(self, np.ndarray velocity_array):             # <<<<<<<<<<<<<<
 *         cdef vector[ch.ChVector[double]] fluid_velocity
 *         cdef ch.ChVector[double] vel
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setFluidVelocityAtNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2796
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)
 * 
 *     def setFluidAccelerationAtNodes(self, np.ndarray acceleration_array):             # <<<<<<<<<<<<<<
 *         cdef vector[ch.ChVector[double]] fluid_acceleration
 *         cdef ch.ChVector[double] acc
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_77setFluidAccelerationAtNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_acceleration_array); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_77setFluidAccelerationAtNodes(PyObject *__pyx_v_self, PyObject *__pyx_v_acceleration_array) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFluidAccelerationAtNodes (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_acceleration_array), __pyx_ptype_5numpy_ndarray, 1, "acceleration_array", 0))) __PYX_ERR(0, 2796, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_76setFluidAccelerationAtNodes(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyArrayObject *)__pyx_v_acceleration_array));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_76setFluidAccelerationAtNodes(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyArrayObject *__pyx_v_acceleration_array) {
  std::vector<ChVector<double> >  __pyx_v_fluid_acceleration;
  ChVector<double>  __pyx_v_acc;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  __Pyx_RefNannySetupContext("setFluidAccelerationAtNodes", 0);

  /* "mbd/ChRigidBody.pyx":2799
 *         cdef vector[ch.ChVector[double]] fluid_acceleration
 *         cdef ch.ChVector[double] acc
 *         self.fluid_acceleration_array = acceleration_array             # <<<<<<<<<<<<<<
 *         for a in acceleration_array:
 *             acc = ch.ChVector[double](a[0], a[1], a[2])
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_acceleration_array));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_acceleration_array));
  __Pyx_GOTREF(__pyx_v_self->fluid_acceleration_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_acceleration_array));
  __pyx_v_self->fluid_acceleration_array = __pyx_v_acceleration_array;

  /* "mbd/ChRigidBody.pyx":2800
 *         cdef ch.ChVector[double] acc
 *         self.fluid_acceleration_array = acceleration_array
 *         for a in acceleration_array:             # <<<<<<<<<<<<<<
 *             acc = ch.ChVector[double](a[0], a[1], a[2])
 *             fluid_acceleration.push_back(acc)
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_acceleration_array))) || PyTuple_CheckExact(((PyObject *)__pyx_v_acceleration_array))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_acceleration_array); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_acceleration_array)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2800, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2800, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2800, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2800, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2800, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2800, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2801
 *         self.fluid_acceleration_array = acceleration_array
 *         for a in acceleration_array:
 *             acc = ch.ChVector[double](a[0], a[1], a[2])             # <<<<<<<<<<<<<<
 *             fluid_acceleration.push_back(acc)
 *         self.thisptr.setFluidAccelerationAtNodes(fluid_acceleration)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_a, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2801, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2801, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_a, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2801, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2801, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_a, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2801, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2801, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_acc = ChVector<double> (__pyx_t_5, __pyx_t_6, __pyx_t_7);

    /* "mbd/ChRigidBody.pyx":2802
 *         for a in acceleration_array:
 *             acc = ch.ChVector[double](a[0], a[1], a[2])
 *             fluid_acceleration.push_back(acc)             # <<<<<<<<<<<<<<
 *         self.thisptr.setFluidAccelerationAtNodes(fluid_acceleration)
 * 
 */
    try {
      __pyx_v_fluid_acceleration.push_back(__pyx_v_acc);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2802, __pyx_L1_error)
    }

    /* "mbd/ChRigidBody.pyx":2800
 *         cdef ch.ChVector[double] acc
 *         self.fluid_acceleration_array = acceleration_array
 *         for a in acceleration_array:             # <<<<<<<<<<<<<<
 *             acc = ch.ChVector[double](a[0], a[1], a[2])
 *             fluid_acceleration.push_back(acc)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2803
 *             acc = ch.ChVector[double](a[0], a[1], a[2])
 *             fluid_acceleration.push_back(acc)
 *         self.thisptr.setFluidAccelerationAtNodes(fluid_acceleration)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr->setFluidAccelerationAtNodes(((std::vector<ChVector<double> > )__pyx_v_fluid_acceleration));

  /* "mbd/ChRigidBody.pyx":2796
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)
 * 
 *     def setFluidAccelerationAtNodes(self, np.ndarray acceleration_array):             # <<<<<<<<<<<<<<
 *         cdef vector[ch.ChVector[double]] fluid_acceleration
 *         cdef ch.ChVector[double] acc
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.setFluidAccelerationAtNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1971
 *       # vector[pyfea.ChElementCableANCF] elems
 *       # vector[ProtChCable] cables
 *       str record_file             # <<<<<<<<<<<<<<
 *       object model
 *       ProtChSystem ProtChSystem
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11record_file___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11record_file___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->record_file);
  __pyx_r = __pyx_v_self->record_file;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 1971, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->record_file);
  __Pyx_DECREF(__pyx_v_self->record_file);
  __pyx_v_self->record_file = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.record_file.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->record_file);
  __Pyx_DECREF(__pyx_v_self->record_file);
  __pyx_v_self->record_file = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1972
 *       # vector[ProtChCable] cables
 *       str record_file
 *       object model             # <<<<<<<<<<<<<<
 *       ProtChSystem ProtChSystem
 *       object Mesh
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5model_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_5model___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_5model___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->model);
  __pyx_r = __pyx_v_self->model;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_5model_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_5model_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5model_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5model_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_5model_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_5model_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1973
 *       str record_file
 *       object model
 *       ProtChSystem ProtChSystem             # <<<<<<<<<<<<<<
 *       object Mesh
 *       int nd
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_r = ((PyObject *)__pyx_v_self->ProtChSystem);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3mbd_11ChRigidBody_ProtChSystem))))) __PYX_ERR(0, 1973, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ProtChSystem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_v_self->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.ProtChSystem.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ProtChSystem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_v_self->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1974
 *       object model
 *       ProtChSystem ProtChSystem
 *       object Mesh             # <<<<<<<<<<<<<<
 *       int nd
 *       object nodes_function
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->Mesh);
  __pyx_r = __pyx_v_self->Mesh;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->Mesh);
  __Pyx_DECREF(__pyx_v_self->Mesh);
  __pyx_v_self->Mesh = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Mesh);
  __Pyx_DECREF(__pyx_v_self->Mesh);
  __pyx_v_self->Mesh = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1975
 *       ProtChSystem ProtChSystem
 *       object Mesh
 *       int nd             # <<<<<<<<<<<<<<
 *       object nodes_function
 *       object nodes_function_tangent
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_2nd_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_2nd_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_2nd___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_2nd___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.nd.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_2nd_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_2nd_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_2nd_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_2nd_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1975, __pyx_L1_error)
  __pyx_v_self->nd = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.nd.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1976
 *       object Mesh
 *       int nd
 *       object nodes_function             # <<<<<<<<<<<<<<
 *       object nodes_function_tangent
 *       object fluid_velocity_function
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->nodes_function);
  __pyx_r = __pyx_v_self->nodes_function;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->nodes_function);
  __Pyx_DECREF(__pyx_v_self->nodes_function);
  __pyx_v_self->nodes_function = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->nodes_function);
  __Pyx_DECREF(__pyx_v_self->nodes_function);
  __pyx_v_self->nodes_function = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1977
 *       int nd
 *       object nodes_function
 *       object nodes_function_tangent             # <<<<<<<<<<<<<<
 *       object fluid_velocity_function
 *       ProtChBody body_front
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->nodes_function_tangent);
  __pyx_r = __pyx_v_self->nodes_function_tangent;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->nodes_function_tangent);
  __Pyx_DECREF(__pyx_v_self->nodes_function_tangent);
  __pyx_v_self->nodes_function_tangent = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->nodes_function_tangent);
  __Pyx_DECREF(__pyx_v_self->nodes_function_tangent);
  __pyx_v_self->nodes_function_tangent = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1978
 *       object nodes_function
 *       object nodes_function_tangent
 *       object fluid_velocity_function             # <<<<<<<<<<<<<<
 *       ProtChBody body_front
 *       ProtChBody body_back
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->fluid_velocity_function);
  __pyx_r = __pyx_v_self->fluid_velocity_function;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->fluid_velocity_function);
  __Pyx_DECREF(__pyx_v_self->fluid_velocity_function);
  __pyx_v_self->fluid_velocity_function = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->fluid_velocity_function);
  __Pyx_DECREF(__pyx_v_self->fluid_velocity_function);
  __pyx_v_self->fluid_velocity_function = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1979
 *       object nodes_function_tangent
 *       object fluid_velocity_function
 *       ProtChBody body_front             # <<<<<<<<<<<<<<
 *       ProtChBody body_back
 *       bool front_body
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10body_front___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10body_front___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->body_front));
  __pyx_r = ((PyObject *)__pyx_v_self->body_front);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3mbd_11ChRigidBody_ProtChBody))))) __PYX_ERR(0, 1979, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->body_front);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->body_front));
  __pyx_v_self->body_front = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.body_front.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->body_front);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->body_front));
  __pyx_v_self->body_front = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1980
 *       object fluid_velocity_function
 *       ProtChBody body_front
 *       ProtChBody body_back             # <<<<<<<<<<<<<<
 *       bool front_body
 *       bool back_body
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9body_back___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9body_back___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->body_back));
  __pyx_r = ((PyObject *)__pyx_v_self->body_back);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3mbd_11ChRigidBody_ProtChBody))))) __PYX_ERR(0, 1980, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->body_back);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->body_back));
  __pyx_v_self->body_back = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.body_back.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->body_back);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->body_back));
  __pyx_v_self->body_back = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1981
 *       ProtChBody body_front
 *       ProtChBody body_back
 *       bool front_body             # <<<<<<<<<<<<<<
 *       bool back_body
 *       bool nodes_built
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10front_body_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10front_body_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10front_body___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10front_body___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->front_body); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.front_body.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10front_body_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10front_body_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10front_body_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_10front_body_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1981, __pyx_L1_error)
  __pyx_v_self->front_body = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.front_body.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1982
 *       ProtChBody body_back
 *       bool front_body
 *       bool back_body             # <<<<<<<<<<<<<<
 *       bool nodes_built
 *       bool external_forces_from_ns
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9back_body_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9back_body_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9back_body___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9back_body___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->back_body); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.back_body.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9back_body_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9back_body_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9back_body_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9back_body_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1982, __pyx_L1_error)
  __pyx_v_self->back_body = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.back_body.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1983
 *       bool front_body
 *       bool back_body
 *       bool nodes_built             # <<<<<<<<<<<<<<
 *       bool external_forces_from_ns
 *       bool external_forces_manual
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->nodes_built); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.nodes_built.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1983, __pyx_L1_error)
  __pyx_v_self->nodes_built = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.nodes_built.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1984
 *       bool back_body
 *       bool nodes_built
 *       bool external_forces_from_ns             # <<<<<<<<<<<<<<
 *       bool external_forces_manual
 *       np.ndarray fluid_density_array
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->external_forces_from_ns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.external_forces_from_ns.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1984, __pyx_L1_error)
  __pyx_v_self->external_forces_from_ns = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.external_forces_from_ns.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1985
 *       bool nodes_built
 *       bool external_forces_from_ns
 *       bool external_forces_manual             # <<<<<<<<<<<<<<
 *       np.ndarray fluid_density_array
 *       np.ndarray fluid_velocity_array
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->external_forces_manual); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.external_forces_manual.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1985, __pyx_L1_error)
  __pyx_v_self->external_forces_manual = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.external_forces_manual.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1986
 *       bool external_forces_from_ns
 *       bool external_forces_manual
 *       np.ndarray fluid_density_array             # <<<<<<<<<<<<<<
 *       np.ndarray fluid_velocity_array
 *       np.ndarray fluid_velocity_array_previous
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->fluid_density_array));
  __pyx_r = ((PyObject *)__pyx_v_self->fluid_density_array);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1986, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fluid_density_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_density_array));
  __pyx_v_self->fluid_density_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.fluid_density_array.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->fluid_density_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_density_array));
  __pyx_v_self->fluid_density_array = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1987
 *       bool external_forces_manual
 *       np.ndarray fluid_density_array
 *       np.ndarray fluid_velocity_array             # <<<<<<<<<<<<<<
 *       np.ndarray fluid_velocity_array_previous
 *       np.ndarray fluid_acceleration_array
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->fluid_velocity_array));
  __pyx_r = ((PyObject *)__pyx_v_self->fluid_velocity_array);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1987, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fluid_velocity_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_velocity_array));
  __pyx_v_self->fluid_velocity_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.fluid_velocity_array.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->fluid_velocity_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_velocity_array));
  __pyx_v_self->fluid_velocity_array = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1988
 *       np.ndarray fluid_density_array
 *       np.ndarray fluid_velocity_array
 *       np.ndarray fluid_velocity_array_previous             # <<<<<<<<<<<<<<
 *       np.ndarray fluid_acceleration_array
 *       string name
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->fluid_velocity_array_previous));
  __pyx_r = ((PyObject *)__pyx_v_self->fluid_velocity_array_previous);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1988, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fluid_velocity_array_previous);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_velocity_array_previous));
  __pyx_v_self->fluid_velocity_array_previous = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.fluid_velocity_array_previous.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->fluid_velocity_array_previous);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_velocity_array_previous));
  __pyx_v_self->fluid_velocity_array_previous = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1989
 *       np.ndarray fluid_velocity_array
 *       np.ndarray fluid_velocity_array_previous
 *       np.ndarray fluid_acceleration_array             # <<<<<<<<<<<<<<
 *       string name
 *       string beam_type
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->fluid_acceleration_array));
  __pyx_r = ((PyObject *)__pyx_v_self->fluid_acceleration_array);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1989, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fluid_acceleration_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_acceleration_array));
  __pyx_v_self->fluid_acceleration_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.fluid_acceleration_array.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->fluid_acceleration_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluid_acceleration_array));
  __pyx_v_self->fluid_acceleration_array = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1990
 *       np.ndarray fluid_velocity_array_previous
 *       np.ndarray fluid_acceleration_array
 *       string name             # <<<<<<<<<<<<<<
 *       string beam_type
 *       int nodes_nb # number of nodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4name___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4name___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4name_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_4name_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_v_self->name = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1991
 *       np.ndarray fluid_acceleration_array
 *       string name
 *       string beam_type             # <<<<<<<<<<<<<<
 *       int nodes_nb # number of nodes
 *       np.ndarray nb_elems
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->beam_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.beam_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1991, __pyx_L1_error)
  __pyx_v_self->beam_type = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.beam_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1992
 *       string name
 *       string beam_type
 *       int nodes_nb # number of nodes             # <<<<<<<<<<<<<<
 *       np.ndarray nb_elems
 *       double[:] _record_etas
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nodes_nb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.nodes_nb.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1992, __pyx_L1_error)
  __pyx_v_self->nodes_nb = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.nodes_nb.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1993
 *       string beam_type
 *       int nodes_nb # number of nodes
 *       np.ndarray nb_elems             # <<<<<<<<<<<<<<
 *       double[:] _record_etas
 *       bool initialized
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->nb_elems));
  __pyx_r = ((PyObject *)__pyx_v_self->nb_elems);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1993, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->nb_elems);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->nb_elems));
  __pyx_v_self->nb_elems = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.nb_elems.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->nb_elems);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->nb_elems));
  __pyx_v_self->nb_elems = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1994
 *       int nodes_nb # number of nodes
 *       np.ndarray nb_elems
 *       double[:] _record_etas             # <<<<<<<<<<<<<<
 *       bool initialized
 *       int[:] nearest_node_array
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->_record_etas.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1994, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->_record_etas, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings._record_etas.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_value);
  if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_record_etas, 0);
  __pyx_v_self->_record_etas = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings._record_etas.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1995
 *       np.ndarray nb_elems
 *       double[:] _record_etas
 *       bool initialized             # <<<<<<<<<<<<<<
 *       int[:] nearest_node_array
 *       int[:] containing_element_array
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11initialized_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11initialized_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11initialized___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11initialized___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->initialized); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.initialized.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11initialized_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11initialized_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11initialized_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11initialized_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1995, __pyx_L1_error)
  __pyx_v_self->initialized = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.initialized.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1996
 *       double[:] _record_etas
 *       bool initialized
 *       int[:] nearest_node_array             # <<<<<<<<<<<<<<
 *       int[:] containing_element_array
 *       int[:] owning_rank
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->nearest_node_array.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1996, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->nearest_node_array, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.nearest_node_array.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_v_value);
  if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 1996, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->nearest_node_array, 0);
  __pyx_v_self->nearest_node_array = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.nearest_node_array.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1997
 *       bool initialized
 *       int[:] nearest_node_array
 *       int[:] containing_element_array             # <<<<<<<<<<<<<<
 *       int[:] owning_rank
 *       string hdfFileName
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->containing_element_array.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1997, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->containing_element_array, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.containing_element_array.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_v_value);
  if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 1997, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->containing_element_array, 0);
  __pyx_v_self->containing_element_array = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.containing_element_array.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1998
 *       int[:] nearest_node_array
 *       int[:] containing_element_array
 *       int[:] owning_rank             # <<<<<<<<<<<<<<
 *       string hdfFileName
 *     def __cinit__(self,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->owning_rank.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1998, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->owning_rank, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.owning_rank.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_v_value);
  if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 1998, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->owning_rank, 0);
  __pyx_v_self->owning_rank = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.owning_rank.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":1999
 *       int[:] containing_element_array
 *       int[:] owning_rank
 *       string hdfFileName             # <<<<<<<<<<<<<<
 *     def __cinit__(self,
 *                   ProtChSystem system,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->hdfFileName); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.hdfFileName.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1999, __pyx_L1_error)
  __pyx_v_self->hdfFileName = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChMoorings.hdfFileName.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2806
 * 
 * 
 * def getLocalNearestNode(coords, kdtree):             # <<<<<<<<<<<<<<
 *     """Finds nearest node to coordinates (local)
 *     Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_1getLocalNearestNode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_getLocalNearestNode[] = "Finds nearest node to coordinates (local)\n    Parameters\n    ----------\n    coords: array_like\n        coordinates from which to find nearest node\n    kdtree: scipy.spatial.cKDTree\n        instance of scipy kdtree\n\n    Returns\n    -------\n    node: int\n        nearest node index\n    distance: float\n        distance to nearest node\n    ";
static PyMethodDef __pyx_mdef_3mbd_11ChRigidBody_1getLocalNearestNode = {"getLocalNearestNode", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_1getLocalNearestNode, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_getLocalNearestNode};
static PyObject *__pyx_pw_3mbd_11ChRigidBody_1getLocalNearestNode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_coords = 0;
  PyObject *__pyx_v_kdtree = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLocalNearestNode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coords,&__pyx_n_s_kdtree,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coords)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kdtree)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getLocalNearestNode", 1, 2, 2, 1); __PYX_ERR(0, 2806, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getLocalNearestNode") < 0)) __PYX_ERR(0, 2806, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_coords = values[0];
    __pyx_v_kdtree = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getLocalNearestNode", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2806, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.getLocalNearestNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_getLocalNearestNode(__pyx_self, __pyx_v_coords, __pyx_v_kdtree);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_getLocalNearestNode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coords, PyObject *__pyx_v_kdtree) {
  PyObject *__pyx_v_distance = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  __Pyx_RefNannySetupContext("getLocalNearestNode", 0);

  /* "mbd/ChRigidBody.pyx":2823
 *     """
 *     # determine local nearest node distance
 *     distance, node = kdtree.query(coords)             # <<<<<<<<<<<<<<
 *     return node, distance
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_kdtree, __pyx_n_s_query); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_coords); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_coords};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2823, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_coords};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2823, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_coords);
      __Pyx_GIVEREF(__pyx_v_coords);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_coords);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2823, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_4 = __pyx_t_5(__pyx_t_3); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_3), 2) < 0) __PYX_ERR(0, 2823, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2823, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_distance = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_node = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "mbd/ChRigidBody.pyx":2824
 *     # determine local nearest node distance
 *     distance, node = kdtree.query(coords)
 *     return node, distance             # <<<<<<<<<<<<<<
 * 
 * cdef pyxGetLocalNearestNode(double[:] coords,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_node);
  __Pyx_GIVEREF(__pyx_v_node);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_node);
  __Pyx_INCREF(__pyx_v_distance);
  __Pyx_GIVEREF(__pyx_v_distance);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_distance);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":2806
 * 
 * 
 * def getLocalNearestNode(coords, kdtree):             # <<<<<<<<<<<<<<
 *     """Finds nearest node to coordinates (local)
 *     Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mbd.ChRigidBody.getLocalNearestNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_distance);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2826
 *     return node, distance
 * 
 * cdef pyxGetLocalNearestNode(double[:] coords,             # <<<<<<<<<<<<<<
 *                             double[:,:] nodeArray,
 *                             int[:] nodeStarOffsets,
 */

static PyObject *__pyx_f_3mbd_11ChRigidBody_pyxGetLocalNearestNode(__Pyx_memviewslice __pyx_v_coords, __Pyx_memviewslice __pyx_v_nodeArray, __Pyx_memviewslice __pyx_v_nodeStarOffsets, __Pyx_memviewslice __pyx_v_nodeStarArray, int __pyx_v_node, CYTHON_UNUSED int __pyx_v_rank) {
  int __pyx_v_nearest_node;
  int __pyx_v_nearest_node0;
  double __pyx_v_dist;
  double __pyx_v_min_dist;
  __Pyx_memviewslice __pyx_v_node_coords = { 0, 0, { 0 }, { 0 }, { 0 } };
  bool __pyx_v_found_node;
  PyObject *__pyx_v_nOffset = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  PyObject *(*__pyx_t_24)(PyObject *);
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  Py_ssize_t __pyx_t_36;
  Py_ssize_t __pyx_t_37;
  Py_ssize_t __pyx_t_38;
  __Pyx_RefNannySetupContext("pyxGetLocalNearestNode", 0);

  /* "mbd/ChRigidBody.pyx":2856
 *     """
 *     # determine local nearest node distance
 *     cdef int nearest_node = copy.deepcopy(node)             # <<<<<<<<<<<<<<
 *     cdef int nearest_node0 = copy.deepcopy(node)
 *     cdef int nOffsets
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_deepcopy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_node); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2856, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2856, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2856, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2856, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nearest_node = __pyx_t_6;

  /* "mbd/ChRigidBody.pyx":2857
 *     # determine local nearest node distance
 *     cdef int nearest_node = copy.deepcopy(node)
 *     cdef int nearest_node0 = copy.deepcopy(node)             # <<<<<<<<<<<<<<
 *     cdef int nOffsets
 *     cdef double dist
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_deepcopy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2857, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2857, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2857, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2857, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2857, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nearest_node0 = __pyx_t_6;

  /* "mbd/ChRigidBody.pyx":2862
 *     cdef double min_dist
 *     cdef double[:] node_coords
 *     cdef bool found_node = False             # <<<<<<<<<<<<<<
 *     node_coords = nodeArray[node]
 *     min_dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\
 */
  __pyx_v_found_node = 0;

  /* "mbd/ChRigidBody.pyx":2863
 *     cdef double[:] node_coords
 *     cdef bool found_node = False
 *     node_coords = nodeArray[node]             # <<<<<<<<<<<<<<
 *     min_dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\
 *                (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\
 */
  __pyx_t_7.data = __pyx_v_nodeArray.data;
  __pyx_t_7.memview = __pyx_v_nodeArray.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_7, 0);
  {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_node;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_nodeArray.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_nodeArray.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2863, __pyx_L1_error)
    }
        __pyx_t_7.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_7.shape[0] = __pyx_v_nodeArray.shape[1];
__pyx_t_7.strides[0] = __pyx_v_nodeArray.strides[1];
    __pyx_t_7.suboffsets[0] = -1;

__pyx_v_node_coords = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "mbd/ChRigidBody.pyx":2864
 *     cdef bool found_node = False
 *     node_coords = nodeArray[node]
 *     min_dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\             # <<<<<<<<<<<<<<
 *                (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\
 *                (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 */
  __pyx_t_8 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_node_coords.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2864, __pyx_L1_error)
  }
  __pyx_t_9 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_v_coords.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2864, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_v_node_coords.shape[0];
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2864, __pyx_L1_error)
  }
  __pyx_t_11 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_v_coords.shape[0];
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2864, __pyx_L1_error)
  }

  /* "mbd/ChRigidBody.pyx":2865
 *     node_coords = nodeArray[node]
 *     min_dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\
 *                (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\             # <<<<<<<<<<<<<<
 *                (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 *     while found_node is False:
 */
  __pyx_t_12 = 1;
  __pyx_t_6 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_v_node_coords.shape[0];
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2865, __pyx_L1_error)
  }
  __pyx_t_13 = 1;
  __pyx_t_6 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_v_coords.shape[0];
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2865, __pyx_L1_error)
  }
  __pyx_t_14 = 1;
  __pyx_t_6 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_v_node_coords.shape[0];
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2865, __pyx_L1_error)
  }
  __pyx_t_15 = 1;
  __pyx_t_6 = -1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_v_coords.shape[0];
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_15 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2865, __pyx_L1_error)
  }

  /* "mbd/ChRigidBody.pyx":2866
 *     min_dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\
 *                (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\
 *                (node_coords[2]-coords[2])*(node_coords[2]-coords[2])             # <<<<<<<<<<<<<<
 *     while found_node is False:
 *         nearest_node0 = nearest_node
 */
  __pyx_t_16 = 2;
  __pyx_t_6 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_v_node_coords.shape[0];
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2866, __pyx_L1_error)
  }
  __pyx_t_17 = 2;
  __pyx_t_6 = -1;
  if (__pyx_t_17 < 0) {
    __pyx_t_17 += __pyx_v_coords.shape[0];
    if (unlikely(__pyx_t_17 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_17 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2866, __pyx_L1_error)
  }
  __pyx_t_18 = 2;
  __pyx_t_6 = -1;
  if (__pyx_t_18 < 0) {
    __pyx_t_18 += __pyx_v_node_coords.shape[0];
    if (unlikely(__pyx_t_18 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_18 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2866, __pyx_L1_error)
  }
  __pyx_t_19 = 2;
  __pyx_t_6 = -1;
  if (__pyx_t_19 < 0) {
    __pyx_t_19 += __pyx_v_coords.shape[0];
    if (unlikely(__pyx_t_19 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_19 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 2866, __pyx_L1_error)
  }

  /* "mbd/ChRigidBody.pyx":2865
 *     node_coords = nodeArray[node]
 *     min_dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\
 *                (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\             # <<<<<<<<<<<<<<
 *                (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 *     while found_node is False:
 */
  __pyx_v_min_dist = (((((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_8 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_9 * __pyx_v_coords.strides[0]) )))) * ((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_10 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_11 * __pyx_v_coords.strides[0]) ))))) + (((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_12 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_13 * __pyx_v_coords.strides[0]) )))) * ((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_14 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_15 * __pyx_v_coords.strides[0]) )))))) + (((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_16 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_17 * __pyx_v_coords.strides[0]) )))) * ((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_18 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_19 * __pyx_v_coords.strides[0]) ))))));

  /* "mbd/ChRigidBody.pyx":2867
 *                (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\
 *                (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 *     while found_node is False:             # <<<<<<<<<<<<<<
 *         nearest_node0 = nearest_node
 *         for nOffset in range(nodeStarOffsets[nearest_node0],
 */
  while (1) {
    __pyx_t_20 = ((__pyx_v_found_node == 0) != 0);
    if (!__pyx_t_20) break;

    /* "mbd/ChRigidBody.pyx":2868
 *                (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 *     while found_node is False:
 *         nearest_node0 = nearest_node             # <<<<<<<<<<<<<<
 *         for nOffset in range(nodeStarOffsets[nearest_node0],
 *                              nodeStarOffsets[nearest_node0+1]):
 */
    __pyx_v_nearest_node0 = __pyx_v_nearest_node;

    /* "mbd/ChRigidBody.pyx":2869
 *     while found_node is False:
 *         nearest_node0 = nearest_node
 *         for nOffset in range(nodeStarOffsets[nearest_node0],             # <<<<<<<<<<<<<<
 *                              nodeStarOffsets[nearest_node0+1]):
 *             node = nodeStarArray[nOffset]
 */
    __pyx_t_21 = __pyx_v_nearest_node0;
    __pyx_t_6 = -1;
    if (__pyx_t_21 < 0) {
      __pyx_t_21 += __pyx_v_nodeStarOffsets.shape[0];
      if (unlikely(__pyx_t_21 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_21 >= __pyx_v_nodeStarOffsets.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 2869, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_nodeStarOffsets.data + __pyx_t_21 * __pyx_v_nodeStarOffsets.strides[0]) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "mbd/ChRigidBody.pyx":2870
 *         nearest_node0 = nearest_node
 *         for nOffset in range(nodeStarOffsets[nearest_node0],
 *                              nodeStarOffsets[nearest_node0+1]):             # <<<<<<<<<<<<<<
 *             node = nodeStarArray[nOffset]
 *             node_coords = nodeArray[node]
 */
    __pyx_t_22 = (__pyx_v_nearest_node0 + 1);
    __pyx_t_6 = -1;
    if (__pyx_t_22 < 0) {
      __pyx_t_22 += __pyx_v_nodeStarOffsets.shape[0];
      if (unlikely(__pyx_t_22 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_22 >= __pyx_v_nodeStarOffsets.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 2870, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_From_int((*((int *) ( /* dim=0 */ (__pyx_v_nodeStarOffsets.data + __pyx_t_22 * __pyx_v_nodeStarOffsets.strides[0]) )))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "mbd/ChRigidBody.pyx":2869
 *     while found_node is False:
 *         nearest_node0 = nearest_node
 *         for nOffset in range(nodeStarOffsets[nearest_node0],             # <<<<<<<<<<<<<<
 *                              nodeStarOffsets[nearest_node0+1]):
 *             node = nodeStarArray[nOffset]
 */
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_23 = 0;
      __pyx_t_24 = NULL;
    } else {
      __pyx_t_23 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_24 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 2869, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_24)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_23 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_23); __Pyx_INCREF(__pyx_t_5); __pyx_t_23++; if (unlikely(0 < 0)) __PYX_ERR(0, 2869, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2869, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_23 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_23); __Pyx_INCREF(__pyx_t_5); __pyx_t_23++; if (unlikely(0 < 0)) __PYX_ERR(0, 2869, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2869, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_24(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2869, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_nOffset, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "mbd/ChRigidBody.pyx":2871
 *         for nOffset in range(nodeStarOffsets[nearest_node0],
 *                              nodeStarOffsets[nearest_node0+1]):
 *             node = nodeStarArray[nOffset]             # <<<<<<<<<<<<<<
 *             node_coords = nodeArray[node]
 *             dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\
 */
      __pyx_t_25 = __Pyx_PyIndex_AsSsize_t(__pyx_v_nOffset); if (unlikely((__pyx_t_25 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2871, __pyx_L1_error)
      __pyx_t_26 = __pyx_t_25;
      __pyx_t_6 = -1;
      if (__pyx_t_26 < 0) {
        __pyx_t_26 += __pyx_v_nodeStarArray.shape[0];
        if (unlikely(__pyx_t_26 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_26 >= __pyx_v_nodeStarArray.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2871, __pyx_L1_error)
      }
      __pyx_v_node = (*((int *) ( /* dim=0 */ (__pyx_v_nodeStarArray.data + __pyx_t_26 * __pyx_v_nodeStarArray.strides[0]) )));

      /* "mbd/ChRigidBody.pyx":2872
 *                              nodeStarOffsets[nearest_node0+1]):
 *             node = nodeStarArray[nOffset]
 *             node_coords = nodeArray[node]             # <<<<<<<<<<<<<<
 *             dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\
 *                    (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\
 */
      __pyx_t_7.data = __pyx_v_nodeArray.data;
      __pyx_t_7.memview = __pyx_v_nodeArray.memview;
      __PYX_INC_MEMVIEW(&__pyx_t_7, 0);
      {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_node;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_nodeArray.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_nodeArray.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2872, __pyx_L1_error)
    }
        __pyx_t_7.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_7.shape[0] = __pyx_v_nodeArray.shape[1];
__pyx_t_7.strides[0] = __pyx_v_nodeArray.strides[1];
    __pyx_t_7.suboffsets[0] = -1;

__PYX_XDEC_MEMVIEW(&__pyx_v_node_coords, 1);
      __pyx_v_node_coords = __pyx_t_7;
      __pyx_t_7.memview = NULL;
      __pyx_t_7.data = NULL;

      /* "mbd/ChRigidBody.pyx":2873
 *             node = nodeStarArray[nOffset]
 *             node_coords = nodeArray[node]
 *             dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\             # <<<<<<<<<<<<<<
 *                    (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\
 *                    (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 */
      __pyx_t_27 = 0;
      __pyx_t_6 = -1;
      if (__pyx_t_27 < 0) {
        __pyx_t_27 += __pyx_v_node_coords.shape[0];
        if (unlikely(__pyx_t_27 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_27 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2873, __pyx_L1_error)
      }
      __pyx_t_28 = 0;
      __pyx_t_6 = -1;
      if (__pyx_t_28 < 0) {
        __pyx_t_28 += __pyx_v_coords.shape[0];
        if (unlikely(__pyx_t_28 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_28 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2873, __pyx_L1_error)
      }
      __pyx_t_29 = 0;
      __pyx_t_6 = -1;
      if (__pyx_t_29 < 0) {
        __pyx_t_29 += __pyx_v_node_coords.shape[0];
        if (unlikely(__pyx_t_29 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_29 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2873, __pyx_L1_error)
      }
      __pyx_t_30 = 0;
      __pyx_t_6 = -1;
      if (__pyx_t_30 < 0) {
        __pyx_t_30 += __pyx_v_coords.shape[0];
        if (unlikely(__pyx_t_30 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_30 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2873, __pyx_L1_error)
      }

      /* "mbd/ChRigidBody.pyx":2874
 *             node_coords = nodeArray[node]
 *             dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\
 *                    (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\             # <<<<<<<<<<<<<<
 *                    (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 *             if dist < min_dist:
 */
      __pyx_t_31 = 1;
      __pyx_t_6 = -1;
      if (__pyx_t_31 < 0) {
        __pyx_t_31 += __pyx_v_node_coords.shape[0];
        if (unlikely(__pyx_t_31 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_31 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2874, __pyx_L1_error)
      }
      __pyx_t_32 = 1;
      __pyx_t_6 = -1;
      if (__pyx_t_32 < 0) {
        __pyx_t_32 += __pyx_v_coords.shape[0];
        if (unlikely(__pyx_t_32 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_32 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2874, __pyx_L1_error)
      }
      __pyx_t_33 = 1;
      __pyx_t_6 = -1;
      if (__pyx_t_33 < 0) {
        __pyx_t_33 += __pyx_v_node_coords.shape[0];
        if (unlikely(__pyx_t_33 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_33 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2874, __pyx_L1_error)
      }
      __pyx_t_34 = 1;
      __pyx_t_6 = -1;
      if (__pyx_t_34 < 0) {
        __pyx_t_34 += __pyx_v_coords.shape[0];
        if (unlikely(__pyx_t_34 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_34 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2874, __pyx_L1_error)
      }

      /* "mbd/ChRigidBody.pyx":2875
 *             dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\
 *                    (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\
 *                    (node_coords[2]-coords[2])*(node_coords[2]-coords[2])             # <<<<<<<<<<<<<<
 *             if dist < min_dist:
 *                 min_dist = dist
 */
      __pyx_t_35 = 2;
      __pyx_t_6 = -1;
      if (__pyx_t_35 < 0) {
        __pyx_t_35 += __pyx_v_node_coords.shape[0];
        if (unlikely(__pyx_t_35 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_35 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2875, __pyx_L1_error)
      }
      __pyx_t_36 = 2;
      __pyx_t_6 = -1;
      if (__pyx_t_36 < 0) {
        __pyx_t_36 += __pyx_v_coords.shape[0];
        if (unlikely(__pyx_t_36 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_36 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2875, __pyx_L1_error)
      }
      __pyx_t_37 = 2;
      __pyx_t_6 = -1;
      if (__pyx_t_37 < 0) {
        __pyx_t_37 += __pyx_v_node_coords.shape[0];
        if (unlikely(__pyx_t_37 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_37 >= __pyx_v_node_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2875, __pyx_L1_error)
      }
      __pyx_t_38 = 2;
      __pyx_t_6 = -1;
      if (__pyx_t_38 < 0) {
        __pyx_t_38 += __pyx_v_coords.shape[0];
        if (unlikely(__pyx_t_38 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_38 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 2875, __pyx_L1_error)
      }

      /* "mbd/ChRigidBody.pyx":2874
 *             node_coords = nodeArray[node]
 *             dist = (node_coords[0]-coords[0])*(node_coords[0]-coords[0])+\
 *                    (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\             # <<<<<<<<<<<<<<
 *                    (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 *             if dist < min_dist:
 */
      __pyx_v_dist = (((((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_27 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_28 * __pyx_v_coords.strides[0]) )))) * ((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_29 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_30 * __pyx_v_coords.strides[0]) ))))) + (((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_31 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_32 * __pyx_v_coords.strides[0]) )))) * ((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_33 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_34 * __pyx_v_coords.strides[0]) )))))) + (((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_35 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_36 * __pyx_v_coords.strides[0]) )))) * ((*((double *) ( /* dim=0 */ (__pyx_v_node_coords.data + __pyx_t_37 * __pyx_v_node_coords.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_38 * __pyx_v_coords.strides[0]) ))))));

      /* "mbd/ChRigidBody.pyx":2876
 *                    (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\
 *                    (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 *             if dist < min_dist:             # <<<<<<<<<<<<<<
 *                 min_dist = dist
 *                 nearest_node = node
 */
      __pyx_t_20 = ((__pyx_v_dist < __pyx_v_min_dist) != 0);
      if (__pyx_t_20) {

        /* "mbd/ChRigidBody.pyx":2877
 *                    (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 *             if dist < min_dist:
 *                 min_dist = dist             # <<<<<<<<<<<<<<
 *                 nearest_node = node
 *         if nearest_node0 == nearest_node:
 */
        __pyx_v_min_dist = __pyx_v_dist;

        /* "mbd/ChRigidBody.pyx":2878
 *             if dist < min_dist:
 *                 min_dist = dist
 *                 nearest_node = node             # <<<<<<<<<<<<<<
 *         if nearest_node0 == nearest_node:
 *             found_node = True
 */
        __pyx_v_nearest_node = __pyx_v_node;

        /* "mbd/ChRigidBody.pyx":2876
 *                    (node_coords[1]-coords[1])*(node_coords[1]-coords[1])+\
 *                    (node_coords[2]-coords[2])*(node_coords[2]-coords[2])
 *             if dist < min_dist:             # <<<<<<<<<<<<<<
 *                 min_dist = dist
 *                 nearest_node = node
 */
      }

      /* "mbd/ChRigidBody.pyx":2869
 *     while found_node is False:
 *         nearest_node0 = nearest_node
 *         for nOffset in range(nodeStarOffsets[nearest_node0],             # <<<<<<<<<<<<<<
 *                              nodeStarOffsets[nearest_node0+1]):
 *             node = nodeStarArray[nOffset]
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "mbd/ChRigidBody.pyx":2879
 *                 min_dist = dist
 *                 nearest_node = node
 *         if nearest_node0 == nearest_node:             # <<<<<<<<<<<<<<
 *             found_node = True
 *     return nearest_node, dist
 */
    __pyx_t_20 = ((__pyx_v_nearest_node0 == __pyx_v_nearest_node) != 0);
    if (__pyx_t_20) {

      /* "mbd/ChRigidBody.pyx":2880
 *                 nearest_node = node
 *         if nearest_node0 == nearest_node:
 *             found_node = True             # <<<<<<<<<<<<<<
 *     return nearest_node, dist
 * 
 */
      __pyx_v_found_node = 1;

      /* "mbd/ChRigidBody.pyx":2879
 *                 min_dist = dist
 *                 nearest_node = node
 *         if nearest_node0 == nearest_node:             # <<<<<<<<<<<<<<
 *             found_node = True
 *     return nearest_node, dist
 */
    }
  }

  /* "mbd/ChRigidBody.pyx":2881
 *         if nearest_node0 == nearest_node:
 *             found_node = True
 *     return nearest_node, dist             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_nearest_node); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":2826
 *     return node, distance
 * 
 * cdef pyxGetLocalNearestNode(double[:] coords,             # <<<<<<<<<<<<<<
 *                             double[:,:] nodeArray,
 *                             int[:] nodeStarOffsets,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_AddTraceback("mbd.ChRigidBody.pyxGetLocalNearestNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_node_coords, 1);
  __Pyx_XDECREF(__pyx_v_nOffset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2884
 * 
 * 
 * def getLocalElement(femSpace, coords, node):             # <<<<<<<<<<<<<<
 *     """Given coordinates and its nearest node, determine if it is on a
 *     local element.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_3getLocalElement(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_2getLocalElement[] = "Given coordinates and its nearest node, determine if it is on a\n    local element.\n\n    Parameters\n    ----------\n    femSpace: object\n        finite element space\n    coords: array_like\n        coordinates from which to element\n    node: int\n        nearest node index\n\n    Returns\n    -------\n    eN: int or None\n        local index of element (None if not found)\n    ";
static PyMethodDef __pyx_mdef_3mbd_11ChRigidBody_3getLocalElement = {"getLocalElement", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_3getLocalElement, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_2getLocalElement};
static PyObject *__pyx_pw_3mbd_11ChRigidBody_3getLocalElement(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_femSpace = 0;
  PyObject *__pyx_v_coords = 0;
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLocalElement (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_femSpace,&__pyx_n_s_coords,&__pyx_n_s_node,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_femSpace)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coords)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getLocalElement", 1, 3, 3, 1); __PYX_ERR(0, 2884, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getLocalElement", 1, 3, 3, 2); __PYX_ERR(0, 2884, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getLocalElement") < 0)) __PYX_ERR(0, 2884, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_femSpace = values[0];
    __pyx_v_coords = values[1];
    __pyx_v_node = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getLocalElement", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2884, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.getLocalElement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_2getLocalElement(__pyx_self, __pyx_v_femSpace, __pyx_v_coords, __pyx_v_node);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_2getLocalElement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_femSpace, PyObject *__pyx_v_coords, PyObject *__pyx_v_node) {
  PyObject *__pyx_v_patchBoundaryNodes = NULL;
  PyObject *__pyx_v_checkedElements = NULL;
  PyObject *__pyx_v_eOffset = NULL;
  PyObject *__pyx_v_eN = NULL;
  PyObject *__pyx_v_xi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("getLocalElement", 0);
  __Pyx_INCREF(__pyx_v_node);

  /* "mbd/ChRigidBody.pyx":2902
 *         local index of element (None if not found)
 *     """
 *     patchBoundaryNodes=set()             # <<<<<<<<<<<<<<
 *     checkedElements=[]
 *     # nodeElementOffsets give the indices to get the elements sharing the node
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_patchBoundaryNodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2903
 *     """
 *     patchBoundaryNodes=set()
 *     checkedElements=[]             # <<<<<<<<<<<<<<
 *     # nodeElementOffsets give the indices to get the elements sharing the node
 *     #log Profiling.logEvent("Getting Local Element")
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_checkedElements = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2906
 *     # nodeElementOffsets give the indices to get the elements sharing the node
 *     #log Profiling.logEvent("Getting Local Element")
 *     if node+1 < len(femSpace.mesh.nodeElementOffsets):             # <<<<<<<<<<<<<<
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 */
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_node, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nodeElementOffsets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 2906, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2906, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2906, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "mbd/ChRigidBody.pyx":2907
 *     #log Profiling.logEvent("Getting Local Element")
 *     if node+1 < len(femSpace.mesh.nodeElementOffsets):
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):             # <<<<<<<<<<<<<<
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             checkedElements.append(eN)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nodeElementOffsets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_GetItem(__pyx_t_3, __pyx_v_node); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_nodeElementOffsets); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_node, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_3 = __pyx_t_6; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2907, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2907, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2907, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2907, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2907, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2907, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_eOffset, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "mbd/ChRigidBody.pyx":2908
 *     if node+1 < len(femSpace.mesh.nodeElementOffsets):
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]             # <<<<<<<<<<<<<<
 *             checkedElements.append(eN)
 *             # union of set
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_nodeElementsArray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_GetItem(__pyx_t_2, __pyx_v_eOffset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_eN, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "mbd/ChRigidBody.pyx":2909
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             checkedElements.append(eN)             # <<<<<<<<<<<<<<
 *             # union of set
 *             patchBoundaryNodes|=set(femSpace.mesh.elementNodesArray[eN])
 */
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_checkedElements, __pyx_v_eN); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 2909, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":2911
 *             checkedElements.append(eN)
 *             # union of set
 *             patchBoundaryNodes|=set(femSpace.mesh.elementNodesArray[eN])             # <<<<<<<<<<<<<<
 *             # evaluate the inverse map for element eN (global to local)
 *             xi = femSpace.elementMaps.getInverseValue(eN, coords)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2911, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_elementNodesArray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2911, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_GetItem(__pyx_t_2, __pyx_v_eN); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2911, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PySet_New(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2911, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_InPlaceOr(__pyx_v_patchBoundaryNodes, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2911, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_patchBoundaryNodes, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "mbd/ChRigidBody.pyx":2913
 *             patchBoundaryNodes|=set(femSpace.mesh.elementNodesArray[eN])
 *             # evaluate the inverse map for element eN (global to local)
 *             xi = femSpace.elementMaps.getInverseValue(eN, coords)             # <<<<<<<<<<<<<<
 *             #J = femSpace.elementMaps.getJacobianValues(eN, )
 *             # query whether xi lies within the reference element
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_elementMaps); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2913, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getInverseValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2913, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_eN, __pyx_v_coords};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2913, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_eN, __pyx_v_coords};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2913, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2913, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_2) {
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2); __pyx_t_2 = NULL;
        }
        __Pyx_INCREF(__pyx_v_eN);
        __Pyx_GIVEREF(__pyx_v_eN);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_eN);
        __Pyx_INCREF(__pyx_v_coords);
        __Pyx_GIVEREF(__pyx_v_coords);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_coords);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2913, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_xi, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "mbd/ChRigidBody.pyx":2916
 *             #J = femSpace.elementMaps.getJacobianValues(eN, )
 *             # query whether xi lies within the reference element
 *             if femSpace.elementMaps.referenceElement.onElement(xi):             # <<<<<<<<<<<<<<
 *                 return eN
 *     else:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_elementMaps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_referenceElement); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_onElement); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_10) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_xi); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2916, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_xi};
          __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2916, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_6);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_xi};
          __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2916, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_6);
        } else
        #endif
        {
          __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2916, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_10); __pyx_t_10 = NULL;
          __Pyx_INCREF(__pyx_v_xi);
          __Pyx_GIVEREF(__pyx_v_xi);
          PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_xi);
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2916, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2916, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_5) {

        /* "mbd/ChRigidBody.pyx":2917
 *             # query whether xi lies within the reference element
 *             if femSpace.elementMaps.referenceElement.onElement(xi):
 *                 return eN             # <<<<<<<<<<<<<<
 *     else:
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node]):
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_eN);
        __pyx_r = __pyx_v_eN;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "mbd/ChRigidBody.pyx":2916
 *             #J = femSpace.elementMaps.getJacobianValues(eN, )
 *             # query whether xi lies within the reference element
 *             if femSpace.elementMaps.referenceElement.onElement(xi):             # <<<<<<<<<<<<<<
 *                 return eN
 *     else:
 */
      }

      /* "mbd/ChRigidBody.pyx":2907
 *     #log Profiling.logEvent("Getting Local Element")
 *     if node+1 < len(femSpace.mesh.nodeElementOffsets):
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):             # <<<<<<<<<<<<<<
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             checkedElements.append(eN)
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":2906
 *     # nodeElementOffsets give the indices to get the elements sharing the node
 *     #log Profiling.logEvent("Getting Local Element")
 *     if node+1 < len(femSpace.mesh.nodeElementOffsets):             # <<<<<<<<<<<<<<
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2919
 *                 return eN
 *     else:
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node]):             # <<<<<<<<<<<<<<
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             checkedElements.append(eN)
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_nodeElementOffsets); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(__pyx_t_6, __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_6 = __pyx_t_3; __Pyx_INCREF(__pyx_t_6); __pyx_t_4 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2919, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2919, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2919, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2919, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2919, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_6);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2919, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_eOffset, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":2920
 *     else:
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]             # <<<<<<<<<<<<<<
 *             checkedElements.append(eN)
 *             # union of set
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_nodeElementsArray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_v_eOffset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_eN, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":2921
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             checkedElements.append(eN)             # <<<<<<<<<<<<<<
 *             # union of set
 *             patchBoundaryNodes|=set(femSpace.mesh.elementNodesArray[eN])
 */
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_checkedElements, __pyx_v_eN); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 2921, __pyx_L1_error)

      /* "mbd/ChRigidBody.pyx":2923
 *             checkedElements.append(eN)
 *             # union of set
 *             patchBoundaryNodes|=set(femSpace.mesh.elementNodesArray[eN])             # <<<<<<<<<<<<<<
 *             # evaluate the inverse map for element eN (global to local)
 *             xi = femSpace.elementMaps.getInverseValue(eN, coords)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_elementNodesArray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_v_eN); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_InPlaceOr(__pyx_v_patchBoundaryNodes, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_patchBoundaryNodes, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":2925
 *             patchBoundaryNodes|=set(femSpace.mesh.elementNodesArray[eN])
 *             # evaluate the inverse map for element eN (global to local)
 *             xi = femSpace.elementMaps.getInverseValue(eN, coords)             # <<<<<<<<<<<<<<
 *             #J = femSpace.elementMaps.getJacobianValues(eN, )
 *             # query whether xi lies within the reference element
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_elementMaps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_getInverseValue); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_eN, __pyx_v_coords};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2925, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_eN, __pyx_v_coords};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2925, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2925, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(__pyx_v_eN);
        __Pyx_GIVEREF(__pyx_v_eN);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_eN);
        __Pyx_INCREF(__pyx_v_coords);
        __Pyx_GIVEREF(__pyx_v_coords);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_coords);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2925, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_xi, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "mbd/ChRigidBody.pyx":2928
 *             #J = femSpace.elementMaps.getJacobianValues(eN, )
 *             # query whether xi lies within the reference element
 *             if femSpace.elementMaps.referenceElement.onElement(xi):             # <<<<<<<<<<<<<<
 *                 return eN
 *     # extra loop if case coords is in neighbour element
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_elementMaps); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_referenceElement); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_onElement); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_10) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_xi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2928, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_xi};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2928, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_xi};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2928, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2928, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10); __pyx_t_10 = NULL;
          __Pyx_INCREF(__pyx_v_xi);
          __Pyx_GIVEREF(__pyx_v_xi);
          PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_xi);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2928, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2928, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "mbd/ChRigidBody.pyx":2929
 *             # query whether xi lies within the reference element
 *             if femSpace.elementMaps.referenceElement.onElement(xi):
 *                 return eN             # <<<<<<<<<<<<<<
 *     # extra loop if case coords is in neighbour element
 *     for node in patchBoundaryNodes:
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_eN);
        __pyx_r = __pyx_v_eN;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L0;

        /* "mbd/ChRigidBody.pyx":2928
 *             #J = femSpace.elementMaps.getJacobianValues(eN, )
 *             # query whether xi lies within the reference element
 *             if femSpace.elementMaps.referenceElement.onElement(xi):             # <<<<<<<<<<<<<<
 *                 return eN
 *     # extra loop if case coords is in neighbour element
 */
      }

      /* "mbd/ChRigidBody.pyx":2919
 *                 return eN
 *     else:
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node]):             # <<<<<<<<<<<<<<
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             checkedElements.append(eN)
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2931
 *                 return eN
 *     # extra loop if case coords is in neighbour element
 *     for node in patchBoundaryNodes:             # <<<<<<<<<<<<<<
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 */
  __pyx_t_6 = PyObject_GetIter(__pyx_v_patchBoundaryNodes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2931, __pyx_L1_error)
  for (;;) {
    {
      __pyx_t_3 = __pyx_t_7(__pyx_t_6);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2931, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_DECREF_SET(__pyx_v_node, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "mbd/ChRigidBody.pyx":2932
 *     # extra loop if case coords is in neighbour element
 *     for node in patchBoundaryNodes:
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):             # <<<<<<<<<<<<<<
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             if eN not in checkedElements:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_nodeElementOffsets); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nodeElementOffsets); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_node, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_10);
    __pyx_t_3 = 0;
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
      __pyx_t_2 = __pyx_t_10; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2932, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2932, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_10); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2932, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2932, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_10); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2932, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2932, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_11(__pyx_t_2);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2932, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_eOffset, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "mbd/ChRigidBody.pyx":2933
 *     for node in patchBoundaryNodes:
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]             # <<<<<<<<<<<<<<
 *             if eN not in checkedElements:
 *                 checkedElements.append(eN)
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_mesh); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_nodeElementsArray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyObject_GetItem(__pyx_t_3, __pyx_v_eOffset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_eN, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "mbd/ChRigidBody.pyx":2934
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             if eN not in checkedElements:             # <<<<<<<<<<<<<<
 *                 checkedElements.append(eN)
 *                 # evaluate the inverse map for element eN
 */
      __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_eN, __pyx_v_checkedElements, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2934, __pyx_L1_error)
      __pyx_t_12 = (__pyx_t_5 != 0);
      if (__pyx_t_12) {

        /* "mbd/ChRigidBody.pyx":2935
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             if eN not in checkedElements:
 *                 checkedElements.append(eN)             # <<<<<<<<<<<<<<
 *                 # evaluate the inverse map for element eN
 *                 xi = femSpace.elementMaps.getInverseValue(eN, coords)
 */
        __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_checkedElements, __pyx_v_eN); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 2935, __pyx_L1_error)

        /* "mbd/ChRigidBody.pyx":2937
 *                 checkedElements.append(eN)
 *                 # evaluate the inverse map for element eN
 *                 xi = femSpace.elementMaps.getInverseValue(eN, coords)             # <<<<<<<<<<<<<<
 *                 # query whether xi lies within the reference element
 *                 if femSpace.elementMaps.referenceElement.onElement(xi):
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_elementMaps); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2937, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_getInverseValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2937, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_9 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_eN, __pyx_v_coords};
          __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2937, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_10);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_eN, __pyx_v_coords};
          __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2937, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_10);
        } else
        #endif
        {
          __pyx_t_13 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2937, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          if (__pyx_t_3) {
            __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_3); __pyx_t_3 = NULL;
          }
          __Pyx_INCREF(__pyx_v_eN);
          __Pyx_GIVEREF(__pyx_v_eN);
          PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_9, __pyx_v_eN);
          __Pyx_INCREF(__pyx_v_coords);
          __Pyx_GIVEREF(__pyx_v_coords);
          PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_9, __pyx_v_coords);
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_13, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2937, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_xi, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "mbd/ChRigidBody.pyx":2939
 *                 xi = femSpace.elementMaps.getInverseValue(eN, coords)
 *                 # query whether xi lies within the reference element
 *                 if femSpace.elementMaps.referenceElement.onElement(xi):             # <<<<<<<<<<<<<<
 *                     return eN
 *     # no elements found
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_femSpace, __pyx_n_s_elementMaps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2939, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_referenceElement); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2939, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_onElement); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2939, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        if (!__pyx_t_13) {
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_xi); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2939, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_1)) {
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_v_xi};
            __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2939, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_10);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_v_xi};
            __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2939, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_10);
          } else
          #endif
          {
            __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2939, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_13); __pyx_t_13 = NULL;
            __Pyx_INCREF(__pyx_v_xi);
            __Pyx_GIVEREF(__pyx_v_xi);
            PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_xi);
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2939, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 2939, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_12) {

          /* "mbd/ChRigidBody.pyx":2940
 *                 # query whether xi lies within the reference element
 *                 if femSpace.elementMaps.referenceElement.onElement(xi):
 *                     return eN             # <<<<<<<<<<<<<<
 *     # no elements found
 *     return None
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_v_eN);
          __pyx_r = __pyx_v_eN;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L0;

          /* "mbd/ChRigidBody.pyx":2939
 *                 xi = femSpace.elementMaps.getInverseValue(eN, coords)
 *                 # query whether xi lies within the reference element
 *                 if femSpace.elementMaps.referenceElement.onElement(xi):             # <<<<<<<<<<<<<<
 *                     return eN
 *     # no elements found
 */
        }

        /* "mbd/ChRigidBody.pyx":2934
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             if eN not in checkedElements:             # <<<<<<<<<<<<<<
 *                 checkedElements.append(eN)
 *                 # evaluate the inverse map for element eN
 */
      }

      /* "mbd/ChRigidBody.pyx":2932
 *     # extra loop if case coords is in neighbour element
 *     for node in patchBoundaryNodes:
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):             # <<<<<<<<<<<<<<
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 *             if eN not in checkedElements:
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "mbd/ChRigidBody.pyx":2931
 *                 return eN
 *     # extra loop if case coords is in neighbour element
 *     for node in patchBoundaryNodes:             # <<<<<<<<<<<<<<
 *         for eOffset in range(femSpace.mesh.nodeElementOffsets[node], femSpace.mesh.nodeElementOffsets[node + 1]):
 *             eN = femSpace.mesh.nodeElementsArray[eOffset]
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "mbd/ChRigidBody.pyx":2942
 *                     return eN
 *     # no elements found
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":2884
 * 
 * 
 * def getLocalElement(femSpace, coords, node):             # <<<<<<<<<<<<<<
 *     """Given coordinates and its nearest node, determine if it is on a
 *     local element.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("mbd.ChRigidBody.getLocalElement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patchBoundaryNodes);
  __Pyx_XDECREF(__pyx_v_checkedElements);
  __Pyx_XDECREF(__pyx_v_eOffset);
  __Pyx_XDECREF(__pyx_v_eN);
  __Pyx_XDECREF(__pyx_v_xi);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2955
 *         ProtChSystem ProtChSystem
 * 
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   system):
 *         self.ProtChSystem = system
 */

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_system = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_system,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_system)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2955, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_system = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2955, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChAddedMass.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass___cinit__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self), __pyx_v_system);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass___cinit__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self, PyObject *__pyx_v_system) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "mbd/ChRigidBody.pyx":2957
 *     def __cinit__(self,
 *                   system):
 *         self.ProtChSystem = system             # <<<<<<<<<<<<<<
 * 
 *     def attachModel(self, model, ar):
 */
  if (!(likely(((__pyx_v_system) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_system, __pyx_ptype_3mbd_11ChRigidBody_ProtChSystem))))) __PYX_ERR(0, 2957, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_system;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ProtChSystem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_v_self->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mbd/ChRigidBody.pyx":2955
 *         ProtChSystem ProtChSystem
 * 
 *     def __cinit__(self,             # <<<<<<<<<<<<<<
 *                   system):
 *         self.ProtChSystem = system
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChAddedMass.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2959
 *         self.ProtChSystem = system
 * 
 *     def attachModel(self, model, ar):             # <<<<<<<<<<<<<<
 *         """Attaches Proteus model to auxiliary variable
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_3attachModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_15ProtChAddedMass_2attachModel[] = "Attaches Proteus model to auxiliary variable\n        ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_3attachModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_model = 0;
  CYTHON_UNUSED PyObject *__pyx_v_ar = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachModel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_model,&__pyx_n_s_ar,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_model)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ar)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("attachModel", 1, 2, 2, 1); __PYX_ERR(0, 2959, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "attachModel") < 0)) __PYX_ERR(0, 2959, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_model = values[0];
    __pyx_v_ar = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("attachModel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2959, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChAddedMass.attachModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_2attachModel(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self), __pyx_v_model, __pyx_v_ar);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_2attachModel(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self, PyObject *__pyx_v_model, CYTHON_UNUSED PyObject *__pyx_v_ar) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachModel", 0);

  /* "mbd/ChRigidBody.pyx":2962
 *         """Attaches Proteus model to auxiliary variable
 *         """
 *         self.model = model             # <<<<<<<<<<<<<<
 *         # attaching model to ProtChSystem to access Aij
 *         self.ProtChSystem.model_addedmass = model
 */
  __Pyx_INCREF(__pyx_v_model);
  __Pyx_GIVEREF(__pyx_v_model);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = __pyx_v_model;

  /* "mbd/ChRigidBody.pyx":2964
 *         self.model = model
 *         # attaching model to ProtChSystem to access Aij
 *         self.ProtChSystem.model_addedmass = model             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(__pyx_v_model);
  __Pyx_GIVEREF(__pyx_v_model);
  __Pyx_GOTREF(__pyx_v_self->ProtChSystem->model_addedmass);
  __Pyx_DECREF(__pyx_v_self->ProtChSystem->model_addedmass);
  __pyx_v_self->ProtChSystem->model_addedmass = __pyx_v_model;

  /* "mbd/ChRigidBody.pyx":2965
 *         # attaching model to ProtChSystem to access Aij
 *         self.ProtChSystem.model_addedmass = model
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def attachAuxiliaryVariables(self,avDict):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "mbd/ChRigidBody.pyx":2959
 *         self.ProtChSystem = system
 * 
 *     def attachModel(self, model, ar):             # <<<<<<<<<<<<<<
 *         """Attaches Proteus model to auxiliary variable
 *         """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2967
 *         return self
 * 
 *     def attachAuxiliaryVariables(self,avDict):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5attachAuxiliaryVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_avDict); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5attachAuxiliaryVariables(PyObject *__pyx_v_self, PyObject *__pyx_v_avDict) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachAuxiliaryVariables (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_4attachAuxiliaryVariables(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self), ((PyObject *)__pyx_v_avDict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_4attachAuxiliaryVariables(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_avDict) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachAuxiliaryVariables", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2970
 *         pass
 * 
 *     def calculate_init(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_7calculate_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_7calculate_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_init (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_6calculate_init(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_6calculate_init(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_init", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2973
 *         pass
 * 
 *     def calculate(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_9calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_9calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_8calculate(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_8calculate(CYTHON_UNUSED struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2952
 *     """
 *     cdef public:
 *         object model             # <<<<<<<<<<<<<<
 *         ProtChSystem ProtChSystem
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5model_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_5model___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_5model___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->model);
  __pyx_r = __pyx_v_self->model;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_5model_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_5model_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5model_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5model_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_5model_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_5model_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(__pyx_v_self->model);
  __pyx_v_self->model = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2953
 *     cdef public:
 *         object model
 *         ProtChSystem ProtChSystem             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem___get__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem___get__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_r = ((PyObject *)__pyx_v_self->ProtChSystem);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_2__set__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_2__set__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3mbd_11ChRigidBody_ProtChSystem))))) __PYX_ERR(0, 2953, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ProtChSystem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_v_self->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.ProtChAddedMass.ProtChSystem.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_4__del__(((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_4__del__(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ProtChSystem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ProtChSystem));
  __pyx_v_self->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2977
 * 
 * 
 * cpdef void attachNodeToNode(ProtChMoorings cable1, int node1, ProtChMoorings cable2, int node2):             # <<<<<<<<<<<<<<
 *     if cable1.beam_type == "CableANCF":
 *         cppAttachNodeToNodeFEAxyzD(cable1.thisptr, node1, cable2.thisptr, node2)
 */

static PyObject *__pyx_pw_3mbd_11ChRigidBody_5attachNodeToNode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static void __pyx_f_3mbd_11ChRigidBody_attachNodeToNode(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_cable1, int __pyx_v_node1, struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_cable2, int __pyx_v_node2, CYTHON_UNUSED int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("attachNodeToNode", 0);

  /* "mbd/ChRigidBody.pyx":2978
 * 
 * cpdef void attachNodeToNode(ProtChMoorings cable1, int node1, ProtChMoorings cable2, int node2):
 *     if cable1.beam_type == "CableANCF":             # <<<<<<<<<<<<<<
 *         cppAttachNodeToNodeFEAxyzD(cable1.thisptr, node1, cable2.thisptr, node2)
 *     elif cable1.beam_type == "BeamEuler":
 */
  __pyx_t_1 = ((__pyx_v_cable1->beam_type == ((char *)"CableANCF")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2979
 * cpdef void attachNodeToNode(ProtChMoorings cable1, int node1, ProtChMoorings cable2, int node2):
 *     if cable1.beam_type == "CableANCF":
 *         cppAttachNodeToNodeFEAxyzD(cable1.thisptr, node1, cable2.thisptr, node2)             # <<<<<<<<<<<<<<
 *     elif cable1.beam_type == "BeamEuler":
 *         cppAttachNodeToNodeFEAxyzrot(cable1.thisptr, node1, cable2.thisptr, node2)
 */
    cppAttachNodeToNodeFEAxyzD(__pyx_v_cable1->thisptr, __pyx_v_node1, __pyx_v_cable2->thisptr, __pyx_v_node2);

    /* "mbd/ChRigidBody.pyx":2978
 * 
 * cpdef void attachNodeToNode(ProtChMoorings cable1, int node1, ProtChMoorings cable2, int node2):
 *     if cable1.beam_type == "CableANCF":             # <<<<<<<<<<<<<<
 *         cppAttachNodeToNodeFEAxyzD(cable1.thisptr, node1, cable2.thisptr, node2)
 *     elif cable1.beam_type == "BeamEuler":
 */
    goto __pyx_L3;
  }

  /* "mbd/ChRigidBody.pyx":2980
 *     if cable1.beam_type == "CableANCF":
 *         cppAttachNodeToNodeFEAxyzD(cable1.thisptr, node1, cable2.thisptr, node2)
 *     elif cable1.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *         cppAttachNodeToNodeFEAxyzrot(cable1.thisptr, node1, cable2.thisptr, node2)
 * 
 */
  __pyx_t_1 = ((__pyx_v_cable1->beam_type == ((char *)"BeamEuler")) != 0);
  if (__pyx_t_1) {

    /* "mbd/ChRigidBody.pyx":2981
 *         cppAttachNodeToNodeFEAxyzD(cable1.thisptr, node1, cable2.thisptr, node2)
 *     elif cable1.beam_type == "BeamEuler":
 *         cppAttachNodeToNodeFEAxyzrot(cable1.thisptr, node1, cable2.thisptr, node2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    cppAttachNodeToNodeFEAxyzrot(__pyx_v_cable1->thisptr, __pyx_v_node1, __pyx_v_cable2->thisptr, __pyx_v_node2);

    /* "mbd/ChRigidBody.pyx":2980
 *     if cable1.beam_type == "CableANCF":
 *         cppAttachNodeToNodeFEAxyzD(cable1.thisptr, node1, cable2.thisptr, node2)
 *     elif cable1.beam_type == "BeamEuler":             # <<<<<<<<<<<<<<
 *         cppAttachNodeToNodeFEAxyzrot(cable1.thisptr, node1, cable2.thisptr, node2)
 * 
 */
  }
  __pyx_L3:;

  /* "mbd/ChRigidBody.pyx":2977
 * 
 * 
 * cpdef void attachNodeToNode(ProtChMoorings cable1, int node1, ProtChMoorings cable2, int node2):             # <<<<<<<<<<<<<<
 *     if cable1.beam_type == "CableANCF":
 *         cppAttachNodeToNodeFEAxyzD(cable1.thisptr, node1, cable2.thisptr, node2)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_5attachNodeToNode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3mbd_11ChRigidBody_5attachNodeToNode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_cable1 = 0;
  int __pyx_v_node1;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_cable2 = 0;
  int __pyx_v_node2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachNodeToNode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cable1,&__pyx_n_s_node1,&__pyx_n_s_cable2,&__pyx_n_s_node2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cable1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_node1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("attachNodeToNode", 1, 4, 4, 1); __PYX_ERR(0, 2977, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cable2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("attachNodeToNode", 1, 4, 4, 2); __PYX_ERR(0, 2977, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_node2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("attachNodeToNode", 1, 4, 4, 3); __PYX_ERR(0, 2977, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "attachNodeToNode") < 0)) __PYX_ERR(0, 2977, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_cable1 = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)values[0]);
    __pyx_v_node1 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_node1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2977, __pyx_L3_error)
    __pyx_v_cable2 = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)values[2]);
    __pyx_v_node2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_node2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2977, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("attachNodeToNode", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2977, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.attachNodeToNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cable1), __pyx_ptype_3mbd_11ChRigidBody_ProtChMoorings, 1, "cable1", 0))) __PYX_ERR(0, 2977, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cable2), __pyx_ptype_3mbd_11ChRigidBody_ProtChMoorings, 1, "cable2", 0))) __PYX_ERR(0, 2977, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_4attachNodeToNode(__pyx_self, __pyx_v_cable1, __pyx_v_node1, __pyx_v_cable2, __pyx_v_node2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_4attachNodeToNode(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_cable1, int __pyx_v_node1, struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *__pyx_v_cable2, int __pyx_v_node2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("attachNodeToNode", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_3mbd_11ChRigidBody_attachNodeToNode(__pyx_v_cable1, __pyx_v_node1, __pyx_v_cable2, __pyx_v_node2, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.attachNodeToNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mbd/ChRigidBody.pyx":2984
 * 
 * 
 * cpdef linkBodies(ProtChBody body1,             # <<<<<<<<<<<<<<
 *                  ProtChBody body2,
 *                  ProtChSystem system,
 */

static PyObject *__pyx_pw_3mbd_11ChRigidBody_7linkBodies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3mbd_11ChRigidBody_linkBodies(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body1, struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body2, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys *__pyx_v_coordsys, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_3mbd_11ChRigidBody_linkBodies *__pyx_optional_args) {
  double __pyx_v_limit_X = ((double)0.);
  double __pyx_v_limit_Y = ((double)0.);
  double __pyx_v_limit_Z = ((double)0.);
  double __pyx_v_limit_Rx = ((double)0.);
  double __pyx_v_limit_Ry = ((double)0.);
  double __pyx_v_limit_Rz = ((double)0.);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("linkBodies", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_limit_X = __pyx_optional_args->limit_X;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_limit_Y = __pyx_optional_args->limit_Y;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_limit_Z = __pyx_optional_args->limit_Z;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_limit_Rx = __pyx_optional_args->limit_Rx;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_limit_Ry = __pyx_optional_args->limit_Ry;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_limit_Rz = __pyx_optional_args->limit_Rz;
              }
            }
          }
        }
      }
    }
  }

  /* "mbd/ChRigidBody.pyx":3020
 *         Limit rotation around z axis
 *     """
 *     ChLinkLockBodies(body1.ChBody.sharedptr_chbody,             # <<<<<<<<<<<<<<
 *                      body2.ChBody.sharedptr_chbody,
 *                      system.thisptr.system,
 */
  ChLinkLockBodies(((std::shared_ptr<ChBody> )__pyx_v_body1->ChBody->__pyx_base.sharedptr_chbody), ((std::shared_ptr<ChBody> )__pyx_v_body2->ChBody->__pyx_base.sharedptr_chbody), __pyx_v_system->thisptr->system, ((ChCoordsys<double> )__pyx_v_coordsys->cppobj), __pyx_v_limit_X, __pyx_v_limit_Y, __pyx_v_limit_Z, __pyx_v_limit_Rx, __pyx_v_limit_Ry, __pyx_v_limit_Rz);

  /* "mbd/ChRigidBody.pyx":2984
 * 
 * 
 * cpdef linkBodies(ProtChBody body1,             # <<<<<<<<<<<<<<
 *                  ProtChBody body2,
 *                  ProtChSystem system,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3mbd_11ChRigidBody_7linkBodies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3mbd_11ChRigidBody_6linkBodies[] = "Create a link between 2 bodies.\n    Master body is body2.\n\n    Parameters:\n    -----------\n    body1: ProtChBody\n        Instance of first body\n    body2: ProtChBody\n        Instance of second body\n    body2: ProtChSystem\n        Instance of system to add link\n    coordsys: proteus.mbd.pyChronoCore.ChCoordsys\n        Coordinate system of link\n    limit_X: double\n        Limit in x direction\n    limit_Y: double\n        Limit in y direction\n    limit_Z: double\n        Limit in z direction\n    limit_Rx: double\n        Limit rotation around x axis\n    limit_Ry: double\n        Limit rotation around y axis\n    limit_Rz: double\n        Limit rotation around z axis\n    ";
static PyObject *__pyx_pw_3mbd_11ChRigidBody_7linkBodies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body1 = 0;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body2 = 0;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system = 0;
  struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys *__pyx_v_coordsys = 0;
  double __pyx_v_limit_X;
  double __pyx_v_limit_Y;
  double __pyx_v_limit_Z;
  double __pyx_v_limit_Rx;
  double __pyx_v_limit_Ry;
  double __pyx_v_limit_Rz;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("linkBodies (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_body1,&__pyx_n_s_body2,&__pyx_n_s_system,&__pyx_n_s_coordsys,&__pyx_n_s_limit_X,&__pyx_n_s_limit_Y,&__pyx_n_s_limit_Z,&__pyx_n_s_limit_Rx,&__pyx_n_s_limit_Ry,&__pyx_n_s_limit_Rz,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_body1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_body2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("linkBodies", 0, 4, 10, 1); __PYX_ERR(0, 2984, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_system)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("linkBodies", 0, 4, 10, 2); __PYX_ERR(0, 2984, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_coordsys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("linkBodies", 0, 4, 10, 3); __PYX_ERR(0, 2984, __pyx_L3_error)
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_limit_X);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_limit_Y);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_limit_Z);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_limit_Rx);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_limit_Ry);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_limit_Rz);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "linkBodies") < 0)) __PYX_ERR(0, 2984, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_body1 = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)values[0]);
    __pyx_v_body2 = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)values[1]);
    __pyx_v_system = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)values[2]);
    __pyx_v_coordsys = ((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys *)values[3]);
    if (values[4]) {
      __pyx_v_limit_X = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_limit_X == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2988, __pyx_L3_error)
    } else {
      __pyx_v_limit_X = ((double)0.);
    }
    if (values[5]) {
      __pyx_v_limit_Y = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_limit_Y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2989, __pyx_L3_error)
    } else {
      __pyx_v_limit_Y = ((double)0.);
    }
    if (values[6]) {
      __pyx_v_limit_Z = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_limit_Z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2990, __pyx_L3_error)
    } else {
      __pyx_v_limit_Z = ((double)0.);
    }
    if (values[7]) {
      __pyx_v_limit_Rx = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_limit_Rx == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2991, __pyx_L3_error)
    } else {
      __pyx_v_limit_Rx = ((double)0.);
    }
    if (values[8]) {
      __pyx_v_limit_Ry = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_limit_Ry == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2992, __pyx_L3_error)
    } else {
      __pyx_v_limit_Ry = ((double)0.);
    }
    if (values[9]) {
      __pyx_v_limit_Rz = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_limit_Rz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2993, __pyx_L3_error)
    } else {
      __pyx_v_limit_Rz = ((double)0.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("linkBodies", 0, 4, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2984, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mbd.ChRigidBody.linkBodies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_body1), __pyx_ptype_3mbd_11ChRigidBody_ProtChBody, 1, "body1", 0))) __PYX_ERR(0, 2984, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_body2), __pyx_ptype_3mbd_11ChRigidBody_ProtChBody, 1, "body2", 0))) __PYX_ERR(0, 2985, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_system), __pyx_ptype_3mbd_11ChRigidBody_ProtChSystem, 1, "system", 0))) __PYX_ERR(0, 2986, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coordsys), __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChCoordsys, 1, "coordsys", 0))) __PYX_ERR(0, 2987, __pyx_L1_error)
  __pyx_r = __pyx_pf_3mbd_11ChRigidBody_6linkBodies(__pyx_self, __pyx_v_body1, __pyx_v_body2, __pyx_v_system, __pyx_v_coordsys, __pyx_v_limit_X, __pyx_v_limit_Y, __pyx_v_limit_Z, __pyx_v_limit_Rx, __pyx_v_limit_Ry, __pyx_v_limit_Rz);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3mbd_11ChRigidBody_6linkBodies(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body1, struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *__pyx_v_body2, struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *__pyx_v_system, struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys *__pyx_v_coordsys, double __pyx_v_limit_X, double __pyx_v_limit_Y, double __pyx_v_limit_Z, double __pyx_v_limit_Rx, double __pyx_v_limit_Ry, double __pyx_v_limit_Rz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_3mbd_11ChRigidBody_linkBodies __pyx_t_2;
  __Pyx_RefNannySetupContext("linkBodies", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 6;
  __pyx_t_2.limit_X = __pyx_v_limit_X;
  __pyx_t_2.limit_Y = __pyx_v_limit_Y;
  __pyx_t_2.limit_Z = __pyx_v_limit_Z;
  __pyx_t_2.limit_Rx = __pyx_v_limit_Rx;
  __pyx_t_2.limit_Ry = __pyx_v_limit_Ry;
  __pyx_t_2.limit_Rz = __pyx_v_limit_Rz;
  __pyx_t_1 = __pyx_f_3mbd_11ChRigidBody_linkBodies(__pyx_v_body1, __pyx_v_body2, __pyx_v_system, __pyx_v_coordsys, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mbd.ChRigidBody.linkBodies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__150, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 218, __pyx_L1_error)

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__151, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 222, __pyx_L1_error)

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__152, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 259, __pyx_L1_error)

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 278, __pyx_L1_error)
      break;
    }

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 285, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 795, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 796, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 796, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 796, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__153, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 799, __pyx_L1_error)

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__154, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 803, __pyx_L1_error)

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__155, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 823, __pyx_L1_error)

        /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 844, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(1, 849, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":987
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 987, __pyx_L3_error)

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":988
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 988, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__156, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 989, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 989, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":993
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 993, __pyx_L3_error)

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":994
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 994, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__157, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 995, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":999
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 999, __pyx_L3_error)

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__158, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1001, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 1001, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(2, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":120
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(2, 120, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(2, 120, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 120, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 120, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 121, __pyx_L3_error)
    } else {

      /* "View.MemoryView":121
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(2, 120, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(2, 120, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":120
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":127
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 127, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(2, 127, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":128
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":130
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":131
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__159, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 131, __pyx_L1_error)

    /* "View.MemoryView":130
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":133
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":134
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__160, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 134, __pyx_L1_error)

    /* "View.MemoryView":133
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":136
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":137
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__161, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":136
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":138
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(2, 138, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "View.MemoryView":139
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_self->_format); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(2, 139, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_6;

  /* "View.MemoryView":142
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":143
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":145
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":146
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__162, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(2, 146, __pyx_L1_error)

    /* "View.MemoryView":145
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":149
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_7 = 0;
  __pyx_t_5 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(2, 149, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_dim = __pyx_t_8;
    __pyx_v_idx = __pyx_t_7;
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":150
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":151
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_3 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(2, 151, __pyx_L1_error)

      /* "View.MemoryView":150
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":152
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":149
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "View.MemoryView":155
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 155, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":156
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":157
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":155
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":158
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 158, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":159
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":160
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":158
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":162
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(2, 162, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":164
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":167
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":168
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 168, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":169
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":172
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":173
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":174
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__163, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 174, __pyx_L1_error)

      /* "View.MemoryView":173
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":176
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":177
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":178
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(2, 178, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(2, 178, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "View.MemoryView":179
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":180
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":176
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":169
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":120
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":183
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":184
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":185
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 185, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":186
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":185
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":187
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 187, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":188
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":189
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__164, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 190, __pyx_L1_error)

    /* "View.MemoryView":189
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":191
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":192
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":193
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":194
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":195
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":196
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":197
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":198
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":200
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":201
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":200
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":203
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":205
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":183
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":209
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":210
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":211
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":210
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":212
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":214
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":213
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":216
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":212
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":217
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":209
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":220
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":221
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":220
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":224
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":225
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":226
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":224
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":229
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":230
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":229
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":232
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":233
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":232
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":235
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":236
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(2, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":235
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":240
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":244
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":245
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":244
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":247
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":248
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(2, 248, __pyx_L1_error)

    /* "View.MemoryView":247
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":249
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":251
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":240
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":277
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 277, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":278
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":277
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":279
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":280
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":279
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":294
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":296
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":300
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":302
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":303
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":302
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":305
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":294
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":341
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(2, 341, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 341, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 341, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 341, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 341, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":342
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":343
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":344
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":345
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 345, __pyx_L1_error)

    /* "View.MemoryView":346
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":347
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":348
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":346
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":344
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":351
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":352
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":353
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":351
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":354
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":355
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":356
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":357
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(2, 357, __pyx_L1_error)

      /* "View.MemoryView":356
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":354
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":359
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":360
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":359
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":362
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":364
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":366
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":341
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":368
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyThread_type_lock __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":369
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":370
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":369
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  }

  /* "View.MemoryView":374
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":375
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":376
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":377
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":378
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":380
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_5 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":379
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_5;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_6;

          /* "View.MemoryView":378
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":381
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":376
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":383
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":374
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":368
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":385
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":387
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":389
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 389, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 389, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 389, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 389, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":390
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 390, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(2, 390, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":389
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":392
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":385
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":395
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":396
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":397
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":396
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":399
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 399, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 399, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":402
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 402, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":403
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":402
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":405
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == NULL)) __PYX_ERR(2, 405, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":406
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":395
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":408
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":409
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 409, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 409, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":411
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 411, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":412
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_obj = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "View.MemoryView":413
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 413, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "View.MemoryView":414
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":413
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":416
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 416, __pyx_L1_error)
      __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L4:;

    /* "View.MemoryView":411
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":418
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":408
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":420
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":421
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":422
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":423
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->flags | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 423, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":424
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 424, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":423
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 423, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 423, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":422
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "View.MemoryView":425
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(2, 425, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":426
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_None);
        __pyx_r = Py_None;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":422
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L11_try_end:;
    }

    /* "View.MemoryView":421
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":428
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":420
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":430
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":434
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(2, 434, __pyx_L1_error)

  /* "View.MemoryView":435
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(2, 435, __pyx_L1_error)

  /* "View.MemoryView":436
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":434
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_4 = __pyx_memoryview_copy_contents((__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice))[0]), (__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice))[0]), __pyx_t_2, __pyx_t_3, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 434, __pyx_L1_error)

  /* "View.MemoryView":430
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":438
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":440
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_v_dst_slice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice));

  /* "View.MemoryView":447
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_1 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":448
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":449
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":450
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(2, 450, __pyx_L1_error)

      /* "View.MemoryView":449
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":451
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":447
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":453
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":455
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":456
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":457
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":456
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":459
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 459, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":463
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_1 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":464
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_2 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 464, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "View.MemoryView":463
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":465
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":468
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __pyx_L6_error:;
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      __Pyx_PyThreadState_assign
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":438
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":470
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":471
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(2, 471, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":472
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":470
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":474
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":477
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":480
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":481
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":482
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 482, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 482, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 482, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 482, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 482, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 482, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":481
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":486
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":487
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 487, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":486
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":488
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "View.MemoryView":483
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 483, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9) < 0) __PYX_ERR(2, 483, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_9);

      /* "View.MemoryView":484
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__165, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 484, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 484, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":481
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":474
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":490
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":493
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":498
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":499
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 499, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":498
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":501
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 501, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 501, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 501, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":503
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(2, 503, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":504
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":503
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":504
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":490
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":507
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  char *__pyx_t_3;
  void *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":508
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":509
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_2;

    /* "View.MemoryView":508
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":511
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":513
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":514
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_2;

    /* "View.MemoryView":513
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":516
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L4:;

  /* "View.MemoryView":518
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":519
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_2;

    /* "View.MemoryView":518
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":521
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":523
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":524
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_3;

    /* "View.MemoryView":523
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":526
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":528
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_4 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":529
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_5 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_5;

  /* "View.MemoryView":530
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = 0
 */
  __pyx_t_6 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_6;

  /* "View.MemoryView":531
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 *         info.obj = self
 */
  __pyx_t_6 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_6;

  /* "View.MemoryView":532
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":533
 *         info.len = self.view.len
 *         info.readonly = 0
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":507
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

  /* function exit code */
  __pyx_r = 0;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":539
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":540
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(2, 540, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":541
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == 0)) __PYX_ERR(2, 541, __pyx_L1_error)

  /* "View.MemoryView":542
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":539
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":545
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":546
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":545
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":549
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":550
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 550, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":549
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":554
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":556
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__166, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 556, __pyx_L1_error)

    /* "View.MemoryView":554
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":558
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 558, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":561
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":562
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":563
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__167, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":562
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":565
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(2, 565, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":561
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":568
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":569
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":568
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":572
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":573
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":572
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":576
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":577
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":576
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":580
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":581
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":582
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":584
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":585
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":587
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":581
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":589
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":580
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":591
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":592
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":593
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":592
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":595
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":591
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":597
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":598
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":599
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":598
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":597
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":601
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":602
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":601
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":608
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":609
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":614
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":615
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":617
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":619
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":621
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":622
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 622, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":627
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":617
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":629
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":631
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":633
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":634
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 634, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":639
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":629
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":644
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":645
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":646
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":643
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":649
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":650
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":649
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":652
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":657
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":658
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":657
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":660
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":662
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":663
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":664
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":665
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 665, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 665, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 665, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 665, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":666
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":667
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":668
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 668, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 668, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__168);
            __Pyx_GIVEREF(__pyx_slice__168);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__168);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 668, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":669
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":667
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":671
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__169); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 671, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":672
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":666
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":674
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_1) {

        /* "View.MemoryView":675
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(2, 675, __pyx_L1_error)

        /* "View.MemoryView":674
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":677
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":678
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 678, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":665
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":680
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(2, 680, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":681
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":682
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__170);
        __Pyx_GIVEREF(__pyx_slice__170);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__170);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 682, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":681
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":684
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":652
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":686
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":687
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":688
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":689
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__171, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 689, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 689, __pyx_L1_error)

      /* "View.MemoryView":688
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":686
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":696
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":697
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":704
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst)));

  /* "View.MemoryView":708
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(2, 708, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":710
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":711
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 711, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":712
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":710
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":714
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":715
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":721
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":722
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":727
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":728
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":732
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 732, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 732, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 732, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 732, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":733
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":737
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 737, __pyx_L1_error)

      /* "View.MemoryView":734
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(2, 734, __pyx_L1_error)

      /* "View.MemoryView":733
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":740
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":741
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":742
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":743
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":744
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":740
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":746
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 746, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 746, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":747
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 747, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 747, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 747, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":748
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 748, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 748, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 748, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":750
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":751
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":752
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":754
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(2, 754, __pyx_L1_error)

      /* "View.MemoryView":760
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":732
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":762
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":763
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":764
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 764, __pyx_L1_error) }

    /* "View.MemoryView":765
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 765, __pyx_L1_error) }

    /* "View.MemoryView":763
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 763, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":762
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":768
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":769
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":768
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 768, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":696
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":793
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":816
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":818
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(2, 818, __pyx_L1_error)

      /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":821
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":823
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":824
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(2, 824, __pyx_L1_error)

      /* "View.MemoryView":823
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":827
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":828
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":829
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":830
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":831
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":830
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":828
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":832
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":833
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":834
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":833
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":836
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":832
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":827
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":838
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":839
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":838
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":841
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":843
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":844
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":845
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":846
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":847
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":846
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":844
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":848
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":849
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":848
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":843
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":851
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":852
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":851
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":854
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":856
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":857
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":856
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":861
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":864
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":867
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":870
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":871
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":872
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":876
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":878
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":883
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":885
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":886
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(2, 885, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":888
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":890
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":793
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":896
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":898
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":899
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":903
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(2, 903, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(2, 903, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":904
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":906
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":907
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":909
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":912
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":914
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(2, 914, __pyx_L1_error)

      /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":916
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 917, __pyx_L1_error)

    /* "View.MemoryView":916
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":919
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":921
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":923
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":896
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":929
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;

  /* "View.MemoryView":930
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":932
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":933
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":937
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":938
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":939
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_4 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_4;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":940
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_4 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_4;

    /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "View.MemoryView":943
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_8 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 943, __pyx_L1_error)

      /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":945
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":929
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":962
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":963
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":962
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":965
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":966
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":967
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":966
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":969
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":965
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":971
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":972
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":973
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == 0)) __PYX_ERR(2, 973, __pyx_L1_error)

    /* "View.MemoryView":972
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":975
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":971
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":978
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":979
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":978
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":993
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":994
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "View.MemoryView":993
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":999
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1001
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1002
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1004
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1005
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1007
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1008
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1009
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1010
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1011
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     result.flags = PyBUF_RECORDS
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1013
 *     Py_INCREF(Py_None)
 * 
 *     result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

  /* "View.MemoryView":1015
 *     result.flags = PyBUF_RECORDS
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1016
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1019
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1020
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1021
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1022
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1023
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L5_break;

      /* "View.MemoryView":1021
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L5_break:;

  /* "View.MemoryView":1025
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1026
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1027
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 1027, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1029
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1030
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1032
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":985
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1035
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1038
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1039
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 1039, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1040
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1038
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1042
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1043
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1035
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1046
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1050
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1051
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1052
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1054
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1055
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1057
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_dim = __pyx_t_3;

    /* "View.MemoryView":1058
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1059
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1060
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_4 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_4 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_4;
  }

  /* "View.MemoryView":1046
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1066
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1067
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1070
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1077
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1078
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1079
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1077
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1081
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1082
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1084
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1086
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1070
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1092
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1093
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1094
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1093
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1096
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1092
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1099
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1104
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1105
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1107
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1L; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1108
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1109
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1110
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1108
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1112
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1113
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1114
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1115
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1113
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1117
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1118
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1117
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1120
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1099
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1123
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;

  /* "View.MemoryView":1130
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1131
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1132
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1133
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1135
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1136
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1137
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1136
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1138
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent));

      /* "View.MemoryView":1136
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1140
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "View.MemoryView":1141
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize);

        /* "View.MemoryView":1142
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1143
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1135
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1145
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":1146
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1150
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1151
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1123
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1153
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1156
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1153
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1160
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1163
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 *     cdef Py_ssize_t size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1165
 *     cdef Py_ssize_t size = src.memview.view.itemsize
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         size *= src.shape[i]
 * 
 */
  __pyx_t_2 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1166
 * 
 *     for i in range(ndim):
 *         size *= src.shape[i]             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * (__pyx_v_src->shape[__pyx_v_i]));
  }

  /* "View.MemoryView":1168
 *         size *= src.shape[i]
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1160
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1171
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1180
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1181
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_idx = __pyx_t_3;

      /* "View.MemoryView":1182
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1183
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1180
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1185
 *             stride = stride * shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1L; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1186
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1187
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1189
 *             stride = stride * shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1171
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1192
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;

  /* "View.MemoryView":1203
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1204
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1206
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1207
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1208
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(2, 1208, __pyx_L1_error)

    /* "View.MemoryView":1207
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1211
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1212
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1213
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1214
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1215
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1217
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  __pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order);

  /* "View.MemoryView":1221
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1222
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1223
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1222
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1225
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1226
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size);

    /* "View.MemoryView":1225
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1228
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1230
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1192
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1235
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1238
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1237
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(2, 1237, __pyx_L1_error)

  /* "View.MemoryView":1235
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1241
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1242
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1242, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1242, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 1242, __pyx_L1_error)

  /* "View.MemoryView":1241
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1245
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1246
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1247
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1247, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1247, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1247, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 1247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 1247, __pyx_L1_error)

    /* "View.MemoryView":1246
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1249
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(2, 1249, __pyx_L1_error)
  }

  /* "View.MemoryView":1245
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;

  /* "View.MemoryView":1260
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1261
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1263
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1264
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1265
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1268
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1269
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1268
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1270
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1271
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1270
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1273
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1275
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_5; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1276
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1277
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1278
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1279
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1277
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1281
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_4 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 1281, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1276
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1283
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1284
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_4 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 1284, __pyx_L1_error)

      /* "View.MemoryView":1283
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1286
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1288
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1289
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1288
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1291
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_6 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_6 == NULL)) __PYX_ERR(2, 1291, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_6;

    /* "View.MemoryView":1292
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1286
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1294
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1297
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1298
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1297
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1299
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1299
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1302
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1304
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1305
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim));

      /* "View.MemoryView":1306
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1307
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1308
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1302
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1294
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1310
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "View.MemoryView":1313
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == 0)) __PYX_ERR(2, 1313, __pyx_L1_error)

    /* "View.MemoryView":1314
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == 0)) __PYX_ERR(2, 1314, __pyx_L1_error)

    /* "View.MemoryView":1310
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1316
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1317
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1318
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1320
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1321
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1324
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":1328
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1330
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1L; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1331
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1332
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1333
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1335
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1336
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1337
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1338
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1324
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1346
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1350
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1351
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1350
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1346
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1355
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1358
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1355
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1361
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1365
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1366
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_3 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_3) {

      /* "View.MemoryView":1367
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_3 = (__pyx_v_inc != 0);
      if (__pyx_t_3) {

        /* "View.MemoryView":1368
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1367
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1370
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1366
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1372
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1373
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1375
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1361
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1381
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1384
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1385
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1387
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1381
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "View.MemoryView":1395
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1396
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1398
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1399
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1400
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize);

      /* "View.MemoryView":1401
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1398
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1403
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1404
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1406
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}
static struct __pyx_vtabstruct_3mbd_11ChRigidBody_ProtChBody __pyx_vtable_3mbd_11ChRigidBody_ProtChBody;

static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_ProtChBody(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)o);
  p->__pyx_vtab = __pyx_vtabptr_3mbd_11ChRigidBody_ProtChBody;
  new((void*)&(p->rotation)) ChQuaternion<double> ();
  new((void*)&(p->rotation_last)) ChQuaternion<double> ();
  new((void*)&(p->name)) std::string();
  p->record_file = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->model = Py_None; Py_INCREF(Py_None);
  p->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)Py_None); Py_INCREF(Py_None);
  p->Shape = Py_None; Py_INCREF(Py_None);
  p->record_dict = Py_None; Py_INCREF(Py_None);
  p->prescribed_motion_function = Py_None; Py_INCREF(Py_None);
  p->ChBody = ((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)Py_None); Py_INCREF(Py_None);
  p->position = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->position_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->F = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->M = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->F_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->M_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->F_prot = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->M_prot = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->F_prot_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->M_prot_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->F_applied = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->M_applied = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->F_applied_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->M_applied_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->F_Aij = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->M_Aij = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->F_Aij_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->M_Aij_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->acceleration = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->acceleration_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->velocity = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->velocity_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ang_acceleration_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ang_acceleration = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ang_velocity_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->ang_velocity = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->barycenter0 = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->rotation_init = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->rotm = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->rotm_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->rotq = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->rotq_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->adams_vel = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->h_predict = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->h_ang_vel_predict = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->h_predict_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->h_ang_vel_predict_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->Aij = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3mbd_11ChRigidBody_ProtChBody(PyObject *o) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->rotation);
  __Pyx_call_destructor(p->rotation_last);
  __Pyx_call_destructor(p->name);
  Py_CLEAR(p->record_file);
  Py_CLEAR(p->model);
  Py_CLEAR(p->ProtChSystem);
  Py_CLEAR(p->Shape);
  Py_CLEAR(p->record_dict);
  Py_CLEAR(p->prescribed_motion_function);
  Py_CLEAR(p->ChBody);
  Py_CLEAR(p->position);
  Py_CLEAR(p->position_last);
  Py_CLEAR(p->F);
  Py_CLEAR(p->M);
  Py_CLEAR(p->F_last);
  Py_CLEAR(p->M_last);
  Py_CLEAR(p->F_prot);
  Py_CLEAR(p->M_prot);
  Py_CLEAR(p->F_prot_last);
  Py_CLEAR(p->M_prot_last);
  Py_CLEAR(p->F_applied);
  Py_CLEAR(p->M_applied);
  Py_CLEAR(p->F_applied_last);
  Py_CLEAR(p->M_applied_last);
  Py_CLEAR(p->F_Aij);
  Py_CLEAR(p->M_Aij);
  Py_CLEAR(p->F_Aij_last);
  Py_CLEAR(p->M_Aij_last);
  Py_CLEAR(p->acceleration);
  Py_CLEAR(p->acceleration_last);
  Py_CLEAR(p->velocity);
  Py_CLEAR(p->velocity_last);
  Py_CLEAR(p->ang_acceleration_last);
  Py_CLEAR(p->ang_acceleration);
  Py_CLEAR(p->ang_velocity_last);
  Py_CLEAR(p->ang_velocity);
  Py_CLEAR(p->barycenter0);
  Py_CLEAR(p->rotation_init);
  Py_CLEAR(p->rotm);
  Py_CLEAR(p->rotm_last);
  Py_CLEAR(p->rotq);
  Py_CLEAR(p->rotq_last);
  Py_CLEAR(p->adams_vel);
  Py_CLEAR(p->h_predict);
  Py_CLEAR(p->h_ang_vel_predict);
  Py_CLEAR(p->h_predict_last);
  Py_CLEAR(p->h_ang_vel_predict_last);
  Py_CLEAR(p->Aij);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3mbd_11ChRigidBody_ProtChBody(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)o;
  if (p->model) {
    e = (*v)(p->model, a); if (e) return e;
  }
  if (p->ProtChSystem) {
    e = (*v)(((PyObject*)p->ProtChSystem), a); if (e) return e;
  }
  if (p->Shape) {
    e = (*v)(p->Shape, a); if (e) return e;
  }
  if (p->record_dict) {
    e = (*v)(p->record_dict, a); if (e) return e;
  }
  if (p->prescribed_motion_function) {
    e = (*v)(p->prescribed_motion_function, a); if (e) return e;
  }
  if (p->ChBody) {
    e = (*v)(((PyObject*)p->ChBody), a); if (e) return e;
  }
  if (p->position) {
    e = (*v)(((PyObject*)p->position), a); if (e) return e;
  }
  if (p->position_last) {
    e = (*v)(((PyObject*)p->position_last), a); if (e) return e;
  }
  if (p->F) {
    e = (*v)(((PyObject*)p->F), a); if (e) return e;
  }
  if (p->M) {
    e = (*v)(((PyObject*)p->M), a); if (e) return e;
  }
  if (p->F_last) {
    e = (*v)(((PyObject*)p->F_last), a); if (e) return e;
  }
  if (p->M_last) {
    e = (*v)(((PyObject*)p->M_last), a); if (e) return e;
  }
  if (p->F_prot) {
    e = (*v)(((PyObject*)p->F_prot), a); if (e) return e;
  }
  if (p->M_prot) {
    e = (*v)(((PyObject*)p->M_prot), a); if (e) return e;
  }
  if (p->F_prot_last) {
    e = (*v)(((PyObject*)p->F_prot_last), a); if (e) return e;
  }
  if (p->M_prot_last) {
    e = (*v)(((PyObject*)p->M_prot_last), a); if (e) return e;
  }
  if (p->F_applied) {
    e = (*v)(((PyObject*)p->F_applied), a); if (e) return e;
  }
  if (p->M_applied) {
    e = (*v)(((PyObject*)p->M_applied), a); if (e) return e;
  }
  if (p->F_applied_last) {
    e = (*v)(((PyObject*)p->F_applied_last), a); if (e) return e;
  }
  if (p->M_applied_last) {
    e = (*v)(((PyObject*)p->M_applied_last), a); if (e) return e;
  }
  if (p->F_Aij) {
    e = (*v)(((PyObject*)p->F_Aij), a); if (e) return e;
  }
  if (p->M_Aij) {
    e = (*v)(((PyObject*)p->M_Aij), a); if (e) return e;
  }
  if (p->F_Aij_last) {
    e = (*v)(((PyObject*)p->F_Aij_last), a); if (e) return e;
  }
  if (p->M_Aij_last) {
    e = (*v)(((PyObject*)p->M_Aij_last), a); if (e) return e;
  }
  if (p->acceleration) {
    e = (*v)(((PyObject*)p->acceleration), a); if (e) return e;
  }
  if (p->acceleration_last) {
    e = (*v)(((PyObject*)p->acceleration_last), a); if (e) return e;
  }
  if (p->velocity) {
    e = (*v)(((PyObject*)p->velocity), a); if (e) return e;
  }
  if (p->velocity_last) {
    e = (*v)(((PyObject*)p->velocity_last), a); if (e) return e;
  }
  if (p->ang_acceleration_last) {
    e = (*v)(((PyObject*)p->ang_acceleration_last), a); if (e) return e;
  }
  if (p->ang_acceleration) {
    e = (*v)(((PyObject*)p->ang_acceleration), a); if (e) return e;
  }
  if (p->ang_velocity_last) {
    e = (*v)(((PyObject*)p->ang_velocity_last), a); if (e) return e;
  }
  if (p->ang_velocity) {
    e = (*v)(((PyObject*)p->ang_velocity), a); if (e) return e;
  }
  if (p->barycenter0) {
    e = (*v)(((PyObject*)p->barycenter0), a); if (e) return e;
  }
  if (p->rotation_init) {
    e = (*v)(((PyObject*)p->rotation_init), a); if (e) return e;
  }
  if (p->rotm) {
    e = (*v)(((PyObject*)p->rotm), a); if (e) return e;
  }
  if (p->rotm_last) {
    e = (*v)(((PyObject*)p->rotm_last), a); if (e) return e;
  }
  if (p->rotq) {
    e = (*v)(((PyObject*)p->rotq), a); if (e) return e;
  }
  if (p->rotq_last) {
    e = (*v)(((PyObject*)p->rotq_last), a); if (e) return e;
  }
  if (p->adams_vel) {
    e = (*v)(((PyObject*)p->adams_vel), a); if (e) return e;
  }
  if (p->h_predict) {
    e = (*v)(((PyObject*)p->h_predict), a); if (e) return e;
  }
  if (p->h_ang_vel_predict) {
    e = (*v)(((PyObject*)p->h_ang_vel_predict), a); if (e) return e;
  }
  if (p->h_predict_last) {
    e = (*v)(((PyObject*)p->h_predict_last), a); if (e) return e;
  }
  if (p->h_ang_vel_predict_last) {
    e = (*v)(((PyObject*)p->h_ang_vel_predict_last), a); if (e) return e;
  }
  if (p->Aij) {
    e = (*v)(((PyObject*)p->Aij), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3mbd_11ChRigidBody_ProtChBody(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)o;
  tmp = ((PyObject*)p->model);
  p->model = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ProtChSystem);
  p->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Shape);
  p->Shape = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->record_dict);
  p->record_dict = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->prescribed_motion_function);
  p->prescribed_motion_function = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ChBody);
  p->ChBody = ((struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->position);
  p->position = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->position_last);
  p->position_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->F);
  p->F = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->M);
  p->M = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->F_last);
  p->F_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->M_last);
  p->M_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->F_prot);
  p->F_prot = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->M_prot);
  p->M_prot = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->F_prot_last);
  p->F_prot_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->M_prot_last);
  p->M_prot_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->F_applied);
  p->F_applied = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->M_applied);
  p->M_applied = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->F_applied_last);
  p->F_applied_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->M_applied_last);
  p->M_applied_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->F_Aij);
  p->F_Aij = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->M_Aij);
  p->M_Aij = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->F_Aij_last);
  p->F_Aij_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->M_Aij_last);
  p->M_Aij_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->acceleration);
  p->acceleration = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->acceleration_last);
  p->acceleration_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->velocity);
  p->velocity = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->velocity_last);
  p->velocity_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ang_acceleration_last);
  p->ang_acceleration_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ang_acceleration);
  p->ang_acceleration = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ang_velocity_last);
  p->ang_velocity_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ang_velocity);
  p->ang_velocity = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->barycenter0);
  p->barycenter0 = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rotation_init);
  p->rotation_init = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rotm);
  p->rotm = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rotm_last);
  p->rotm_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rotq);
  p->rotq = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rotq_last);
  p->rotq_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->adams_vel);
  p->adams_vel = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->h_predict);
  p->h_predict = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->h_ang_vel_predict);
  p->h_ang_vel_predict = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->h_predict_last);
  p->h_predict_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->h_ang_vel_predict_last);
  p->h_ang_vel_predict_last = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Aij);
  p->Aij = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_record_file(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_file_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_record_file(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_file_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_file_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5model_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_model(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5model_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5model_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ProtChSystem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ProtChSystem(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ProtChSystem_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_Shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5Shape_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_Shape(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5Shape_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5Shape_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_nd(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2nd_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_nd(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2nd_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_i_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_7i_start_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_i_start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_7i_start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_i_end(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5i_end_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_i_end(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5i_end_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_dt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2dt_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_dt(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_2dt_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_width_2D(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8width_2D_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_width_2D(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8width_2D_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_record_dict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_dict_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_record_dict(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_dict_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11record_dict_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_prescribed_motion_function(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_prescribed_motion_function(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_26prescribed_motion_function_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ChBody(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6ChBody_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ChBody(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6ChBody_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6ChBody_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_position(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8position_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_position(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8position_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8position_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_position_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13position_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_position_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13position_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13position_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1F_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1F_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1F_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1M_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1M_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_1M_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_prot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_prot_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_prot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_prot_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6F_prot_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_prot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_prot_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_prot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_prot_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_6M_prot_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_prot_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_prot_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11F_prot_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_prot_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_prot_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11M_prot_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_applied(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9F_applied_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_applied(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9F_applied_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9F_applied_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_applied(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9M_applied_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_applied(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9M_applied_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9M_applied_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_applied_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_applied_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14F_applied_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_applied_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_applied_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14M_applied_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_Aij(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_Aij(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5F_Aij_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_Aij(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_Aij(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5M_Aij_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_Aij_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_Aij_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10F_Aij_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_Aij_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_Aij_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10M_Aij_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_acceleration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12acceleration_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_acceleration(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12acceleration_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12acceleration_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_acceleration_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_acceleration_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17acceleration_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_velocity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8velocity_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_velocity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8velocity_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_8velocity_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_velocity_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_velocity_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13velocity_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_acceleration_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_acceleration_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21ang_acceleration_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_acceleration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_acceleration(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_16ang_acceleration_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_velocity_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_velocity_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_velocity_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_velocity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_velocity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_velocity_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_vel_norm(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_vel_norm(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_12ang_vel_norm_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_vel_norm_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_vel_norm_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17ang_vel_norm_last_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_barycenter0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_barycenter0(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11barycenter0_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_rotation_init(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_rotation_init(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13rotation_init_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_rotm(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotm_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_rotm(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotm_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotm_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_rotm_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_rotm_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotm_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_rotq(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotq_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_rotq(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotq_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4rotq_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_rotq_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_rotq_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9rotq_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_adams_vel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_adams_vel(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9adams_vel_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4name_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_4name_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_predicted(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9predicted_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_predicted(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9predicted_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_dt_predict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10dt_predict_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_dt_predict(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_10dt_predict_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_predict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9h_predict_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_predict(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9h_predict_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9h_predict_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_predict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_predict(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13h_ang_predict_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_vel_predict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_vel_predict(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17h_ang_vel_predict_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_predict_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_predict_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14h_predict_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_predict_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_predict_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_18h_ang_predict_last_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_vel_predict_last(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_vel_predict_last(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_22h_ang_vel_predict_last_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_Aij(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3Aij_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_Aij(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3Aij_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3Aij_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_applyAddedMass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_applyAddedMass(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_10ProtChBody_14applyAddedMass_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_3mbd_11ChRigidBody_ProtChBody[] = {
  {"attachShape", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_3attachShape, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_2attachShape},
  {"SetBodyFixed", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_5SetBodyFixed, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_4SetBodyFixed},
  {"setWidth2D", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_7setWidth2D, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_6setWidth2D},
  {"set_indices", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_9set_indices, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_8set_indices},
  {"attachAuxiliaryVariables", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_11attachAuxiliaryVariables, METH_O, 0},
  {"setInertiaXX", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_13setInertiaXX, METH_O, 0},
  {"setInitialRot", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_15setInitialRot, METH_O, 0},
  {"hxyz", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_17hxyz, METH_VARARGS|METH_KEYWORDS, 0},
  {"hx", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_19hx, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_18hx},
  {"hy", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_21hy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_20hy},
  {"hz", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_23hz, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_22hz},
  {"hx_translation", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_25hx_translation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_24hx_translation},
  {"hy_translation", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_27hy_translation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_26hy_translation},
  {"hz_translation", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_29hz_translation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_28hz_translation},
  {"hx_rotation", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_31hx_rotation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_30hx_rotation},
  {"hy_rotation", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_33hy_rotation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_32hy_rotation},
  {"hz_rotation", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_35hz_rotation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_34hz_rotation},
  {"addSpring", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_37addSpring, METH_VARARGS|METH_KEYWORDS, 0},
  {"SetPosition", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_39SetPosition, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_38SetPosition},
  {"SetPosition", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_41SetPosition, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_40SetPosition},
  {"setRotation", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_43setRotation, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_42setRotation},
  {"setConstraints", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_45setConstraints, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_44setConstraints},
  {"SetMass", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_47SetMass, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_46SetMass},
  {"setAddedMass", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_49setAddedMass, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_48setAddedMass},
  {"getPressureForces", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_51getPressureForces, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_50getPressureForces},
  {"getShearForces", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_53getShearForces, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_52getShearForces},
  {"getMoments", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_55getMoments, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_54getMoments},
  {"SetPos", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_57SetPos, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_56SetPos},
  {"SetRot", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_59SetRot, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_58SetRot},
  {"getRotationMatrix", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_61getRotationMatrix, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_60getRotationMatrix},
  {"prestep", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_63prestep, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_62prestep},
  {"setExternalForces", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_65setExternalForces, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_64setExternalForces},
  {"poststep", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_67poststep, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_66poststep},
  {"prediction", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_69prediction, METH_NOARGS, 0},
  {"calculate_init", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_71calculate_init, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_70calculate_init},
  {"calculate", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_73calculate, METH_NOARGS, 0},
  {"setPrescribedMotionCustom", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_75setPrescribedMotionCustom, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_74setPrescribedMotionCustom},
  {"setPrescribedMotionSine", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_77setPrescribedMotionSine, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_76setPrescribedMotionSine},
  {"setPrescribedMotionPoly", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_79setPrescribedMotionPoly, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_78setPrescribedMotionPoly},
  {"setPrescribedMotion", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_81setPrescribedMotion, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_80setPrescribedMotion},
  {"storeValues", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_83storeValues, METH_NOARGS, 0},
  {"getValues", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_85getValues, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_84getValues},
  {"setRecordValues", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_87setRecordValues, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_86setRecordValues},
  {"_recordValues", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_89_recordValues, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_88_recordValues},
  {"addPrismaticLinksWithSpring", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_91addPrismaticLinksWithSpring, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_90addPrismaticLinksWithSpring},
  {"addPrismaticLinkX", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_93addPrismaticLinkX, METH_O, 0},
  {"setName", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_10ProtChBody_95setName, METH_O, __pyx_doc_3mbd_11ChRigidBody_10ProtChBody_94setName},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3mbd_11ChRigidBody_ProtChBody[] = {
  {(char *)"record_file", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_record_file, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_record_file, (char *)0, 0},
  {(char *)"model", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_model, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_model, (char *)0, 0},
  {(char *)"ProtChSystem", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ProtChSystem, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ProtChSystem, (char *)0, 0},
  {(char *)"Shape", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_Shape, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_Shape, (char *)0, 0},
  {(char *)"nd", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_nd, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_nd, (char *)0, 0},
  {(char *)"i_start", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_i_start, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_i_start, (char *)0, 0},
  {(char *)"i_end", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_i_end, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_i_end, (char *)0, 0},
  {(char *)"dt", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_dt, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_dt, (char *)0, 0},
  {(char *)"width_2D", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_width_2D, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_width_2D, (char *)0, 0},
  {(char *)"record_dict", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_record_dict, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_record_dict, (char *)0, 0},
  {(char *)"prescribed_motion_function", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_prescribed_motion_function, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_prescribed_motion_function, (char *)0, 0},
  {(char *)"ChBody", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ChBody, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ChBody, (char *)0, 0},
  {(char *)"position", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_position, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_position, (char *)0, 0},
  {(char *)"position_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_position_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_position_last, (char *)0, 0},
  {(char *)"F", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F, (char *)0, 0},
  {(char *)"M", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M, (char *)0, 0},
  {(char *)"F_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_last, (char *)0, 0},
  {(char *)"M_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_last, (char *)0, 0},
  {(char *)"F_prot", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_prot, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_prot, (char *)0, 0},
  {(char *)"M_prot", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_prot, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_prot, (char *)0, 0},
  {(char *)"F_prot_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_prot_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_prot_last, (char *)0, 0},
  {(char *)"M_prot_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_prot_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_prot_last, (char *)0, 0},
  {(char *)"F_applied", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_applied, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_applied, (char *)0, 0},
  {(char *)"M_applied", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_applied, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_applied, (char *)0, 0},
  {(char *)"F_applied_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_applied_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_applied_last, (char *)0, 0},
  {(char *)"M_applied_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_applied_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_applied_last, (char *)0, 0},
  {(char *)"F_Aij", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_Aij, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_Aij, (char *)0, 0},
  {(char *)"M_Aij", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_Aij, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_Aij, (char *)0, 0},
  {(char *)"F_Aij_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_F_Aij_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_F_Aij_last, (char *)0, 0},
  {(char *)"M_Aij_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_M_Aij_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_M_Aij_last, (char *)0, 0},
  {(char *)"acceleration", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_acceleration, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_acceleration, (char *)0, 0},
  {(char *)"acceleration_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_acceleration_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_acceleration_last, (char *)0, 0},
  {(char *)"velocity", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_velocity, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_velocity, (char *)0, 0},
  {(char *)"velocity_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_velocity_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_velocity_last, (char *)0, 0},
  {(char *)"ang_acceleration_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_acceleration_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_acceleration_last, (char *)0, 0},
  {(char *)"ang_acceleration", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_acceleration, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_acceleration, (char *)0, 0},
  {(char *)"ang_velocity_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_velocity_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_velocity_last, (char *)0, 0},
  {(char *)"ang_velocity", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_velocity, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_velocity, (char *)0, 0},
  {(char *)"ang_vel_norm", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_vel_norm, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_vel_norm, (char *)0, 0},
  {(char *)"ang_vel_norm_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_ang_vel_norm_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_ang_vel_norm_last, (char *)0, 0},
  {(char *)"barycenter0", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_barycenter0, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_barycenter0, (char *)0, 0},
  {(char *)"rotation_init", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_rotation_init, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_rotation_init, (char *)0, 0},
  {(char *)"rotm", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_rotm, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_rotm, (char *)0, 0},
  {(char *)"rotm_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_rotm_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_rotm_last, (char *)0, 0},
  {(char *)"rotq", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_rotq, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_rotq, (char *)0, 0},
  {(char *)"rotq_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_rotq_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_rotq_last, (char *)0, 0},
  {(char *)"adams_vel", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_adams_vel, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_adams_vel, (char *)0, 0},
  {(char *)"name", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_name, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_name, (char *)0, 0},
  {(char *)"predicted", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_predicted, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_predicted, (char *)0, 0},
  {(char *)"dt_predict", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_dt_predict, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_dt_predict, (char *)0, 0},
  {(char *)"h_predict", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_predict, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_predict, (char *)0, 0},
  {(char *)"h_ang_predict", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_predict, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_predict, (char *)0, 0},
  {(char *)"h_ang_vel_predict", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_vel_predict, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_vel_predict, (char *)0, 0},
  {(char *)"h_predict_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_predict_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_predict_last, (char *)0, 0},
  {(char *)"h_ang_predict_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_predict_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_predict_last, (char *)0, 0},
  {(char *)"h_ang_vel_predict_last", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_vel_predict_last, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_h_ang_vel_predict_last, (char *)0, 0},
  {(char *)"Aij", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_Aij, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_Aij, (char *)0, 0},
  {(char *)"applyAddedMass", __pyx_getprop_3mbd_11ChRigidBody_10ProtChBody_applyAddedMass, __pyx_setprop_3mbd_11ChRigidBody_10ProtChBody_applyAddedMass, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3mbd_11ChRigidBody_ProtChBody = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.ProtChBody", /*tp_name*/
  sizeof(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3mbd_11ChRigidBody_ProtChBody, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3mbd_11ChRigidBody_ProtChBody, /*tp_traverse*/
  __pyx_tp_clear_3mbd_11ChRigidBody_ProtChBody, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3mbd_11ChRigidBody_ProtChBody, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3mbd_11ChRigidBody_ProtChBody, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3mbd_11ChRigidBody_ProtChBody, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_ProtChSystem(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)o);
  new((void*)&(p->directory)) std::string();
  new((void*)&(p->scheme)) std::string();
  new((void*)&(p->prediction)) std::string();
  p->model = Py_None; Py_INCREF(Py_None);
  p->u = Py_None; Py_INCREF(Py_None);
  p->femSpace_velocity = Py_None; Py_INCREF(Py_None);
  p->femSpace_pressure = Py_None; Py_INCREF(Py_None);
  p->nodes_kdtree = Py_None; Py_INCREF(Py_None);
  p->subcomponents = Py_None; Py_INCREF(Py_None);
  p->model_mesh = Py_None; Py_INCREF(Py_None);
  p->model_addedmass = Py_None; Py_INCREF(Py_None);
  p->ProtChAddedMass = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3mbd_11ChRigidBody_ProtChSystem(PyObject *o) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->directory);
  __Pyx_call_destructor(p->scheme);
  __Pyx_call_destructor(p->prediction);
  Py_CLEAR(p->model);
  Py_CLEAR(p->u);
  Py_CLEAR(p->femSpace_velocity);
  Py_CLEAR(p->femSpace_pressure);
  Py_CLEAR(p->nodes_kdtree);
  Py_CLEAR(p->subcomponents);
  Py_CLEAR(p->model_mesh);
  Py_CLEAR(p->model_addedmass);
  Py_CLEAR(p->ProtChAddedMass);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3mbd_11ChRigidBody_ProtChSystem(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)o;
  if (p->model) {
    e = (*v)(p->model, a); if (e) return e;
  }
  if (p->u) {
    e = (*v)(p->u, a); if (e) return e;
  }
  if (p->femSpace_velocity) {
    e = (*v)(p->femSpace_velocity, a); if (e) return e;
  }
  if (p->femSpace_pressure) {
    e = (*v)(p->femSpace_pressure, a); if (e) return e;
  }
  if (p->nodes_kdtree) {
    e = (*v)(p->nodes_kdtree, a); if (e) return e;
  }
  if (p->subcomponents) {
    e = (*v)(p->subcomponents, a); if (e) return e;
  }
  if (p->model_mesh) {
    e = (*v)(p->model_mesh, a); if (e) return e;
  }
  if (p->model_addedmass) {
    e = (*v)(p->model_addedmass, a); if (e) return e;
  }
  if (p->ProtChAddedMass) {
    e = (*v)(((PyObject*)p->ProtChAddedMass), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3mbd_11ChRigidBody_ProtChSystem(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)o;
  tmp = ((PyObject*)p->model);
  p->model = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->u);
  p->u = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->femSpace_velocity);
  p->femSpace_velocity = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->femSpace_pressure);
  p->femSpace_pressure = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->nodes_kdtree);
  p->nodes_kdtree = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->subcomponents);
  p->subcomponents = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->model_mesh);
  p->model_mesh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->model_addedmass);
  p->model_addedmass = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ProtChAddedMass);
  p->ProtChAddedMass = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5model_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_model(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5model_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5model_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_dt_init(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7dt_init_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_dt_init(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7dt_init_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_subcomponents(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_subcomponents(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13subcomponents_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_chrono_dt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_chrono_dt(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_9chrono_dt_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_build_kdtree(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_build_kdtree(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_12build_kdtree_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_dist_search(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11dist_search_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_dist_search(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11dist_search_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_parallel_mode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_parallel_mode(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13parallel_mode_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_chrono_processor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_chrono_processor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_16chrono_processor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_first_step(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10first_step_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_first_step(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10first_step_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_scheme(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6scheme_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_scheme(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6scheme_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_prediction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10prediction_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_prediction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10prediction_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_step_nb(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7step_nb_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_step_nb(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7step_nb_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_step_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10step_start_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_step_start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10step_start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_sampleRate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_sampleRate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10sampleRate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_next_sample(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11next_sample_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_next_sample(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11next_sample_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_record_values(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13record_values_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_record_values(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13record_values_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_model_mesh(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_model_mesh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_10model_mesh_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_model_addedmass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_model_addedmass(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15model_addedmass_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_ProtChAddedMass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_ProtChAddedMass(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15ProtChAddedMass_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_tCount(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6tCount_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_tCount(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_6tCount_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_3mbd_11ChRigidBody_ProtChSystem[] = {
  {"GetChTime", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_3GetChTime, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_2GetChTime},
  {"setCouplingScheme", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_5setCouplingScheme, METH_VARARGS|METH_KEYWORDS, 0},
  {"attachModel", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_7attachModel, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_6attachModel},
  {"attachAuxiliaryVariables", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_9attachAuxiliaryVariables, METH_O, 0},
  {"setMinimumSubsteps", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_11setMinimumSubsteps, METH_O, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_10setMinimumSubsteps},
  {"step", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_13step, METH_O, 0},
  {"calculate", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_15calculate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_14calculate},
  {"addBodyEasyBox", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_17addBodyEasyBox, METH_O, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_16addBodyEasyBox},
  {"calculate_init", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_19calculate_init, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_18calculate_init},
  {"setTimestepperType", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_21setTimestepperType, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_20setTimestepperType},
  {"setTimeStep", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_23setTimeStep, METH_O, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_22setTimeStep},
  {"setGravity", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_25setGravity, METH_O, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_24setGravity},
  {"addSubcomponent", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_27addSubcomponent, METH_O, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_26addSubcomponent},
  {"findElementContainingCoordsKD", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_29findElementContainingCoordsKD, METH_O, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_28findElementContainingCoordsKD},
  {"findElementContainingCoordsDist", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_31findElementContainingCoordsDist, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_30findElementContainingCoordsDist},
  {"getFluidVelocityLocalCoords", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_33getFluidVelocityLocalCoords, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_12ProtChSystem_32getFluidVelocityLocalCoords},
  {"getFluidVelocityGradientLocalCoords", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_35getFluidVelocityGradientLocalCoords, METH_VARARGS|METH_KEYWORDS, 0},
  {"setCollisionEnvelopeMargin", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_12ProtChSystem_37setCollisionEnvelopeMargin, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3mbd_11ChRigidBody_ProtChSystem[] = {
  {(char *)"model", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_model, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_model, (char *)0, 0},
  {(char *)"dt_init", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_dt_init, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_dt_init, (char *)0, 0},
  {(char *)"subcomponents", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_subcomponents, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_subcomponents, (char *)0, 0},
  {(char *)"chrono_dt", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_chrono_dt, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_chrono_dt, (char *)0, 0},
  {(char *)"build_kdtree", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_build_kdtree, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_build_kdtree, (char *)0, 0},
  {(char *)"dist_search", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_dist_search, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_dist_search, (char *)0, 0},
  {(char *)"parallel_mode", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_parallel_mode, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_parallel_mode, (char *)0, 0},
  {(char *)"chrono_processor", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_chrono_processor, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_chrono_processor, (char *)0, 0},
  {(char *)"first_step", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_first_step, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_first_step, (char *)0, 0},
  {(char *)"scheme", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_scheme, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_scheme, (char *)0, 0},
  {(char *)"prediction", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_prediction, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_prediction, (char *)0, 0},
  {(char *)"step_nb", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_step_nb, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_step_nb, (char *)0, 0},
  {(char *)"step_start", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_step_start, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_step_start, (char *)0, 0},
  {(char *)"sampleRate", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_sampleRate, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_sampleRate, (char *)0, 0},
  {(char *)"next_sample", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_next_sample, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_next_sample, (char *)0, 0},
  {(char *)"record_values", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_record_values, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_record_values, (char *)0, 0},
  {(char *)"model_mesh", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_model_mesh, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_model_mesh, (char *)0, 0},
  {(char *)"model_addedmass", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_model_addedmass, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_model_addedmass, (char *)0, 0},
  {(char *)"ProtChAddedMass", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_ProtChAddedMass, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_ProtChAddedMass, (char *)0, 0},
  {(char *)"tCount", __pyx_getprop_3mbd_11ChRigidBody_12ProtChSystem_tCount, __pyx_setprop_3mbd_11ChRigidBody_12ProtChSystem_tCount, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3mbd_11ChRigidBody_ProtChSystem = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.ProtChSystem", /*tp_name*/
  sizeof(struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3mbd_11ChRigidBody_ProtChSystem, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3mbd_11ChRigidBody_ProtChSystem, /*tp_traverse*/
  __pyx_tp_clear_3mbd_11ChRigidBody_ProtChSystem, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3mbd_11ChRigidBody_ProtChSystem, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3mbd_11ChRigidBody_ProtChSystem, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3mbd_11ChRigidBody_ProtChSystem, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_Mesh(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3mbd_11ChRigidBody_4Mesh_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3mbd_11ChRigidBody_Mesh(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3mbd_11ChRigidBody_Mesh[] = {
  {"setAutomaticGravity", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_4Mesh_3setAutomaticGravity, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3mbd_11ChRigidBody_Mesh = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.Mesh", /*tp_name*/
  sizeof(struct __pyx_obj_3mbd_11ChRigidBody_Mesh), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3mbd_11ChRigidBody_Mesh, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3mbd_11ChRigidBody_Mesh, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3mbd_11ChRigidBody_Mesh, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_SurfaceBoxNodesCloud(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3mbd_11ChRigidBody_SurfaceBoxNodesCloud(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3mbd_11ChRigidBody_SurfaceBoxNodesCloud[] = {
  {"setNodesSize", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_20SurfaceBoxNodesCloud_3setNodesSize, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3mbd_11ChRigidBody_SurfaceBoxNodesCloud = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.SurfaceBoxNodesCloud", /*tp_name*/
  sizeof(struct __pyx_obj_3mbd_11ChRigidBody_SurfaceBoxNodesCloud), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3mbd_11ChRigidBody_SurfaceBoxNodesCloud, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3mbd_11ChRigidBody_SurfaceBoxNodesCloud, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3mbd_11ChRigidBody_SurfaceBoxNodesCloud, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_ProtChMoorings(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)o);
  new((void*)&(p->name)) std::string();
  new((void*)&(p->beam_type)) std::string();
  new((void*)&(p->hdfFileName)) std::string();
  p->record_file = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->model = Py_None; Py_INCREF(Py_None);
  p->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)Py_None); Py_INCREF(Py_None);
  p->Mesh = Py_None; Py_INCREF(Py_None);
  p->nodes_function = Py_None; Py_INCREF(Py_None);
  p->nodes_function_tangent = Py_None; Py_INCREF(Py_None);
  p->fluid_velocity_function = Py_None; Py_INCREF(Py_None);
  p->body_front = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)Py_None); Py_INCREF(Py_None);
  p->body_back = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)Py_None); Py_INCREF(Py_None);
  p->fluid_density_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->fluid_velocity_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->fluid_velocity_array_previous = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->fluid_acceleration_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->nb_elems = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_record_etas.data = NULL;
  p->_record_etas.memview = NULL;
  p->nearest_node_array.data = NULL;
  p->nearest_node_array.memview = NULL;
  p->containing_element_array.data = NULL;
  p->containing_element_array.memview = NULL;
  p->owning_rank.data = NULL;
  p->owning_rank.memview = NULL;
  if (unlikely(__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3mbd_11ChRigidBody_ProtChMoorings(PyObject *o) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->name);
  __Pyx_call_destructor(p->beam_type);
  __Pyx_call_destructor(p->hdfFileName);
  Py_CLEAR(p->record_file);
  Py_CLEAR(p->model);
  Py_CLEAR(p->ProtChSystem);
  Py_CLEAR(p->Mesh);
  Py_CLEAR(p->nodes_function);
  Py_CLEAR(p->nodes_function_tangent);
  Py_CLEAR(p->fluid_velocity_function);
  Py_CLEAR(p->body_front);
  Py_CLEAR(p->body_back);
  Py_CLEAR(p->fluid_density_array);
  Py_CLEAR(p->fluid_velocity_array);
  Py_CLEAR(p->fluid_velocity_array_previous);
  Py_CLEAR(p->fluid_acceleration_array);
  Py_CLEAR(p->nb_elems);
  __PYX_XDEC_MEMVIEW(&p->_record_etas, 1);
  __PYX_XDEC_MEMVIEW(&p->nearest_node_array, 1);
  __PYX_XDEC_MEMVIEW(&p->containing_element_array, 1);
  __PYX_XDEC_MEMVIEW(&p->owning_rank, 1);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3mbd_11ChRigidBody_ProtChMoorings(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)o;
  if (p->model) {
    e = (*v)(p->model, a); if (e) return e;
  }
  if (p->ProtChSystem) {
    e = (*v)(((PyObject*)p->ProtChSystem), a); if (e) return e;
  }
  if (p->Mesh) {
    e = (*v)(p->Mesh, a); if (e) return e;
  }
  if (p->nodes_function) {
    e = (*v)(p->nodes_function, a); if (e) return e;
  }
  if (p->nodes_function_tangent) {
    e = (*v)(p->nodes_function_tangent, a); if (e) return e;
  }
  if (p->fluid_velocity_function) {
    e = (*v)(p->fluid_velocity_function, a); if (e) return e;
  }
  if (p->body_front) {
    e = (*v)(((PyObject*)p->body_front), a); if (e) return e;
  }
  if (p->body_back) {
    e = (*v)(((PyObject*)p->body_back), a); if (e) return e;
  }
  if (p->fluid_density_array) {
    e = (*v)(((PyObject*)p->fluid_density_array), a); if (e) return e;
  }
  if (p->fluid_velocity_array) {
    e = (*v)(((PyObject*)p->fluid_velocity_array), a); if (e) return e;
  }
  if (p->fluid_velocity_array_previous) {
    e = (*v)(((PyObject*)p->fluid_velocity_array_previous), a); if (e) return e;
  }
  if (p->fluid_acceleration_array) {
    e = (*v)(((PyObject*)p->fluid_acceleration_array), a); if (e) return e;
  }
  if (p->nb_elems) {
    e = (*v)(((PyObject*)p->nb_elems), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3mbd_11ChRigidBody_ProtChMoorings(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings *)o;
  tmp = ((PyObject*)p->model);
  p->model = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ProtChSystem);
  p->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Mesh);
  p->Mesh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->nodes_function);
  p->nodes_function = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->nodes_function_tangent);
  p->nodes_function_tangent = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fluid_velocity_function);
  p->fluid_velocity_function = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->body_front);
  p->body_front = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->body_back);
  p->body_back = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fluid_density_array);
  p->fluid_density_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fluid_velocity_array);
  p->fluid_velocity_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fluid_velocity_array_previous);
  p->fluid_velocity_array_previous = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fluid_acceleration_array);
  p->fluid_acceleration_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->nb_elems);
  p->nb_elems = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_record_file(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_record_file(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11record_file_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5model_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_model(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5model_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5model_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_ProtChSystem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_ProtChSystem(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12ProtChSystem_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_Mesh(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_Mesh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4Mesh_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nd(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_2nd_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nd(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_2nd_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_function(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_function(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_14nodes_function_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_function_tangent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_function_tangent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22nodes_function_tangent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_function(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_function(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23fluid_velocity_function_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_body_front(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_body_front(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10body_front_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_body_back(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_body_back(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9body_back_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_front_body(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10front_body_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_front_body(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_10front_body_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_back_body(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9back_body_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_back_body(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9back_body_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_built(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_built(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11nodes_built_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_external_forces_from_ns(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_external_forces_from_ns(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23external_forces_from_ns_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_external_forces_manual(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_external_forces_manual(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_22external_forces_manual_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_density_array(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_density_array(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19fluid_density_array_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_array(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_array(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_20fluid_velocity_array_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_array_previous(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_array_previous(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29fluid_velocity_array_previous_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_acceleration_array(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_acceleration_array(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24fluid_acceleration_array_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4name_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_4name_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_beam_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_beam_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9beam_type_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_nb(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_nb(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nodes_nb_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nb_elems(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nb_elems(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_8nb_elems_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings__record_etas(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings__record_etas(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_12_record_etas_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_initialized(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11initialized_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_initialized(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11initialized_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nearest_node_array(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nearest_node_array(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_18nearest_node_array_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_containing_element_array(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_containing_element_array(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_24containing_element_array_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_owning_rank(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_owning_rank(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11owning_rank_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_hdfFileName(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_hdfFileName(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11hdfFileName_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_3mbd_11ChRigidBody_ProtChMoorings[] = {
  {"setName", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_3setName, METH_O, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_2setName},
  {"recordStrainEta", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_5recordStrainEta, METH_O, 0},
  {"_recordH5", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_7_recordH5, METH_NOARGS, 0},
  {"_recordXML", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_9_recordXML, METH_NOARGS, 0},
  {"_recordValues", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_11_recordValues, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_10_recordValues},
  {"getTensionBack", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_13getTensionBack, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_12getTensionBack},
  {"getTensionFront", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_15getTensionFront, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_14getTensionFront},
  {"calculate_init", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_17calculate_init, METH_NOARGS, 0},
  {"prestep", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_19prestep, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_18prestep},
  {"poststep", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_21poststep, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_20poststep},
  {"setApplyDrag", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_23setApplyDrag, METH_O, 0},
  {"setApplyAddedMass", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_25setApplyAddedMass, METH_O, 0},
  {"setApplyBuoyancy", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_27setApplyBuoyancy, METH_O, 0},
  {"setNodesPositionFunction", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_29setNodesPositionFunction, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_28setNodesPositionFunction},
  {"setFluidVelocityFunction", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_31setFluidVelocityFunction, METH_O, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_30setFluidVelocityFunction},
  {"fixFrontNode", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_33fixFrontNode, METH_O, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_32fixFrontNode},
  {"fixBackNode", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_35fixBackNode, METH_O, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_34fixBackNode},
  {"attachBackNodeToBody", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_37attachBackNodeToBody, METH_O, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_36attachBackNodeToBody},
  {"attachFrontNodeToBody", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_39attachFrontNodeToBody, METH_O, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_38attachFrontNodeToBody},
  {"getTensionElement", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_41getTensionElement, METH_VARARGS|METH_KEYWORDS, 0},
  {"getNodesTension", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_43getNodesTension, METH_VARARGS|METH_KEYWORDS, 0},
  {"setDragCoefficients", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_45setDragCoefficients, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_44setDragCoefficients},
  {"setAddedMassCoefficients", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_47setAddedMassCoefficients, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_46setAddedMassCoefficients},
  {"setNodesPosition", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_49setNodesPosition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_48setNodesPosition},
  {"buildNodes", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_51buildNodes, METH_NOARGS, 0},
  {"getNodesPosition", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_53getNodesPosition, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_52getNodesPosition},
  {"getNodesVelocity", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_55getNodesVelocity, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_54getNodesVelocity},
  {"getNodesAcceleration", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_57getNodesAcceleration, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_56getNodesAcceleration},
  {"getDragForces", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_59getDragForces, METH_NOARGS, 0},
  {"getAddedMassForces", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_61getAddedMassForces, METH_NOARGS, 0},
  {"setIyy", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_63setIyy, METH_VARARGS|METH_KEYWORDS, 0},
  {"getNodesD", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_65getNodesD, METH_NOARGS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_64getNodesD},
  {"setContactMaterial", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_67setContactMaterial, METH_O, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_66setContactMaterial},
  {"setExternalForces", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_69setExternalForces, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_14ProtChMoorings_68setExternalForces},
  {"updateForces", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_71updateForces, METH_NOARGS, 0},
  {"setFluidDensityAtNodes", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_73setFluidDensityAtNodes, METH_O, 0},
  {"setFluidVelocityAtNodes", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_75setFluidVelocityAtNodes, METH_O, 0},
  {"setFluidAccelerationAtNodes", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_14ProtChMoorings_77setFluidAccelerationAtNodes, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3mbd_11ChRigidBody_ProtChMoorings[] = {
  {(char *)"record_file", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_record_file, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_record_file, (char *)0, 0},
  {(char *)"model", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_model, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_model, (char *)0, 0},
  {(char *)"ProtChSystem", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_ProtChSystem, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_ProtChSystem, (char *)0, 0},
  {(char *)"Mesh", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_Mesh, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_Mesh, (char *)0, 0},
  {(char *)"nd", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nd, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nd, (char *)0, 0},
  {(char *)"nodes_function", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_function, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_function, (char *)0, 0},
  {(char *)"nodes_function_tangent", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_function_tangent, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_function_tangent, (char *)0, 0},
  {(char *)"fluid_velocity_function", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_function, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_function, (char *)0, 0},
  {(char *)"body_front", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_body_front, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_body_front, (char *)0, 0},
  {(char *)"body_back", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_body_back, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_body_back, (char *)0, 0},
  {(char *)"front_body", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_front_body, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_front_body, (char *)0, 0},
  {(char *)"back_body", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_back_body, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_back_body, (char *)0, 0},
  {(char *)"nodes_built", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_built, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_built, (char *)0, 0},
  {(char *)"external_forces_from_ns", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_external_forces_from_ns, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_external_forces_from_ns, (char *)0, 0},
  {(char *)"external_forces_manual", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_external_forces_manual, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_external_forces_manual, (char *)0, 0},
  {(char *)"fluid_density_array", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_density_array, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_density_array, (char *)0, 0},
  {(char *)"fluid_velocity_array", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_array, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_array, (char *)0, 0},
  {(char *)"fluid_velocity_array_previous", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_array_previous, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_velocity_array_previous, (char *)0, 0},
  {(char *)"fluid_acceleration_array", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_acceleration_array, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_fluid_acceleration_array, (char *)0, 0},
  {(char *)"name", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_name, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_name, (char *)0, 0},
  {(char *)"beam_type", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_beam_type, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_beam_type, (char *)0, 0},
  {(char *)"nodes_nb", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_nb, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nodes_nb, (char *)0, 0},
  {(char *)"nb_elems", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nb_elems, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nb_elems, (char *)0, 0},
  {(char *)"_record_etas", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings__record_etas, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings__record_etas, (char *)0, 0},
  {(char *)"initialized", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_initialized, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_initialized, (char *)0, 0},
  {(char *)"nearest_node_array", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_nearest_node_array, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_nearest_node_array, (char *)0, 0},
  {(char *)"containing_element_array", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_containing_element_array, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_containing_element_array, (char *)0, 0},
  {(char *)"owning_rank", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_owning_rank, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_owning_rank, (char *)0, 0},
  {(char *)"hdfFileName", __pyx_getprop_3mbd_11ChRigidBody_14ProtChMoorings_hdfFileName, __pyx_setprop_3mbd_11ChRigidBody_14ProtChMoorings_hdfFileName, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3mbd_11ChRigidBody_ProtChMoorings = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.ProtChMoorings", /*tp_name*/
  sizeof(struct __pyx_obj_3mbd_11ChRigidBody_ProtChMoorings), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3mbd_11ChRigidBody_ProtChMoorings, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Class for building mooring cables\n\n    Parameters\n    ----------\n    system: System\n        Class instance of the system.\n    mesh: Mesh\n        Class instance of the mesh.\n    length: np.ndarray\n        Length of cable segments. Must be an array, if the cable only\n        has one type of segment (e.g. only one type of chain), an\n        array of length 1 can be passed.\n    nb_elems: np.ndarray\n        Number of elements per segments.\n    d: np.ndarray\n        Diameter of segments.\n    rho: np.ndarray\n        Density of segments.\n    E: np.ndarray\n        Young's modulus of segments.\n    beam_type: str\n        Type of elements (default: \"CableANCF\").\n    ", /*tp_doc*/
  __pyx_tp_traverse_3mbd_11ChRigidBody_ProtChMoorings, /*tp_traverse*/
  __pyx_tp_clear_3mbd_11ChRigidBody_ProtChMoorings, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3mbd_11ChRigidBody_ProtChMoorings, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3mbd_11ChRigidBody_ProtChMoorings, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3mbd_11ChRigidBody_ProtChMoorings, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3mbd_11ChRigidBody_ProtChAddedMass(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)o);
  p->model = Py_None; Py_INCREF(Py_None);
  p->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3mbd_11ChRigidBody_ProtChAddedMass(PyObject *o) {
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->model);
  Py_CLEAR(p->ProtChSystem);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3mbd_11ChRigidBody_ProtChAddedMass(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)o;
  if (p->model) {
    e = (*v)(p->model, a); if (e) return e;
  }
  if (p->ProtChSystem) {
    e = (*v)(((PyObject*)p->ProtChSystem), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3mbd_11ChRigidBody_ProtChAddedMass(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *p = (struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass *)o;
  tmp = ((PyObject*)p->model);
  p->model = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ProtChSystem);
  p->ProtChSystem = ((struct __pyx_obj_3mbd_11ChRigidBody_ProtChSystem *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_15ProtChAddedMass_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5model_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_15ProtChAddedMass_model(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5model_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5model_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3mbd_11ChRigidBody_15ProtChAddedMass_ProtChSystem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_1__get__(o);
}

static int __pyx_setprop_3mbd_11ChRigidBody_15ProtChAddedMass_ProtChSystem(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_3__set__(o, v);
  }
  else {
    return __pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_12ProtChSystem_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_3mbd_11ChRigidBody_ProtChAddedMass[] = {
  {"attachModel", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_3attachModel, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_15ProtChAddedMass_2attachModel},
  {"attachAuxiliaryVariables", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_5attachAuxiliaryVariables, METH_O, 0},
  {"calculate_init", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_7calculate_init, METH_NOARGS, 0},
  {"calculate", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_15ProtChAddedMass_9calculate, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3mbd_11ChRigidBody_ProtChAddedMass[] = {
  {(char *)"model", __pyx_getprop_3mbd_11ChRigidBody_15ProtChAddedMass_model, __pyx_setprop_3mbd_11ChRigidBody_15ProtChAddedMass_model, (char *)0, 0},
  {(char *)"ProtChSystem", __pyx_getprop_3mbd_11ChRigidBody_15ProtChAddedMass_ProtChSystem, __pyx_setprop_3mbd_11ChRigidBody_15ProtChAddedMass_ProtChSystem, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3mbd_11ChRigidBody_ProtChAddedMass = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.ProtChAddedMass", /*tp_name*/
  sizeof(struct __pyx_obj_3mbd_11ChRigidBody_ProtChAddedMass), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3mbd_11ChRigidBody_ProtChAddedMass, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Class (hack) to attach added mass model to ProtChSystem\n    This auxiliary variable is ONLY used to attach the AddedMass\n    model to a ProtChSystem\n    ", /*tp_doc*/
  __pyx_tp_traverse_3mbd_11ChRigidBody_ProtChAddedMass, /*tp_traverse*/
  __pyx_tp_clear_3mbd_11ChRigidBody_ProtChAddedMass, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3mbd_11ChRigidBody_ProtChAddedMass, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3mbd_11ChRigidBody_ProtChAddedMass, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3mbd_11ChRigidBody_ProtChAddedMass, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *__pyx_freelist_3mbd_11ChRigidBody___pyx_scope_struct____cinit__[8];
static int __pyx_freecount_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ = 0;

static PyObject *__pyx_tp_new_3mbd_11ChRigidBody___pyx_scope_struct____cinit__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__)))) {
    o = (PyObject*)__pyx_freelist_3mbd_11ChRigidBody___pyx_scope_struct____cinit__[--__pyx_freecount_3mbd_11ChRigidBody___pyx_scope_struct____cinit__];
    memset(o, 0, sizeof(struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *)o);
  p->__pyx_v_length.data = NULL;
  p->__pyx_v_length.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc_3mbd_11ChRigidBody___pyx_scope_struct____cinit__(PyObject *o) {
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *p = (struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_check_arrays);
  __PYX_XDEC_MEMVIEW(&p->__pyx_v_length, 1);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__)))) {
    __pyx_freelist_3mbd_11ChRigidBody___pyx_scope_struct____cinit__[__pyx_freecount_3mbd_11ChRigidBody___pyx_scope_struct____cinit__++] = ((struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3mbd_11ChRigidBody___pyx_scope_struct____cinit__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *p = (struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *)o;
  if (p->__pyx_v_check_arrays) {
    e = (*v)(p->__pyx_v_check_arrays, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3mbd_11ChRigidBody___pyx_scope_struct____cinit__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *p = (struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *)o;
  tmp = ((PyObject*)p->__pyx_v_check_arrays);
  p->__pyx_v_check_arrays = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.__pyx_scope_struct____cinit__", /*tp_name*/
  sizeof(struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3mbd_11ChRigidBody___pyx_scope_struct____cinit__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3mbd_11ChRigidBody___pyx_scope_struct____cinit__, /*tp_traverse*/
  __pyx_tp_clear_3mbd_11ChRigidBody___pyx_scope_struct____cinit__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3mbd_11ChRigidBody___pyx_scope_struct____cinit__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *__pyx_freelist_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr[--__pyx_freecount_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr[__pyx_freecount_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_v);
  p->__pyx_v_v = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_array___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  0, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryview___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryviewslice___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "mbd.ChRigidBody._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"attachNodeToNode", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_5attachNodeToNode, METH_VARARGS|METH_KEYWORDS, 0},
  {"linkBodies", (PyCFunction)__pyx_pw_3mbd_11ChRigidBody_7linkBodies, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3mbd_11ChRigidBody_6linkBodies},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "ChRigidBody",
    __pyx_k_Coupling_between_Chrono_and_Pro, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_2_0, __pyx_k_2_0, sizeof(__pyx_k_2_0), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_kp_s_AM_csv, __pyx_k_AM_csv, sizeof(__pyx_k_AM_csv), 0, 0, 1, 0},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_s_Added_Mass_Matrix, __pyx_k_Added_Mass_Matrix, sizeof(__pyx_k_Added_Mass_Matrix), 0, 0, 1, 0},
  {&__pyx_kp_s_Added_mass_matrix_must_be_6x6_np, __pyx_k_Added_mass_matrix_must_be_6x6_np, sizeof(__pyx_k_Added_mass_matrix_must_be_6x6_np), 0, 0, 1, 0},
  {&__pyx_n_s_Aij, __pyx_k_Aij, sizeof(__pyx_k_Aij), 0, 0, 1, 1},
  {&__pyx_kp_s_Aij_csv, __pyx_k_Aij_csv, sizeof(__pyx_k_Aij_csv), 0, 0, 1, 0},
  {&__pyx_n_s_Archiver, __pyx_k_Archiver, sizeof(__pyx_k_Archiver), 0, 0, 1, 1},
  {&__pyx_n_s_Attribute, __pyx_k_Attribute, sizeof(__pyx_k_Attribute), 0, 0, 1, 1},
  {&__pyx_n_s_AttributeType, __pyx_k_AttributeType, sizeof(__pyx_k_AttributeType), 0, 0, 1, 1},
  {&__pyx_n_s_AuxiliaryVariables, __pyx_k_AuxiliaryVariables, sizeof(__pyx_k_AuxiliaryVariables), 0, 0, 1, 1},
  {&__pyx_n_s_BodyDynamics, __pyx_k_BodyDynamics, sizeof(__pyx_k_BodyDynamics), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Building_k_d_tree_for_mooring_no, __pyx_k_Building_k_d_tree_for_mooring_no, sizeof(__pyx_k_Building_k_d_tree_for_mooring_no), 0, 0, 1, 0},
  {&__pyx_kp_s_Building_k_d_tree_for_mooring_no_2, __pyx_k_Building_k_d_tree_for_mooring_no_2, sizeof(__pyx_k_Building_k_d_tree_for_mooring_no_2), 0, 0, 1, 0},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_n_s_CSS, __pyx_k_CSS, sizeof(__pyx_k_CSS), 0, 0, 1, 1},
  {&__pyx_n_b_CableANCF, __pyx_k_CableANCF, sizeof(__pyx_k_CableANCF), 0, 0, 0, 1},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_Center, __pyx_k_Center, sizeof(__pyx_k_Center), 0, 0, 1, 1},
  {&__pyx_n_s_ChRigidBody, __pyx_k_ChRigidBody, sizeof(__pyx_k_ChRigidBody), 0, 0, 1, 1},
  {&__pyx_kp_s_Chrono_poststep, __pyx_k_Chrono_poststep, sizeof(__pyx_k_Chrono_poststep), 0, 0, 1, 0},
  {&__pyx_kp_s_Chrono_prestep, __pyx_k_Chrono_prestep, sizeof(__pyx_k_Chrono_prestep), 0, 0, 1, 0},
  {&__pyx_kp_s_Chrono_system_to_t, __pyx_k_Chrono_system_to_t, sizeof(__pyx_k_Chrono_system_to_t), 0, 0, 1, 0},
  {&__pyx_n_s_Collection, __pyx_k_Collection, sizeof(__pyx_k_Collection), 0, 0, 1, 1},
  {&__pyx_n_s_CollectionType, __pyx_k_CollectionType, sizeof(__pyx_k_CollectionType), 0, 0, 1, 1},
  {&__pyx_n_s_Comm, __pyx_k_Comm, sizeof(__pyx_k_Comm), 0, 0, 1, 1},
  {&__pyx_kp_s_Coupling_scheme_requested_unknow, __pyx_k_Coupling_scheme_requested_unknow, sizeof(__pyx_k_Coupling_scheme_requested_unknow), 0, 0, 1, 0},
  {&__pyx_n_s_DataItem, __pyx_k_DataItem, sizeof(__pyx_k_DataItem), 0, 0, 1, 1},
  {&__pyx_n_s_DataType, __pyx_k_DataType, sizeof(__pyx_k_DataType), 0, 0, 1, 1},
  {&__pyx_n_s_Dimensions, __pyx_k_Dimensions, sizeof(__pyx_k_Dimensions), 0, 0, 1, 1},
  {&__pyx_n_s_Domain, __pyx_k_Domain, sizeof(__pyx_k_Domain), 0, 0, 1, 1},
  {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
  {&__pyx_n_s_ET, __pyx_k_ET, sizeof(__pyx_k_ET), 0, 0, 1, 1},
  {&__pyx_n_s_Element, __pyx_k_Element, sizeof(__pyx_k_Element), 0, 0, 1, 1},
  {&__pyx_n_s_ElementTree, __pyx_k_ElementTree, sizeof(__pyx_k_ElementTree), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_Euler, __pyx_k_Euler, sizeof(__pyx_k_Euler), 0, 0, 1, 1},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_n_s_F_Aij, __pyx_k_F_Aij, sizeof(__pyx_k_F_Aij), 0, 0, 1, 1},
  {&__pyx_kp_s_F_applied, __pyx_k_F_applied, sizeof(__pyx_k_F_applied), 0, 0, 1, 0},
  {&__pyx_n_s_F_applied_2, __pyx_k_F_applied_2, sizeof(__pyx_k_F_applied_2), 0, 0, 1, 1},
  {&__pyx_n_s_F_prot, __pyx_k_F_prot, sizeof(__pyx_k_F_prot), 0, 0, 1, 1},
  {&__pyx_n_s_File, __pyx_k_File, sizeof(__pyx_k_File), 0, 0, 1, 1},
  {&__pyx_kp_s_Finished_init, __pyx_k_Finished_init, sizeof(__pyx_k_Finished_init), 0, 0, 1, 0},
  {&__pyx_kp_s_Finished_search_for_cable_nodes, __pyx_k_Finished_search_for_cable_nodes, sizeof(__pyx_k_Finished_search_for_cable_nodes), 0, 0, 1, 0},
  {&__pyx_n_s_Float, __pyx_k_Float, sizeof(__pyx_k_Float), 0, 0, 1, 1},
  {&__pyx_n_s_Format, __pyx_k_Format, sizeof(__pyx_k_Format), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_s_Full_Mass_Matrix, __pyx_k_Full_Mass_Matrix, sizeof(__pyx_k_Full_Mass_Matrix), 0, 0, 1, 0},
  {&__pyx_n_s_Fx, __pyx_k_Fx, sizeof(__pyx_k_Fx), 0, 0, 1, 1},
  {&__pyx_n_s_Fx_Aij, __pyx_k_Fx_Aij, sizeof(__pyx_k_Fx_Aij), 0, 0, 1, 1},
  {&__pyx_n_s_Fx_applied, __pyx_k_Fx_applied, sizeof(__pyx_k_Fx_applied), 0, 0, 1, 1},
  {&__pyx_n_s_Fx_prot, __pyx_k_Fx_prot, sizeof(__pyx_k_Fx_prot), 0, 0, 1, 1},
  {&__pyx_n_s_Fy, __pyx_k_Fy, sizeof(__pyx_k_Fy), 0, 0, 1, 1},
  {&__pyx_n_s_Fy_Aij, __pyx_k_Fy_Aij, sizeof(__pyx_k_Fy_Aij), 0, 0, 1, 1},
  {&__pyx_n_s_Fy_applied, __pyx_k_Fy_applied, sizeof(__pyx_k_Fy_applied), 0, 0, 1, 1},
  {&__pyx_n_s_Fy_prot, __pyx_k_Fy_prot, sizeof(__pyx_k_Fy_prot), 0, 0, 1, 1},
  {&__pyx_n_s_Fz, __pyx_k_Fz, sizeof(__pyx_k_Fz), 0, 0, 1, 1},
  {&__pyx_n_s_Fz_Aij, __pyx_k_Fz_Aij, sizeof(__pyx_k_Fz_Aij), 0, 0, 1, 1},
  {&__pyx_n_s_Fz_applied, __pyx_k_Fz_applied, sizeof(__pyx_k_Fz_applied), 0, 0, 1, 1},
  {&__pyx_n_s_Fz_prot, __pyx_k_Fz_prot, sizeof(__pyx_k_Fz_prot), 0, 0, 1, 1},
  {&__pyx_n_s_Geometry, __pyx_k_Geometry, sizeof(__pyx_k_Geometry), 0, 0, 1, 1},
  {&__pyx_n_s_Get_size, __pyx_k_Get_size, sizeof(__pyx_k_Get_size), 0, 0, 1, 1},
  {&__pyx_n_s_Grid, __pyx_k_Grid, sizeof(__pyx_k_Grid), 0, 0, 1, 1},
  {&__pyx_n_s_GridType, __pyx_k_GridType, sizeof(__pyx_k_GridType), 0, 0, 1, 1},
  {&__pyx_n_s_HDF, __pyx_k_HDF, sizeof(__pyx_k_HDF), 0, 0, 1, 1},
  {&__pyx_n_s_HHT, __pyx_k_HHT, sizeof(__pyx_k_HHT), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_n_s_Int, __pyx_k_Int, sizeof(__pyx_k_Int), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_Iyy, __pyx_k_Iyy, sizeof(__pyx_k_Iyy), 0, 0, 1, 1},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_n_s_MAXLOC, __pyx_k_MAXLOC, sizeof(__pyx_k_MAXLOC), 0, 0, 1, 1},
  {&__pyx_n_s_MINLOC, __pyx_k_MINLOC, sizeof(__pyx_k_MINLOC), 0, 0, 1, 1},
  {&__pyx_n_s_MPI, __pyx_k_MPI, sizeof(__pyx_k_MPI), 0, 0, 1, 1},
  {&__pyx_n_s_M_applied, __pyx_k_M_applied, sizeof(__pyx_k_M_applied), 0, 0, 1, 1},
  {&__pyx_n_s_M_prot, __pyx_k_M_prot, sizeof(__pyx_k_M_prot), 0, 0, 1, 1},
  {&__pyx_kp_s_Mass_Matrix, __pyx_k_Mass_Matrix, sizeof(__pyx_k_Mass_Matrix), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_Mesh, __pyx_k_Mesh, sizeof(__pyx_k_Mesh), 0, 0, 1, 1},
  {&__pyx_n_s_Mx, __pyx_k_Mx, sizeof(__pyx_k_Mx), 0, 0, 1, 1},
  {&__pyx_n_s_Mx_applied, __pyx_k_Mx_applied, sizeof(__pyx_k_Mx_applied), 0, 0, 1, 1},
  {&__pyx_n_s_Mx_prot, __pyx_k_Mx_prot, sizeof(__pyx_k_Mx_prot), 0, 0, 1, 1},
  {&__pyx_n_s_My, __pyx_k_My, sizeof(__pyx_k_My), 0, 0, 1, 1},
  {&__pyx_n_s_My_applied, __pyx_k_My_applied, sizeof(__pyx_k_My_applied), 0, 0, 1, 1},
  {&__pyx_n_s_My_prot, __pyx_k_My_prot, sizeof(__pyx_k_My_prot), 0, 0, 1, 1},
  {&__pyx_n_s_Mz, __pyx_k_Mz, sizeof(__pyx_k_Mz), 0, 0, 1, 1},
  {&__pyx_n_s_Mz_applied, __pyx_k_Mz_applied, sizeof(__pyx_k_Mz_applied), 0, 0, 1, 1},
  {&__pyx_n_s_Mz_prot, __pyx_k_Mz_prot, sizeof(__pyx_k_Mz_prot), 0, 0, 1, 1},
  {&__pyx_n_s_Name, __pyx_k_Name, sizeof(__pyx_k_Name), 0, 0, 1, 1},
  {&__pyx_n_s_Node, __pyx_k_Node, sizeof(__pyx_k_Node), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NumberOfElements, __pyx_k_NumberOfElements, sizeof(__pyx_k_NumberOfElements), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_Polyline, __pyx_k_Polyline, sizeof(__pyx_k_Polyline), 0, 0, 1, 1},
  {&__pyx_kp_s_Position_aray_must_be_of_length, __pyx_k_Position_aray_must_be_of_length, sizeof(__pyx_k_Position_aray_must_be_of_length), 0, 0, 1, 0},
  {&__pyx_kp_s_Position_aray_must_be_of_length_2, __pyx_k_Position_aray_must_be_of_length_2, sizeof(__pyx_k_Position_aray_must_be_of_length_2), 0, 0, 1, 0},
  {&__pyx_n_s_Precision, __pyx_k_Precision, sizeof(__pyx_k_Precision), 0, 0, 1, 1},
  {&__pyx_kp_s_Prediction_requested_unknown, __pyx_k_Prediction_requested_unknown, sizeof(__pyx_k_Prediction_requested_unknown), 0, 0, 1, 0},
  {&__pyx_n_s_Profiling, __pyx_k_Profiling, sizeof(__pyx_k_Profiling), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_SETTING_ROT, __pyx_k_SETTING_ROT, sizeof(__pyx_k_SETTING_ROT), 0, 0, 1, 0},
  {&__pyx_n_s_Scalar, __pyx_k_Scalar, sizeof(__pyx_k_Scalar), 0, 0, 1, 1},
  {&__pyx_n_s_SetPosition, __pyx_k_SetPosition, sizeof(__pyx_k_SetPosition), 0, 0, 1, 1},
  {&__pyx_kp_s_Setup_initial, __pyx_k_Setup_initial, sizeof(__pyx_k_Setup_initial), 0, 0, 1, 0},
  {&__pyx_kp_s_Shape, __pyx_k_Shape, sizeof(__pyx_k_Shape), 0, 0, 1, 0},
  {&__pyx_kp_s_Solved_Chrono_system_to_t, __pyx_k_Solved_Chrono_system_to_t, sizeof(__pyx_k_Solved_Chrono_system_to_t), 0, 0, 1, 0},
  {&__pyx_kp_s_Solving_Chrono_system_from_t, __pyx_k_Solving_Chrono_system_from_t, sizeof(__pyx_k_Solving_Chrono_system_from_t), 0, 0, 1, 0},
  {&__pyx_n_s_SpatialTools, __pyx_k_SpatialTools, sizeof(__pyx_k_SpatialTools), 0, 0, 1, 1},
  {&__pyx_kp_s_Spatial_Domain, __pyx_k_Spatial_Domain, sizeof(__pyx_k_Spatial_Domain), 0, 0, 1, 0},
  {&__pyx_kp_s_Starting_distance_search_for_cab, __pyx_k_Starting_distance_search_for_cab, sizeof(__pyx_k_Starting_distance_search_for_cab), 0, 0, 1, 0},
  {&__pyx_kp_s_Starting_init, __pyx_k_Starting_init, sizeof(__pyx_k_Starting_init), 0, 0, 1, 0},
  {&__pyx_kp_s_Starting_k_d_tree_search_for_cab, __pyx_k_Starting_k_d_tree_search_for_cab, sizeof(__pyx_k_Starting_k_d_tree_search_for_cab), 0, 0, 1, 0},
  {&__pyx_n_s_SubElement, __pyx_k_SubElement, sizeof(__pyx_k_SubElement), 0, 0, 1, 1},
  {&__pyx_n_s_Tb0, __pyx_k_Tb0, sizeof(__pyx_k_Tb0), 0, 0, 1, 1},
  {&__pyx_n_s_Tb1, __pyx_k_Tb1, sizeof(__pyx_k_Tb1), 0, 0, 1, 1},
  {&__pyx_n_s_Tb2, __pyx_k_Tb2, sizeof(__pyx_k_Tb2), 0, 0, 1, 1},
  {&__pyx_n_s_Temporal, __pyx_k_Temporal, sizeof(__pyx_k_Temporal), 0, 0, 1, 1},
  {&__pyx_n_s_Tf0, __pyx_k_Tf0, sizeof(__pyx_k_Tf0), 0, 0, 1, 1},
  {&__pyx_n_s_Tf1, __pyx_k_Tf1, sizeof(__pyx_k_Tf1), 0, 0, 1, 1},
  {&__pyx_n_s_Tf2, __pyx_k_Tf2, sizeof(__pyx_k_Tf2), 0, 0, 1, 1},
  {&__pyx_n_s_Time, __pyx_k_Time, sizeof(__pyx_k_Time), 0, 0, 1, 1},
  {&__pyx_n_s_Topology, __pyx_k_Topology, sizeof(__pyx_k_Topology), 0, 0, 1, 1},
  {&__pyx_n_s_Trapezoidal, __pyx_k_Trapezoidal, sizeof(__pyx_k_Trapezoidal), 0, 0, 1, 1},
  {&__pyx_n_s_Type, __pyx_k_Type, sizeof(__pyx_k_Type), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_Uniform, __pyx_k_Uniform, sizeof(__pyx_k_Uniform), 0, 0, 1, 1},
  {&__pyx_n_s_Value, __pyx_k_Value, sizeof(__pyx_k_Value), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Version, __pyx_k_Version, sizeof(__pyx_k_Version), 0, 0, 1, 1},
  {&__pyx_n_s_XYZ, __pyx_k_XYZ, sizeof(__pyx_k_XYZ), 0, 0, 1, 1},
  {&__pyx_n_s_Xdmf, __pyx_k_Xdmf, sizeof(__pyx_k_Xdmf), 0, 0, 1, 1},
  {&__pyx_n_s__172, __pyx_k__172, sizeof(__pyx_k__172), 0, 0, 1, 1},
  {&__pyx_kp_s__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 0, 1, 0},
  {&__pyx_kp_s__78, __pyx_k__78, sizeof(__pyx_k__78), 0, 0, 1, 0},
  {&__pyx_kp_s__85, __pyx_k__85, sizeof(__pyx_k__85), 0, 0, 1, 0},
  {&__pyx_kp_s__90, __pyx_k__90, sizeof(__pyx_k__90), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_acc, __pyx_k_acc, sizeof(__pyx_k_acc), 0, 0, 1, 1},
  {&__pyx_n_s_acceleration, __pyx_k_acceleration, sizeof(__pyx_k_acceleration), 0, 0, 1, 1},
  {&__pyx_n_s_acceleration_t, __pyx_k_acceleration_t, sizeof(__pyx_k_acceleration_t), 0, 0, 1, 1},
  {&__pyx_n_s_addSubcomponent, __pyx_k_addSubcomponent, sizeof(__pyx_k_addSubcomponent), 0, 0, 1, 1},
  {&__pyx_n_s_all_values, __pyx_k_all_values, sizeof(__pyx_k_all_values), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_allreduce, __pyx_k_allreduce, sizeof(__pyx_k_allreduce), 0, 0, 1, 1},
  {&__pyx_n_s_am_t, __pyx_k_am_t, sizeof(__pyx_k_am_t), 0, 0, 1, 1},
  {&__pyx_n_s_amx, __pyx_k_amx, sizeof(__pyx_k_amx), 0, 0, 1, 1},
  {&__pyx_n_s_amx_t, __pyx_k_amx_t, sizeof(__pyx_k_amx_t), 0, 0, 1, 1},
  {&__pyx_n_s_amy, __pyx_k_amy, sizeof(__pyx_k_amy), 0, 0, 1, 1},
  {&__pyx_n_s_amy_t, __pyx_k_amy_t, sizeof(__pyx_k_amy_t), 0, 0, 1, 1},
  {&__pyx_n_s_amz, __pyx_k_amz, sizeof(__pyx_k_amz), 0, 0, 1, 1},
  {&__pyx_n_s_amz_t, __pyx_k_amz_t, sizeof(__pyx_k_amz_t), 0, 0, 1, 1},
  {&__pyx_n_s_anchor, __pyx_k_anchor, sizeof(__pyx_k_anchor), 0, 0, 1, 1},
  {&__pyx_n_s_ang, __pyx_k_ang, sizeof(__pyx_k_ang), 0, 0, 1, 1},
  {&__pyx_n_s_ang2, __pyx_k_ang2, sizeof(__pyx_k_ang2), 0, 0, 1, 1},
  {&__pyx_kp_s_ang2_and_t_should_have_the_same, __pyx_k_ang2_and_t_should_have_the_same, sizeof(__pyx_k_ang2_and_t_should_have_the_same), 0, 0, 1, 0},
  {&__pyx_n_s_ang3, __pyx_k_ang3, sizeof(__pyx_k_ang3), 0, 0, 1, 1},
  {&__pyx_kp_s_ang3_and_t_should_have_the_same, __pyx_k_ang3_and_t_should_have_the_same, sizeof(__pyx_k_ang3_and_t_should_have_the_same), 0, 0, 1, 0},
  {&__pyx_n_s_ang_acc, __pyx_k_ang_acc, sizeof(__pyx_k_ang_acc), 0, 0, 1, 1},
  {&__pyx_n_s_ang_acceleration, __pyx_k_ang_acceleration, sizeof(__pyx_k_ang_acceleration), 0, 0, 1, 1},
  {&__pyx_kp_s_ang_and_t_should_have_the_same_l, __pyx_k_ang_and_t_should_have_the_same_l, sizeof(__pyx_k_ang_and_t_should_have_the_same_l), 0, 0, 1, 0},
  {&__pyx_n_s_ang_ax, __pyx_k_ang_ax, sizeof(__pyx_k_ang_ax), 0, 0, 1, 1},
  {&__pyx_n_s_ang_ay, __pyx_k_ang_ay, sizeof(__pyx_k_ang_ay), 0, 0, 1, 1},
  {&__pyx_n_s_ang_az, __pyx_k_ang_az, sizeof(__pyx_k_ang_az), 0, 0, 1, 1},
  {&__pyx_n_s_ang_disp, __pyx_k_ang_disp, sizeof(__pyx_k_ang_disp), 0, 0, 1, 1},
  {&__pyx_n_s_ang_ux, __pyx_k_ang_ux, sizeof(__pyx_k_ang_ux), 0, 0, 1, 1},
  {&__pyx_n_s_ang_uy, __pyx_k_ang_uy, sizeof(__pyx_k_ang_uy), 0, 0, 1, 1},
  {&__pyx_n_s_ang_uz, __pyx_k_ang_uz, sizeof(__pyx_k_ang_uz), 0, 0, 1, 1},
  {&__pyx_n_s_ang_vel, __pyx_k_ang_vel, sizeof(__pyx_k_ang_vel), 0, 0, 1, 1},
  {&__pyx_n_s_ang_velocity, __pyx_k_ang_velocity, sizeof(__pyx_k_ang_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_ar, __pyx_k_ar, sizeof(__pyx_k_ar), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_kp_s_arrays_are_not_of_same_length, __pyx_k_arrays_are_not_of_same_length, sizeof(__pyx_k_arrays_are_not_of_same_length), 0, 0, 1, 0},
  {&__pyx_n_s_attachShape, __pyx_k_attachShape, sizeof(__pyx_k_attachShape), 0, 0, 1, 1},
  {&__pyx_n_s_auxiliaryVariables, __pyx_k_auxiliaryVariables, sizeof(__pyx_k_auxiliaryVariables), 0, 0, 1, 1},
  {&__pyx_n_s_ax, __pyx_k_ax, sizeof(__pyx_k_ax), 0, 0, 1, 1},
  {&__pyx_n_s_ax_t, __pyx_k_ax_t, sizeof(__pyx_k_ax_t), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_ay, __pyx_k_ay, sizeof(__pyx_k_ay), 0, 0, 1, 1},
  {&__pyx_n_s_ay_t, __pyx_k_ay_t, sizeof(__pyx_k_ay_t), 0, 0, 1, 1},
  {&__pyx_n_s_az, __pyx_k_az, sizeof(__pyx_k_az), 0, 0, 1, 1},
  {&__pyx_n_s_az_t, __pyx_k_az_t, sizeof(__pyx_k_az_t), 0, 0, 1, 1},
  {&__pyx_n_b_backwardEuler, __pyx_k_backwardEuler, sizeof(__pyx_k_backwardEuler), 0, 0, 0, 1},
  {&__pyx_n_s_barrier, __pyx_k_barrier, sizeof(__pyx_k_barrier), 0, 0, 1, 1},
  {&__pyx_n_s_barycenter, __pyx_k_barycenter, sizeof(__pyx_k_barycenter), 0, 0, 1, 1},
  {&__pyx_n_s_barycenters, __pyx_k_barycenters, sizeof(__pyx_k_barycenters), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_bcast, __pyx_k_bcast, sizeof(__pyx_k_bcast), 0, 0, 1, 1},
  {&__pyx_n_s_bd, __pyx_k_bd, sizeof(__pyx_k_bd), 0, 0, 1, 1},
  {&__pyx_n_s_beam_type, __pyx_k_beam_type, sizeof(__pyx_k_beam_type), 0, 0, 1, 1},
  {&__pyx_n_s_body1, __pyx_k_body1, sizeof(__pyx_k_body1), 0, 0, 1, 1},
  {&__pyx_n_s_body2, __pyx_k_body2, sizeof(__pyx_k_body2), 0, 0, 1, 1},
  {&__pyx_n_s_buildNodes, __pyx_k_buildNodes, sizeof(__pyx_k_buildNodes), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_cKDTree, __pyx_k_cKDTree, sizeof(__pyx_k_cKDTree), 0, 0, 1, 1},
  {&__pyx_n_s_cable1, __pyx_k_cable1, sizeof(__pyx_k_cable1), 0, 0, 1, 1},
  {&__pyx_n_s_cable2, __pyx_k_cable2, sizeof(__pyx_k_cable2), 0, 0, 1, 1},
  {&__pyx_n_s_cable_nb, __pyx_k_cable_nb, sizeof(__pyx_k_cable_nb), 0, 0, 1, 1},
  {&__pyx_n_s_calculate_init, __pyx_k_calculate_init, sizeof(__pyx_k_calculate_init), 0, 0, 1, 1},
  {&__pyx_kp_s_call_buildNodes_before_calling_t, __pyx_k_call_buildNodes_before_calling_t, sizeof(__pyx_k_call_buildNodes_before_calling_t), 0, 0, 1, 0},
  {&__pyx_n_s_checkedElements, __pyx_k_checkedElements, sizeof(__pyx_k_checkedElements), 0, 0, 1, 1},
  {&__pyx_n_s_cinit___locals_genexpr, __pyx_k_cinit___locals_genexpr, sizeof(__pyx_k_cinit___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_cinit___locals_lambda, __pyx_k_cinit___locals_lambda, sizeof(__pyx_k_cinit___locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_coefficients, __pyx_k_coefficients, sizeof(__pyx_k_coefficients), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_comm, __pyx_k_comm, sizeof(__pyx_k_comm), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_coords, __pyx_k_coords, sizeof(__pyx_k_coords), 0, 0, 1, 1},
  {&__pyx_n_s_coordsys, __pyx_k_coordsys, sizeof(__pyx_k_coordsys), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_create_dataset, __pyx_k_create_dataset, sizeof(__pyx_k_create_dataset), 0, 0, 1, 1},
  {&__pyx_kp_s_csv, __pyx_k_csv, sizeof(__pyx_k_csv), 0, 0, 1, 0},
  {&__pyx_n_s_csv_2, __pyx_k_csv_2, sizeof(__pyx_k_csv_2), 0, 0, 1, 1},
  {&__pyx_n_s_csvfile, __pyx_k_csvfile, sizeof(__pyx_k_csvfile), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_damping, __pyx_k_damping, sizeof(__pyx_k_damping), 0, 0, 1, 1},
  {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
  {&__pyx_n_s_deepcopy, __pyx_k_deepcopy, sizeof(__pyx_k_deepcopy), 0, 0, 1, 1},
  {&__pyx_n_s_delimiter, __pyx_k_delimiter, sizeof(__pyx_k_delimiter), 0, 0, 1, 1},
  {&__pyx_n_s_dimensions, __pyx_k_dimensions, sizeof(__pyx_k_dimensions), 0, 0, 1, 1},
  {&__pyx_n_s_distance, __pyx_k_distance, sizeof(__pyx_k_distance), 0, 0, 1, 1},
  {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
  {&__pyx_kp_s_drag_csv, __pyx_k_drag_csv, sizeof(__pyx_k_drag_csv), 0, 0, 1, 0},
  {&__pyx_n_s_drag_t, __pyx_k_drag_t, sizeof(__pyx_k_drag_t), 0, 0, 1, 1},
  {&__pyx_n_s_dragx, __pyx_k_dragx, sizeof(__pyx_k_dragx), 0, 0, 1, 1},
  {&__pyx_n_s_dragx_t, __pyx_k_dragx_t, sizeof(__pyx_k_dragx_t), 0, 0, 1, 1},
  {&__pyx_n_s_dragy, __pyx_k_dragy, sizeof(__pyx_k_dragy), 0, 0, 1, 1},
  {&__pyx_n_s_dragy_t, __pyx_k_dragy_t, sizeof(__pyx_k_dragy_t), 0, 0, 1, 1},
  {&__pyx_n_s_dragz, __pyx_k_dragz, sizeof(__pyx_k_dragz), 0, 0, 1, 1},
  {&__pyx_n_s_dragz_t, __pyx_k_dragz_t, sizeof(__pyx_k_dragz_t), 0, 0, 1, 1},
  {&__pyx_n_s_dt_init, __pyx_k_dt_init, sizeof(__pyx_k_dt_init), 0, 0, 1, 1},
  {&__pyx_n_s_dt_last, __pyx_k_dt_last, sizeof(__pyx_k_dt_last), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_eN, __pyx_k_eN, sizeof(__pyx_k_eN), 0, 0, 1, 1},
  {&__pyx_n_s_eN_guess, __pyx_k_eN_guess, sizeof(__pyx_k_eN_guess), 0, 0, 1, 1},
  {&__pyx_n_s_eOffset, __pyx_k_eOffset, sizeof(__pyx_k_eOffset), 0, 0, 1, 1},
  {&__pyx_n_s_element, __pyx_k_element, sizeof(__pyx_k_element), 0, 0, 1, 1},
  {&__pyx_n_s_elementMaps, __pyx_k_elementMaps, sizeof(__pyx_k_elementMaps), 0, 0, 1, 1},
  {&__pyx_n_s_elementNodesArray, __pyx_k_elementNodesArray, sizeof(__pyx_k_elementNodesArray), 0, 0, 1, 1},
  {&__pyx_n_s_elements_t, __pyx_k_elements_t, sizeof(__pyx_k_elements_t), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_envelope, __pyx_k_envelope, sizeof(__pyx_k_envelope), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_eta, __pyx_k_eta, sizeof(__pyx_k_eta), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_exit_2, __pyx_k_exit_2, sizeof(__pyx_k_exit_2), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_fairlead, __pyx_k_fairlead, sizeof(__pyx_k_fairlead), 0, 0, 1, 1},
  {&__pyx_n_s_femSpace, __pyx_k_femSpace, sizeof(__pyx_k_femSpace), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_findElementContainingCoordsDist, __pyx_k_findElementContainingCoordsDist, sizeof(__pyx_k_findElementContainingCoordsDist), 0, 0, 1, 1},
  {&__pyx_n_s_findElementContainingCoordsKD, __pyx_k_findElementContainingCoordsKD, sizeof(__pyx_k_findElementContainingCoordsKD), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_flatten, __pyx_k_flatten, sizeof(__pyx_k_flatten), 0, 0, 1, 1},
  {&__pyx_n_s_fluid_acceleration_array, __pyx_k_fluid_acceleration_array, sizeof(__pyx_k_fluid_acceleration_array), 0, 0, 1, 1},
  {&__pyx_n_s_fluid_density_array, __pyx_k_fluid_density_array, sizeof(__pyx_k_fluid_density_array), 0, 0, 1, 1},
  {&__pyx_n_s_fluid_velocity_array, __pyx_k_fluid_velocity_array, sizeof(__pyx_k_fluid_velocity_array), 0, 0, 1, 1},
  {&__pyx_n_s_forces, __pyx_k_forces, sizeof(__pyx_k_forces), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_free_r, __pyx_k_free_r, sizeof(__pyx_k_free_r), 0, 0, 1, 1},
  {&__pyx_n_s_free_x, __pyx_k_free_x, sizeof(__pyx_k_free_x), 0, 0, 1, 1},
  {&__pyx_n_s_function_position, __pyx_k_function_position, sizeof(__pyx_k_function_position), 0, 0, 1, 1},
  {&__pyx_n_s_function_tangent, __pyx_k_function_tangent, sizeof(__pyx_k_function_tangent), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getAddedMassForces, __pyx_k_getAddedMassForces, sizeof(__pyx_k_getAddedMassForces), 0, 0, 1, 1},
  {&__pyx_n_s_getDragForces, __pyx_k_getDragForces, sizeof(__pyx_k_getDragForces), 0, 0, 1, 1},
  {&__pyx_n_s_getFluidVelocityLocalCoords, __pyx_k_getFluidVelocityLocalCoords, sizeof(__pyx_k_getFluidVelocityLocalCoords), 0, 0, 1, 1},
  {&__pyx_n_s_getGradientValue, __pyx_k_getGradientValue, sizeof(__pyx_k_getGradientValue), 0, 0, 1, 1},
  {&__pyx_n_s_getInverseValue, __pyx_k_getInverseValue, sizeof(__pyx_k_getInverseValue), 0, 0, 1, 1},
  {&__pyx_n_s_getLocalElement, __pyx_k_getLocalElement, sizeof(__pyx_k_getLocalElement), 0, 0, 1, 1},
  {&__pyx_n_s_getLocalNearestNode, __pyx_k_getLocalNearestNode, sizeof(__pyx_k_getLocalNearestNode), 0, 0, 1, 1},
  {&__pyx_n_s_getMoments, __pyx_k_getMoments, sizeof(__pyx_k_getMoments), 0, 0, 1, 1},
  {&__pyx_n_s_getNodesAcceleration, __pyx_k_getNodesAcceleration, sizeof(__pyx_k_getNodesAcceleration), 0, 0, 1, 1},
  {&__pyx_n_s_getNodesPosition, __pyx_k_getNodesPosition, sizeof(__pyx_k_getNodesPosition), 0, 0, 1, 1},
  {&__pyx_n_s_getNodesTension, __pyx_k_getNodesTension, sizeof(__pyx_k_getNodesTension), 0, 0, 1, 1},
  {&__pyx_n_s_getNodesVelocity, __pyx_k_getNodesVelocity, sizeof(__pyx_k_getNodesVelocity), 0, 0, 1, 1},
  {&__pyx_n_s_getPressureForces, __pyx_k_getPressureForces, sizeof(__pyx_k_getPressureForces), 0, 0, 1, 1},
  {&__pyx_n_s_getShearForces, __pyx_k_getShearForces, sizeof(__pyx_k_getShearForces), 0, 0, 1, 1},
  {&__pyx_n_s_getTensionBack, __pyx_k_getTensionBack, sizeof(__pyx_k_getTensionBack), 0, 0, 1, 1},
  {&__pyx_n_s_getTensionFront, __pyx_k_getTensionFront, sizeof(__pyx_k_getTensionFront), 0, 0, 1, 1},
  {&__pyx_n_s_getValue, __pyx_k_getValue, sizeof(__pyx_k_getValue), 0, 0, 1, 1},
  {&__pyx_n_s_getValues, __pyx_k_getValues, sizeof(__pyx_k_getValues), 0, 0, 1, 1},
  {&__pyx_n_s_getroot, __pyx_k_getroot, sizeof(__pyx_k_getroot), 0, 0, 1, 1},
  {&__pyx_n_s_globalMesh, __pyx_k_globalMesh, sizeof(__pyx_k_globalMesh), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_gravity, __pyx_k_gravity, sizeof(__pyx_k_gravity), 0, 0, 1, 1},
  {&__pyx_kp_s_h5, __pyx_k_h5, sizeof(__pyx_k_h5), 0, 0, 1, 0},
  {&__pyx_kp_s_h5_2, __pyx_k_h5_2, sizeof(__pyx_k_h5_2), 0, 0, 1, 0},
  {&__pyx_kp_s_h5_elements_t, __pyx_k_h5_elements_t, sizeof(__pyx_k_h5_elements_t), 0, 0, 1, 0},
  {&__pyx_kp_s_h5_nodes_t, __pyx_k_h5_nodes_t, sizeof(__pyx_k_h5_nodes_t), 0, 0, 1, 0},
  {&__pyx_n_s_h5py, __pyx_k_h5py, sizeof(__pyx_k_h5py), 0, 0, 1, 1},
  {&__pyx_kp_s_h_ang_predict, __pyx_k_h_ang_predict, sizeof(__pyx_k_h_ang_predict), 0, 0, 1, 0},
  {&__pyx_kp_s_h_ang_predict_last, __pyx_k_h_ang_predict_last, sizeof(__pyx_k_h_ang_predict_last), 0, 0, 1, 0},
  {&__pyx_kp_s_h_ang_vel_predict, __pyx_k_h_ang_vel_predict, sizeof(__pyx_k_h_ang_vel_predict), 0, 0, 1, 0},
  {&__pyx_kp_s_h_ang_vel_predict_last, __pyx_k_h_ang_vel_predict_last, sizeof(__pyx_k_h_ang_vel_predict_last), 0, 0, 1, 0},
  {&__pyx_kp_s_h_predict, __pyx_k_h_predict, sizeof(__pyx_k_h_predict), 0, 0, 1, 0},
  {&__pyx_n_s_h_predict_2, __pyx_k_h_predict_2, sizeof(__pyx_k_h_predict_2), 0, 0, 1, 1},
  {&__pyx_kp_s_h_predict_last, __pyx_k_h_predict_last, sizeof(__pyx_k_h_predict_last), 0, 0, 1, 0},
  {&__pyx_kp_s_http_www_w3_org_2001_XInclude, __pyx_k_http_www_w3_org_2001_XInclude, sizeof(__pyx_k_http_www_w3_org_2001_XInclude), 0, 0, 1, 0},
  {&__pyx_n_s_hx, __pyx_k_hx, sizeof(__pyx_k_hx), 0, 0, 1, 1},
  {&__pyx_n_s_hxyz, __pyx_k_hxyz, sizeof(__pyx_k_hxyz), 0, 0, 1, 1},
  {&__pyx_n_s_hy, __pyx_k_hy, sizeof(__pyx_k_hy), 0, 0, 1, 1},
  {&__pyx_n_s_hz, __pyx_k_hz, sizeof(__pyx_k_hz), 0, 0, 1, 1},
  {&__pyx_kp_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 0},
  {&__pyx_n_s_i8, __pyx_k_i8, sizeof(__pyx_k_i8), 0, 0, 1, 1},
  {&__pyx_n_s_i_2, __pyx_k_i_2, sizeof(__pyx_k_i_2), 0, 0, 1, 1},
  {&__pyx_n_s_i_end, __pyx_k_i_end, sizeof(__pyx_k_i_end), 0, 0, 1, 1},
  {&__pyx_kp_s_i_i, __pyx_k_i_i, sizeof(__pyx_k_i_i), 0, 0, 1, 0},
  {&__pyx_n_s_i_start, __pyx_k_i_start, sizeof(__pyx_k_i_start), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_indentXML, __pyx_k_indentXML, sizeof(__pyx_k_indentXML), 0, 0, 1, 1},
  {&__pyx_n_s_inertia, __pyx_k_inertia, sizeof(__pyx_k_inertia), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_intertia, __pyx_k_intertia, sizeof(__pyx_k_intertia), 0, 0, 1, 1},
  {&__pyx_n_s_inv, __pyx_k_inv, sizeof(__pyx_k_inv), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_kdtree, __pyx_k_kdtree, sizeof(__pyx_k_kdtree), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_levelModelList, __pyx_k_levelModelList, sizeof(__pyx_k_levelModelList), 0, 0, 1, 1},
  {&__pyx_n_s_limit_Rx, __pyx_k_limit_Rx, sizeof(__pyx_k_limit_Rx), 0, 0, 1, 1},
  {&__pyx_n_s_limit_Ry, __pyx_k_limit_Ry, sizeof(__pyx_k_limit_Ry), 0, 0, 1, 1},
  {&__pyx_n_s_limit_Rz, __pyx_k_limit_Rz, sizeof(__pyx_k_limit_Rz), 0, 0, 1, 1},
  {&__pyx_n_s_limit_X, __pyx_k_limit_X, sizeof(__pyx_k_limit_X), 0, 0, 1, 1},
  {&__pyx_n_s_limit_Y, __pyx_k_limit_Y, sizeof(__pyx_k_limit_Y), 0, 0, 1, 1},
  {&__pyx_n_s_limit_Z, __pyx_k_limit_Z, sizeof(__pyx_k_limit_Z), 0, 0, 1, 1},
  {&__pyx_n_s_linalg, __pyx_k_linalg, sizeof(__pyx_k_linalg), 0, 0, 1, 1},
  {&__pyx_n_s_logDir, __pyx_k_logDir, sizeof(__pyx_k_logDir), 0, 0, 1, 1},
  {&__pyx_n_s_logEvent, __pyx_k_logEvent, sizeof(__pyx_k_logEvent), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_margin, __pyx_k_margin, sizeof(__pyx_k_margin), 0, 0, 1, 1},
  {&__pyx_n_s_mbd_ChRigidBody, __pyx_k_mbd_ChRigidBody, sizeof(__pyx_k_mbd_ChRigidBody), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mesh, __pyx_k_mesh, sizeof(__pyx_k_mesh), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_model, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
  {&__pyx_n_s_moments, __pyx_k_moments, sizeof(__pyx_k_moments), 0, 0, 1, 1},
  {&__pyx_n_s_mpi4py, __pyx_k_mpi4py, sizeof(__pyx_k_mpi4py), 0, 0, 1, 1},
  {&__pyx_n_s_nElements_global, __pyx_k_nElements_global, sizeof(__pyx_k_nElements_global), 0, 0, 1, 1},
  {&__pyx_n_s_nNodes_owned, __pyx_k_nNodes_owned, sizeof(__pyx_k_nNodes_owned), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_nb_elems, __pyx_k_nb_elems, sizeof(__pyx_k_nb_elems), 0, 0, 1, 1},
  {&__pyx_n_s_nd, __pyx_k_nd, sizeof(__pyx_k_nd), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_netForces_p, __pyx_k_netForces_p, sizeof(__pyx_k_netForces_p), 0, 0, 1, 1},
  {&__pyx_n_s_netForces_v, __pyx_k_netForces_v, sizeof(__pyx_k_netForces_v), 0, 0, 1, 1},
  {&__pyx_n_s_netMoments, __pyx_k_netMoments, sizeof(__pyx_k_netMoments), 0, 0, 1, 1},
  {&__pyx_kp_s_no_time_step_set, __pyx_k_no_time_step_set, sizeof(__pyx_k_no_time_step_set), 0, 0, 1, 0},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_n_s_node1, __pyx_k_node1, sizeof(__pyx_k_node1), 0, 0, 1, 1},
  {&__pyx_n_s_node2, __pyx_k_node2, sizeof(__pyx_k_node2), 0, 0, 1, 1},
  {&__pyx_n_s_nodeArray, __pyx_k_nodeArray, sizeof(__pyx_k_nodeArray), 0, 0, 1, 1},
  {&__pyx_n_s_nodeElementOffsets, __pyx_k_nodeElementOffsets, sizeof(__pyx_k_nodeElementOffsets), 0, 0, 1, 1},
  {&__pyx_n_s_nodeElementsArray, __pyx_k_nodeElementsArray, sizeof(__pyx_k_nodeElementsArray), 0, 0, 1, 1},
  {&__pyx_n_s_nodeNumbering_subdomain2global, __pyx_k_nodeNumbering_subdomain2global, sizeof(__pyx_k_nodeNumbering_subdomain2global), 0, 0, 1, 1},
  {&__pyx_n_s_nodeOffsets_subdomain_owned, __pyx_k_nodeOffsets_subdomain_owned, sizeof(__pyx_k_nodeOffsets_subdomain_owned), 0, 0, 1, 1},
  {&__pyx_n_s_nodeStarArray, __pyx_k_nodeStarArray, sizeof(__pyx_k_nodeStarArray), 0, 0, 1, 1},
  {&__pyx_n_s_nodeStarOffsets, __pyx_k_nodeStarOffsets, sizeof(__pyx_k_nodeStarOffsets), 0, 0, 1, 1},
  {&__pyx_n_s_node_guess, __pyx_k_node_guess, sizeof(__pyx_k_node_guess), 0, 0, 1, 1},
  {&__pyx_n_s_nodes_t, __pyx_k_nodes_t, sizeof(__pyx_k_nodes_t), 0, 0, 1, 1},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_s_normal, __pyx_k_normal, sizeof(__pyx_k_normal), 0, 0, 1, 1},
  {&__pyx_kp_s_not_a_valid_choice, __pyx_k_not_a_valid_choice, sizeof(__pyx_k_not_a_valid_choice), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_onElement, __pyx_k_onElement, sizeof(__pyx_k_onElement), 0, 0, 1, 1},
  {&__pyx_n_s_op, __pyx_k_op, sizeof(__pyx_k_op), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_kp_s_p_home_jcollins_proteus_proteus, __pyx_k_p_home_jcollins_proteus_proteus, sizeof(__pyx_k_p_home_jcollins_proteus_proteus), 0, 0, 1, 0},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_parse, __pyx_k_parse, sizeof(__pyx_k_parse), 0, 0, 1, 1},
  {&__pyx_n_s_patchBoundaryNodes, __pyx_k_patchBoundaryNodes, sizeof(__pyx_k_patchBoundaryNodes), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_pivot, __pyx_k_pivot, sizeof(__pyx_k_pivot), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_kp_s_pos_body, __pyx_k_pos_body, sizeof(__pyx_k_pos_body), 0, 0, 1, 0},
  {&__pyx_kp_s_pos_csv, __pyx_k_pos_csv, sizeof(__pyx_k_pos_csv), 0, 0, 1, 0},
  {&__pyx_kp_s_posdt_csv, __pyx_k_posdt_csv, sizeof(__pyx_k_posdt_csv), 0, 0, 1, 0},
  {&__pyx_kp_s_posdtdt_csv, __pyx_k_posdtdt_csv, sizeof(__pyx_k_posdtdt_csv), 0, 0, 1, 0},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_positions, __pyx_k_positions, sizeof(__pyx_k_positions), 0, 0, 1, 1},
  {&__pyx_n_s_poststep, __pyx_k_poststep, sizeof(__pyx_k_poststep), 0, 0, 1, 1},
  {&__pyx_n_s_prediction, __pyx_k_prediction, sizeof(__pyx_k_prediction), 0, 0, 1, 1},
  {&__pyx_n_s_prestep, __pyx_k_prestep, sizeof(__pyx_k_prestep), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pris1, __pyx_k_pris1, sizeof(__pyx_k_pris1), 0, 0, 1, 1},
  {&__pyx_n_s_pris2, __pyx_k_pris2, sizeof(__pyx_k_pris2), 0, 0, 1, 1},
  {&__pyx_n_s_proteus, __pyx_k_proteus, sizeof(__pyx_k_proteus), 0, 0, 1, 1},
  {&__pyx_n_s_proteus_Archiver, __pyx_k_proteus_Archiver, sizeof(__pyx_k_proteus_Archiver), 0, 0, 1, 1},
  {&__pyx_n_s_proteus_dt, __pyx_k_proteus_dt, sizeof(__pyx_k_proteus_dt), 0, 0, 1, 1},
  {&__pyx_n_s_proteus_mprans, __pyx_k_proteus_mprans, sizeof(__pyx_k_proteus_mprans), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_query, __pyx_k_query, sizeof(__pyx_k_query), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rank, __pyx_k_rank, sizeof(__pyx_k_rank), 0, 0, 1, 1},
  {&__pyx_n_s_rank_guess, __pyx_k_rank_guess, sizeof(__pyx_k_rank_guess), 0, 0, 1, 1},
  {&__pyx_n_s_record, __pyx_k_record, sizeof(__pyx_k_record), 0, 0, 1, 1},
  {&__pyx_n_s_recordH5, __pyx_k_recordH5, sizeof(__pyx_k_recordH5), 0, 0, 1, 1},
  {&__pyx_n_s_recordValues, __pyx_k_recordValues, sizeof(__pyx_k_recordValues), 0, 0, 1, 1},
  {&__pyx_n_s_recordValues_locals_record, __pyx_k_recordValues_locals_record, sizeof(__pyx_k_recordValues_locals_record), 0, 0, 1, 1},
  {&__pyx_n_s_recordXML, __pyx_k_recordXML, sizeof(__pyx_k_recordXML), 0, 0, 1, 1},
  {&__pyx_n_s_record_2, __pyx_k_record_2, sizeof(__pyx_k_record_2), 0, 0, 1, 1},
  {&__pyx_n_s_record_body, __pyx_k_record_body, sizeof(__pyx_k_record_body), 0, 0, 1, 1},
  {&__pyx_n_s_record_file, __pyx_k_record_file, sizeof(__pyx_k_record_file), 0, 0, 1, 1},
  {&__pyx_n_b_record_moorings, __pyx_k_record_moorings, sizeof(__pyx_k_record_moorings), 0, 0, 0, 1},
  {&__pyx_n_s_referenceElement, __pyx_k_referenceElement, sizeof(__pyx_k_referenceElement), 0, 0, 1, 1},
  {&__pyx_n_s_rest_length, __pyx_k_rest_length, sizeof(__pyx_k_rest_length), 0, 0, 1, 1},
  {&__pyx_n_s_rho, __pyx_k_rho, sizeof(__pyx_k_rho), 0, 0, 1, 1},
  {&__pyx_n_s_rot, __pyx_k_rot, sizeof(__pyx_k_rot), 0, 0, 1, 1},
  {&__pyx_n_s_rotation3D, __pyx_k_rotation3D, sizeof(__pyx_k_rotation3D), 0, 0, 1, 1},
  {&__pyx_n_s_rotq, __pyx_k_rotq, sizeof(__pyx_k_rotq), 0, 0, 1, 1},
  {&__pyx_n_s_rotq_e0, __pyx_k_rotq_e0, sizeof(__pyx_k_rotq_e0), 0, 0, 1, 1},
  {&__pyx_n_s_rotq_e1, __pyx_k_rotq_e1, sizeof(__pyx_k_rotq_e1), 0, 0, 1, 1},
  {&__pyx_n_s_rotq_e2, __pyx_k_rotq_e2, sizeof(__pyx_k_rotq_e2), 0, 0, 1, 1},
  {&__pyx_n_s_rotq_e3, __pyx_k_rotq_e3, sizeof(__pyx_k_rotq_e3), 0, 0, 1, 1},
  {&__pyx_n_s_row, __pyx_k_row, sizeof(__pyx_k_row), 0, 0, 1, 1},
  {&__pyx_n_s_sampleRate, __pyx_k_sampleRate, sizeof(__pyx_k_sampleRate), 0, 0, 1, 1},
  {&__pyx_n_s_scheme, __pyx_k_scheme, sizeof(__pyx_k_scheme), 0, 0, 1, 1},
  {&__pyx_n_s_scipy, __pyx_k_scipy, sizeof(__pyx_k_scipy), 0, 0, 1, 1},
  {&__pyx_n_s_segment_nb, __pyx_k_segment_nb, sizeof(__pyx_k_segment_nb), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setAddedMass, __pyx_k_setAddedMass, sizeof(__pyx_k_setAddedMass), 0, 0, 1, 1},
  {&__pyx_n_s_setCouplingScheme, __pyx_k_setCouplingScheme, sizeof(__pyx_k_setCouplingScheme), 0, 0, 1, 1},
  {&__pyx_n_s_setExternalForces, __pyx_k_setExternalForces, sizeof(__pyx_k_setExternalForces), 0, 0, 1, 1},
  {&__pyx_n_s_setName, __pyx_k_setName, sizeof(__pyx_k_setName), 0, 0, 1, 1},
  {&__pyx_n_s_setRotation, __pyx_k_setRotation, sizeof(__pyx_k_setRotation), 0, 0, 1, 1},
  {&__pyx_kp_s_set_element_type, __pyx_k_set_element_type, sizeof(__pyx_k_set_element_type), 0, 0, 1, 0},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_spatial, __pyx_k_spatial, sizeof(__pyx_k_spatial), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_startTime, __pyx_k_startTime, sizeof(__pyx_k_startTime), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stepController, __pyx_k_stepController, sizeof(__pyx_k_stepController), 0, 0, 1, 1},
  {&__pyx_n_s_stiffness, __pyx_k_stiffness, sizeof(__pyx_k_stiffness), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_storeValues, __pyx_k_storeValues, sizeof(__pyx_k_storeValues), 0, 0, 1, 1},
  {&__pyx_n_s_strain, __pyx_k_strain, sizeof(__pyx_k_strain), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_kp_s_substeps, __pyx_k_substeps, sizeof(__pyx_k_substeps), 0, 0, 1, 0},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sx, __pyx_k_sx, sizeof(__pyx_k_sx), 0, 0, 1, 1},
  {&__pyx_n_s_sx_t, __pyx_k_sx_t, sizeof(__pyx_k_sx_t), 0, 0, 1, 1},
  {&__pyx_n_s_sy, __pyx_k_sy, sizeof(__pyx_k_sy), 0, 0, 1, 1},
  {&__pyx_n_s_sy_t, __pyx_k_sy_t, sizeof(__pyx_k_sy_t), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_system, __pyx_k_system, sizeof(__pyx_k_system), 0, 0, 1, 1},
  {&__pyx_n_s_sz, __pyx_k_sz, sizeof(__pyx_k_sz), 0, 0, 1, 1},
  {&__pyx_n_s_sz_t, __pyx_k_sz_t, sizeof(__pyx_k_sz_t), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_t_2, __pyx_k_t_2, sizeof(__pyx_k_t_2), 0, 0, 1, 1},
  {&__pyx_n_s_t_ch, __pyx_k_t_ch, sizeof(__pyx_k_t_ch), 0, 0, 1, 1},
  {&__pyx_kp_s_t_csv, __pyx_k_t_csv, sizeof(__pyx_k_t_csv), 0, 0, 1, 0},
  {&__pyx_n_s_t_max, __pyx_k_t_max, sizeof(__pyx_k_t_max), 0, 0, 1, 1},
  {&__pyx_n_s_t_model_last, __pyx_k_t_model_last, sizeof(__pyx_k_t_model_last), 0, 0, 1, 1},
  {&__pyx_n_s_t_sim, __pyx_k_t_sim, sizeof(__pyx_k_t_sim), 0, 0, 1, 1},
  {&__pyx_n_s_tangential, __pyx_k_tangential, sizeof(__pyx_k_tangential), 0, 0, 1, 1},
  {&__pyx_n_s_tangents, __pyx_k_tangents, sizeof(__pyx_k_tangents), 0, 0, 1, 1},
  {&__pyx_kp_s_tens_csv, __pyx_k_tens_csv, sizeof(__pyx_k_tens_csv), 0, 0, 1, 0},
  {&__pyx_n_s_tensions_t, __pyx_k_tensions_t, sizeof(__pyx_k_tensions_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_tolist, __pyx_k_tolist, sizeof(__pyx_k_tolist), 0, 0, 1, 1},
  {&__pyx_n_s_tompi4py, __pyx_k_tompi4py, sizeof(__pyx_k_tompi4py), 0, 0, 1, 1},
  {&__pyx_n_s_tstype, __pyx_k_tstype, sizeof(__pyx_k_tstype), 0, 0, 1, 1},
  {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
  {&__pyx_kp_s_u_csv, __pyx_k_u_csv, sizeof(__pyx_k_u_csv), 0, 0, 1, 0},
  {&__pyx_n_s_u_grad, __pyx_k_u_grad, sizeof(__pyx_k_u_grad), 0, 0, 1, 1},
  {&__pyx_kp_s_udt_csv, __pyx_k_udt_csv, sizeof(__pyx_k_udt_csv), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_updateForces, __pyx_k_updateForces, sizeof(__pyx_k_updateForces), 0, 0, 1, 1},
  {&__pyx_n_s_ux, __pyx_k_ux, sizeof(__pyx_k_ux), 0, 0, 1, 1},
  {&__pyx_n_s_ux_t, __pyx_k_ux_t, sizeof(__pyx_k_ux_t), 0, 0, 1, 1},
  {&__pyx_n_s_uy, __pyx_k_uy, sizeof(__pyx_k_uy), 0, 0, 1, 1},
  {&__pyx_n_s_uy_t, __pyx_k_uy_t, sizeof(__pyx_k_uy_t), 0, 0, 1, 1},
  {&__pyx_n_s_uz, __pyx_k_uz, sizeof(__pyx_k_uz), 0, 0, 1, 1},
  {&__pyx_n_s_uz_t, __pyx_k_uz_t, sizeof(__pyx_k_uz_t), 0, 0, 1, 1},
  {&__pyx_n_s_vel, __pyx_k_vel, sizeof(__pyx_k_vel), 0, 0, 1, 1},
  {&__pyx_n_s_velocity, __pyx_k_velocity, sizeof(__pyx_k_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_velocity_t, __pyx_k_velocity_t, sizeof(__pyx_k_velocity_t), 0, 0, 1, 1},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_kp_s_was_already_attached, __pyx_k_was_already_attached, sizeof(__pyx_k_was_already_attached), 0, 0, 1, 0},
  {&__pyx_kp_s_with_dt, __pyx_k_with_dt, sizeof(__pyx_k_with_dt), 0, 0, 1, 0},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_writer, __pyx_k_writer, sizeof(__pyx_k_writer), 0, 0, 1, 1},
  {&__pyx_n_s_writerow, __pyx_k_writerow, sizeof(__pyx_k_writerow), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_kp_s_x_2, __pyx_k_x_2, sizeof(__pyx_k_x_2), 0, 0, 1, 0},
  {&__pyx_kp_s_x_and_t_should_have_the_same_len, __pyx_k_x_and_t_should_have_the_same_len, sizeof(__pyx_k_x_and_t_should_have_the_same_len), 0, 0, 1, 0},
  {&__pyx_kp_s_x_body, __pyx_k_x_body, sizeof(__pyx_k_x_body), 0, 0, 1, 0},
  {&__pyx_kp_s_x_new_rot, __pyx_k_x_new_rot, sizeof(__pyx_k_x_new_rot), 0, 0, 1, 0},
  {&__pyx_kp_s_x_new_trarot, __pyx_k_x_new_trarot, sizeof(__pyx_k_x_new_trarot), 0, 0, 1, 0},
  {&__pyx_kp_s_x_old, __pyx_k_x_old, sizeof(__pyx_k_x_old), 0, 0, 1, 0},
  {&__pyx_n_s_xi, __pyx_k_xi, sizeof(__pyx_k_xi), 0, 0, 1, 1},
  {&__pyx_kp_s_xmf, __pyx_k_xmf, sizeof(__pyx_k_xmf), 0, 0, 1, 0},
  {&__pyx_n_s_xml_etree_ElementTree, __pyx_k_xml_etree_ElementTree, sizeof(__pyx_k_xml_etree_ElementTree), 0, 0, 1, 1},
  {&__pyx_kp_s_xml_version_1_0_DOCTYPE_Xdmf_SY, __pyx_k_xml_version_1_0_DOCTYPE_Xdmf_SY, sizeof(__pyx_k_xml_version_1_0_DOCTYPE_Xdmf_SY), 0, 0, 1, 0},
  {&__pyx_kp_s_xmlns_xi, __pyx_k_xmlns_xi, sizeof(__pyx_k_xmlns_xi), 0, 0, 1, 0},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_kp_s_y_and_t_should_have_the_same_len, __pyx_k_y_and_t_should_have_the_same_len, sizeof(__pyx_k_y_and_t_should_have_the_same_len), 0, 0, 1, 0},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_kp_s_z_and_t_should_have_the_same_len, __pyx_k_z_and_t_should_have_the_same_len, sizeof(__pyx_k_z_and_t_should_have_the_same_len), 0, 0, 1, 0},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 653, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 1310, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 218, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 799, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 989, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(2, 146, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(2, 149, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(2, 396, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(2, 425, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(2, 599, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 818, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "mbd/ChRigidBody.pyx":280
 *         self.ProtChSystem.addSubcomponent(self)  # add body to system (for pre and post steps)
 *         self.record_dict = OrderedDict()
 *         self.F_prot = np.zeros(3)  # initialise empty Proteus force             # <<<<<<<<<<<<<<
 *         self.M_prot = np.zeros(3)  # initialise empty Proteus moment
 *         self.F_applied = np.zeros(3)  # initialise empty Applied force
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "mbd/ChRigidBody.pyx":281
 *         self.record_dict = OrderedDict()
 *         self.F_prot = np.zeros(3)  # initialise empty Proteus force
 *         self.M_prot = np.zeros(3)  # initialise empty Proteus moment             # <<<<<<<<<<<<<<
 *         self.F_applied = np.zeros(3)  # initialise empty Applied force
 *         self.M_applied = np.zeros(3)  # initialise empty Applied moment
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "mbd/ChRigidBody.pyx":282
 *         self.F_prot = np.zeros(3)  # initialise empty Proteus force
 *         self.M_prot = np.zeros(3)  # initialise empty Proteus moment
 *         self.F_applied = np.zeros(3)  # initialise empty Applied force             # <<<<<<<<<<<<<<
 *         self.M_applied = np.zeros(3)  # initialise empty Applied moment
 *         self.F_Aij = np.zeros(3)  # initialise empty added mass force
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "mbd/ChRigidBody.pyx":283
 *         self.M_prot = np.zeros(3)  # initialise empty Proteus moment
 *         self.F_applied = np.zeros(3)  # initialise empty Applied force
 *         self.M_applied = np.zeros(3)  # initialise empty Applied moment             # <<<<<<<<<<<<<<
 *         self.F_Aij = np.zeros(3)  # initialise empty added mass force
 *         self.M_Aij = np.zeros(3)  # initialise empty added mass moment
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "mbd/ChRigidBody.pyx":284
 *         self.F_applied = np.zeros(3)  # initialise empty Applied force
 *         self.M_applied = np.zeros(3)  # initialise empty Applied moment
 *         self.F_Aij = np.zeros(3)  # initialise empty added mass force             # <<<<<<<<<<<<<<
 *         self.M_Aij = np.zeros(3)  # initialise empty added mass moment
 *         self.prescribed_motion_function = None
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "mbd/ChRigidBody.pyx":285
 *         self.M_applied = np.zeros(3)  # initialise empty Applied moment
 *         self.F_Aij = np.zeros(3)  # initialise empty added mass force
 *         self.M_Aij = np.zeros(3)  # initialise empty added mass moment             # <<<<<<<<<<<<<<
 *         self.prescribed_motion_function = None
 *         self.acceleration = np.zeros(3)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "mbd/ChRigidBody.pyx":287
 *         self.M_Aij = np.zeros(3)  # initialise empty added mass moment
 *         self.prescribed_motion_function = None
 *         self.acceleration = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.acceleration_last = np.zeros(3)
 *         self.velocity = np.zeros(3)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "mbd/ChRigidBody.pyx":288
 *         self.prescribed_motion_function = None
 *         self.acceleration = np.zeros(3)
 *         self.acceleration_last = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.velocity = np.zeros(3)
 *         self.velocity_last = np.zeros(3)
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "mbd/ChRigidBody.pyx":289
 *         self.acceleration = np.zeros(3)
 *         self.acceleration_last = np.zeros(3)
 *         self.velocity = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.velocity_last = np.zeros(3)
 *         self.ang_velocity = np.zeros(3)
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "mbd/ChRigidBody.pyx":290
 *         self.acceleration_last = np.zeros(3)
 *         self.velocity = np.zeros(3)
 *         self.velocity_last = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.ang_velocity = np.zeros(3)
 *         self.position_last = self.position
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "mbd/ChRigidBody.pyx":291
 *         self.velocity = np.zeros(3)
 *         self.velocity_last = np.zeros(3)
 *         self.ang_velocity = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.position_last = self.position
 *         self.ang_vel_norm = 0.  # used for mesh disp prediction
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "mbd/ChRigidBody.pyx":295
 *         self.ang_vel_norm = 0.  # used for mesh disp prediction
 *         self.ang_vel_norm_last = 0.  # used for mesh disp prediction
 *         self.h_predict = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.h_ang_predict = 0.
 *         self.h_ang_vel_predict = np.zeros(3)
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "mbd/ChRigidBody.pyx":297
 *         self.h_predict = np.zeros(3)
 *         self.h_ang_predict = 0.
 *         self.h_ang_vel_predict = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.h_predict_last = np.zeros(3)
 *         self.h_ang_predict_last = 0.
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "mbd/ChRigidBody.pyx":298
 *         self.h_ang_predict = 0.
 *         self.h_ang_vel_predict = np.zeros(3)
 *         self.h_predict_last = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.h_ang_predict_last = 0.
 *         self.h_ang_vel_predict_last = np.zeros(3)
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "mbd/ChRigidBody.pyx":300
 *         self.h_predict_last = np.zeros(3)
 *         self.h_ang_predict_last = 0.
 *         self.h_ang_vel_predict_last = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.predicted = False
 *         self.adams_vel = np.zeros((5, 3))
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "mbd/ChRigidBody.pyx":302
 *         self.h_ang_vel_predict_last = np.zeros(3)
 *         self.predicted = False
 *         self.adams_vel = np.zeros((5, 3))             # <<<<<<<<<<<<<<
 *         self.ChBody.SetBodyFixed(False)
 *         self.Aij = np.zeros((6, 6))  # added mass array
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_int_5, __pyx_int_3); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_tuple__16); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "mbd/ChRigidBody.pyx":304
 *         self.adams_vel = np.zeros((5, 3))
 *         self.ChBody.SetBodyFixed(False)
 *         self.Aij = np.zeros((6, 6))  # added mass array             # <<<<<<<<<<<<<<
 *         self.applyAddedMass = True  # will apply added mass in Chrono calculations if True
 *         # if self.nd is None:
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_int_6, __pyx_int_6); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_tuple__18); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "mbd/ChRigidBody.pyx":373
 * 
 *     def setInitialRot(self, rot):
 *         cdef np.ndarray zeros = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.rotation_init = rot
 *         self.thisptr.prestep(<double*> zeros.data,
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "mbd/ChRigidBody.pyx":378
 *                              <double*> zeros.data)
 *         if self.rotation_init is not None:
 *             Profiling.logEvent("$$$$$ SETTING ROT")             # <<<<<<<<<<<<<<
 *             self.thisptr.setRotation(<double*> self.rotation_init.data)
 *         self.thisptr.poststep()
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_SETTING_ROT); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "mbd/ChRigidBody.pyx":390
 *         cdef np.ndarray h_body  # displacement from body
 *         cdef ch.ChVector h_body_vec
 *         h = np.zeros(3)             # <<<<<<<<<<<<<<
 *         if self.predicted is False:
 *             self.prediction()
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "mbd/ChRigidBody.pyx":641
 *         cdef double mass = self.ChBody.GetMass()
 *         cdef np.ndarray iner = self.ChBody.GetInertia()
 *         cdef np.ndarray MM = np.zeros((6,6))  # mass matrix             # <<<<<<<<<<<<<<
 *         cdef np.ndarray AM = np.zeros((6,6))  # added mass matrix
 *         cdef np.ndarray FM = np.zeros((6,6))  # full mass matrix
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_int_6, __pyx_int_6); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_tuple__24); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "mbd/ChRigidBody.pyx":642
 *         cdef np.ndarray iner = self.ChBody.GetInertia()
 *         cdef np.ndarray MM = np.zeros((6,6))  # mass matrix
 *         cdef np.ndarray AM = np.zeros((6,6))  # added mass matrix             # <<<<<<<<<<<<<<
 *         cdef np.ndarray FM = np.zeros((6,6))  # full mass matrix
 *         cdef ch.ChMatrixDynamic chFM = ch.ChMatrixDynamic[double](6, 6)
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_int_6, __pyx_int_6); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_tuple__26); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "mbd/ChRigidBody.pyx":643
 *         cdef np.ndarray MM = np.zeros((6,6))  # mass matrix
 *         cdef np.ndarray AM = np.zeros((6,6))  # added mass matrix
 *         cdef np.ndarray FM = np.zeros((6,6))  # full mass matrix             # <<<<<<<<<<<<<<
 *         cdef ch.ChMatrixDynamic chFM = ch.ChMatrixDynamic[double](6, 6)
 *         cdef ch.ChMatrixDynamic inv_chFM = ch.ChMatrixDynamic[double](6, 6)
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_int_6, __pyx_int_6); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_tuple__28); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "mbd/ChRigidBody.pyx":648
 *         # added mass matrix
 *         AM += added_mass
 *         self.Aij[:] = AM             # <<<<<<<<<<<<<<
 *         # mass matrix
 *         MM[0,0] = mass
 */
  __pyx_slice__30 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__30)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__30);
  __Pyx_GIVEREF(__pyx_slice__30);

  /* "mbd/ChRigidBody.pyx":650
 *         self.Aij[:] = AM
 *         # mass matrix
 *         MM[0,0] = mass             # <<<<<<<<<<<<<<
 *         MM[1,1] = mass
 *         MM[2,2] = mass
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "mbd/ChRigidBody.pyx":651
 *         # mass matrix
 *         MM[0,0] = mass
 *         MM[1,1] = mass             # <<<<<<<<<<<<<<
 *         MM[2,2] = mass
 *         for i in range(3):
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "mbd/ChRigidBody.pyx":652
 *         MM[0,0] = mass
 *         MM[1,1] = mass
 *         MM[2,2] = mass             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_2); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "mbd/ChRigidBody.pyx":653
 *         MM[1,1] = mass
 *         MM[2,2] = mass
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 MM[i+3, j+3] = iner[i, j]
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "mbd/ChRigidBody.pyx":654
 *         MM[2,2] = mass
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 MM[i+3, j+3] = iner[i, j]
 *         # full mass
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "mbd/ChRigidBody.pyx":665
 *         inv_FM = np.linalg.inv(FM)
 *         #set it to chrono variable
 *         for i in range(6):             # <<<<<<<<<<<<<<
 *             for j in range(6):
 *                 chFM.SetElement(i, j, FM[i, j])
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_int_6); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "mbd/ChRigidBody.pyx":666
 *         #set it to chrono variable
 *         for i in range(6):
 *             for j in range(6):             # <<<<<<<<<<<<<<
 *                 chFM.SetElement(i, j, FM[i, j])
 *                 inv_chFM.SetElement(i, j, inv_FM[i, j])
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_int_6); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "mbd/ChRigidBody.pyx":682
 *         """
 *         i0, i1 = self.i_start, self.i_end
 *         F_p = self.ProtChSystem.model.levelModelList[-1].coefficients.netForces_p[i0:i1, :]             # <<<<<<<<<<<<<<
 *         F_t = np.sum(F_p, axis=0)
 *         return F_t
 */
  __pyx_slice__38 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__38)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__38);
  __Pyx_GIVEREF(__pyx_slice__38);

  /* "mbd/ChRigidBody.pyx":696
 *         """
 *         i0, i1 = self.i_start, self.i_end
 *         F_v = self.ProtChSystem.model.levelModelList[-1].coefficients.netForces_v[i0:i1, :]             # <<<<<<<<<<<<<<
 *         F_t = np.sum(F_v, axis=0)
 *         return F_t
 */
  __pyx_slice__39 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__39)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__39);
  __Pyx_GIVEREF(__pyx_slice__39);

  /* "mbd/ChRigidBody.pyx":710
 *         """
 *         i0, i1 = self.i_start, self.i_end
 *         M = self.ProtChSystem.model.levelModelList[-1].coefficients.netMoments[i0:i1, :]             # <<<<<<<<<<<<<<
 *         M_t = np.sum(M, axis=0)
 *         # !!!!!!!!!!!! UPDATE BARYCENTER !!!!!!!!!!!!
 */
  __pyx_slice__40 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__40)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__40);
  __Pyx_GIVEREF(__pyx_slice__40);

  /* "mbd/ChRigidBody.pyx":778
 *             if self.ProtChSystem.model_addedmass is not None:
 *                 # getting added mass matrix
 *                 self.Aij[:] = 0             # <<<<<<<<<<<<<<
 *                 am = self.ProtChSystem.model_addedmass.levelModelList[-1]
 *                 for i in range(self.i_start, self.i_end):
 */
  __pyx_slice__41 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__41)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__41);
  __Pyx_GIVEREF(__pyx_slice__41);

  /* "mbd/ChRigidBody.pyx":786
 *         # setting added mass
 *         if self.applyAddedMass is True:
 *             Aij = np.zeros((6,6))             # <<<<<<<<<<<<<<
 *             Aij[:] = self.Aij[:]
 *             Aij[0, 1:] *= self.thisptr.free_x.x()
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_int_6, __pyx_int_6); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_tuple__42); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "mbd/ChRigidBody.pyx":787
 *         if self.applyAddedMass is True:
 *             Aij = np.zeros((6,6))
 *             Aij[:] = self.Aij[:]             # <<<<<<<<<<<<<<
 *             Aij[0, 1:] *= self.thisptr.free_x.x()
 *             Aij[1, 0] *= self.thisptr.free_x.y()
 */
  __pyx_slice__44 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__44)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__44);
  __Pyx_GIVEREF(__pyx_slice__44);
  __pyx_slice__45 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__45)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__45);
  __Pyx_GIVEREF(__pyx_slice__45);

  /* "mbd/ChRigidBody.pyx":788
 *             Aij = np.zeros((6,6))
 *             Aij[:] = self.Aij[:]
 *             Aij[0, 1:] *= self.thisptr.free_x.x()             # <<<<<<<<<<<<<<
 *             Aij[1, 0] *= self.thisptr.free_x.y()
 *             Aij[1, 2:] *= self.thisptr.free_x.y()
 */
  __pyx_slice__46 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__46)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__46);
  __Pyx_GIVEREF(__pyx_slice__46);
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_int_0, __pyx_slice__46); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "mbd/ChRigidBody.pyx":789
 *             Aij[:] = self.Aij[:]
 *             Aij[0, 1:] *= self.thisptr.free_x.x()
 *             Aij[1, 0] *= self.thisptr.free_x.y()             # <<<<<<<<<<<<<<
 *             Aij[1, 2:] *= self.thisptr.free_x.y()
 *             Aij[2, :2] *= self.thisptr.free_x.z()
 */
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_0); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "mbd/ChRigidBody.pyx":790
 *             Aij[0, 1:] *= self.thisptr.free_x.x()
 *             Aij[1, 0] *= self.thisptr.free_x.y()
 *             Aij[1, 2:] *= self.thisptr.free_x.y()             # <<<<<<<<<<<<<<
 *             Aij[2, :2] *= self.thisptr.free_x.z()
 *             Aij[2, 3:] *= self.thisptr.free_x.z()
 */
  __pyx_slice__49 = PySlice_New(__pyx_int_2, Py_None, Py_None); if (unlikely(!__pyx_slice__49)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__49);
  __Pyx_GIVEREF(__pyx_slice__49);
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_int_1, __pyx_slice__49); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "mbd/ChRigidBody.pyx":791
 *             Aij[1, 0] *= self.thisptr.free_x.y()
 *             Aij[1, 2:] *= self.thisptr.free_x.y()
 *             Aij[2, :2] *= self.thisptr.free_x.z()             # <<<<<<<<<<<<<<
 *             Aij[2, 3:] *= self.thisptr.free_x.z()
 *             Aij[3, :3] *= self.thisptr.free_r.x()
 */
  __pyx_slice__51 = PySlice_New(Py_None, __pyx_int_2, Py_None); if (unlikely(!__pyx_slice__51)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__51);
  __Pyx_GIVEREF(__pyx_slice__51);
  __pyx_tuple__52 = PyTuple_Pack(2, __pyx_int_2, __pyx_slice__51); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "mbd/ChRigidBody.pyx":792
 *             Aij[1, 2:] *= self.thisptr.free_x.y()
 *             Aij[2, :2] *= self.thisptr.free_x.z()
 *             Aij[2, 3:] *= self.thisptr.free_x.z()             # <<<<<<<<<<<<<<
 *             Aij[3, :3] *= self.thisptr.free_r.x()
 *             Aij[3, 4:] *= self.thisptr.free_r.x()
 */
  __pyx_slice__53 = PySlice_New(__pyx_int_3, Py_None, Py_None); if (unlikely(!__pyx_slice__53)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__53);
  __Pyx_GIVEREF(__pyx_slice__53);
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_int_2, __pyx_slice__53); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "mbd/ChRigidBody.pyx":793
 *             Aij[2, :2] *= self.thisptr.free_x.z()
 *             Aij[2, 3:] *= self.thisptr.free_x.z()
 *             Aij[3, :3] *= self.thisptr.free_r.x()             # <<<<<<<<<<<<<<
 *             Aij[3, 4:] *= self.thisptr.free_r.x()
 *             Aij[4, :4] *= self.thisptr.free_r.y()
 */
  __pyx_slice__55 = PySlice_New(Py_None, __pyx_int_3, Py_None); if (unlikely(!__pyx_slice__55)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__55);
  __Pyx_GIVEREF(__pyx_slice__55);
  __pyx_tuple__56 = PyTuple_Pack(2, __pyx_int_3, __pyx_slice__55); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "mbd/ChRigidBody.pyx":794
 *             Aij[2, 3:] *= self.thisptr.free_x.z()
 *             Aij[3, :3] *= self.thisptr.free_r.x()
 *             Aij[3, 4:] *= self.thisptr.free_r.x()             # <<<<<<<<<<<<<<
 *             Aij[4, :4] *= self.thisptr.free_r.y()
 *             Aij[4, 5] *= self.thisptr.free_r.y()
 */
  __pyx_slice__57 = PySlice_New(__pyx_int_4, Py_None, Py_None); if (unlikely(!__pyx_slice__57)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__57);
  __Pyx_GIVEREF(__pyx_slice__57);
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_int_3, __pyx_slice__57); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "mbd/ChRigidBody.pyx":795
 *             Aij[3, :3] *= self.thisptr.free_r.x()
 *             Aij[3, 4:] *= self.thisptr.free_r.x()
 *             Aij[4, :4] *= self.thisptr.free_r.y()             # <<<<<<<<<<<<<<
 *             Aij[4, 5] *= self.thisptr.free_r.y()
 *             Aij[5, :5] *= self.thisptr.free_r.z()
 */
  __pyx_slice__59 = PySlice_New(Py_None, __pyx_int_4, Py_None); if (unlikely(!__pyx_slice__59)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__59);
  __Pyx_GIVEREF(__pyx_slice__59);
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_int_4, __pyx_slice__59); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "mbd/ChRigidBody.pyx":796
 *             Aij[3, 4:] *= self.thisptr.free_r.x()
 *             Aij[4, :4] *= self.thisptr.free_r.y()
 *             Aij[4, 5] *= self.thisptr.free_r.y()             # <<<<<<<<<<<<<<
 *             Aij[5, :5] *= self.thisptr.free_r.z()
 *             self.setAddedMass(Aij)
 */
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_int_4, __pyx_int_5); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "mbd/ChRigidBody.pyx":797
 *             Aij[4, :4] *= self.thisptr.free_r.y()
 *             Aij[4, 5] *= self.thisptr.free_r.y()
 *             Aij[5, :5] *= self.thisptr.free_r.z()             # <<<<<<<<<<<<<<
 *             self.setAddedMass(Aij)
 *             aa = np.zeros(6)
 */
  __pyx_slice__62 = PySlice_New(Py_None, __pyx_int_5, Py_None); if (unlikely(!__pyx_slice__62)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__62);
  __Pyx_GIVEREF(__pyx_slice__62);
  __pyx_tuple__63 = PyTuple_Pack(2, __pyx_int_5, __pyx_slice__62); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "mbd/ChRigidBody.pyx":799
 *             Aij[5, :5] *= self.thisptr.free_r.z()
 *             self.setAddedMass(Aij)
 *             aa = np.zeros(6)             # <<<<<<<<<<<<<<
 *             aa[:3] = self.acceleration
 *             aa[3:] = self.ang_acceleration
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_int_6); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "mbd/ChRigidBody.pyx":800
 *             self.setAddedMass(Aij)
 *             aa = np.zeros(6)
 *             aa[:3] = self.acceleration             # <<<<<<<<<<<<<<
 *             aa[3:] = self.ang_acceleration
 *             Aija = np.dot(Aij, aa)
 */
  __pyx_slice__65 = PySlice_New(Py_None, __pyx_int_3, Py_None); if (unlikely(!__pyx_slice__65)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__65);
  __Pyx_GIVEREF(__pyx_slice__65);

  /* "mbd/ChRigidBody.pyx":801
 *             aa = np.zeros(6)
 *             aa[:3] = self.acceleration
 *             aa[3:] = self.ang_acceleration             # <<<<<<<<<<<<<<
 *             Aija = np.dot(Aij, aa)
 *         if self.ProtChSystem.model is not None:
 */
  __pyx_slice__66 = PySlice_New(__pyx_int_3, Py_None, Py_None); if (unlikely(!__pyx_slice__66)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__66);
  __Pyx_GIVEREF(__pyx_slice__66);

  /* "mbd/ChRigidBody.pyx":810
 *                 self.M_prot *= self.width_2D
 *             if self.applyAddedMass is True:
 *                 self.F_Aij = Aija[:3]             # <<<<<<<<<<<<<<
 *                 self.M_Aij = Aija[3:]
 *                 self.F_prot += self.F_Aij
 */
  __pyx_slice__67 = PySlice_New(Py_None, __pyx_int_3, Py_None); if (unlikely(!__pyx_slice__67)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__67);
  __Pyx_GIVEREF(__pyx_slice__67);

  /* "mbd/ChRigidBody.pyx":811
 *             if self.applyAddedMass is True:
 *                 self.F_Aij = Aija[:3]
 *                 self.M_Aij = Aija[3:]             # <<<<<<<<<<<<<<
 *                 self.F_prot += self.F_Aij
 *                 self.M_prot += self.M_Aij
 */
  __pyx_slice__68 = PySlice_New(__pyx_int_3, Py_None, Py_None); if (unlikely(!__pyx_slice__68)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__68);
  __Pyx_GIVEREF(__pyx_slice__68);

  /* "mbd/ChRigidBody.pyx":978
 *             self.barycenter0 = self.ChBody.GetPos()
 *         # get the initial values for F and M
 *         cdef np.ndarray zeros = np.zeros(3)             # <<<<<<<<<<<<<<
 *         self.setExternalForces(zeros, zeros)
 *         self.thisptr.poststep()
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "mbd/ChRigidBody.pyx":985
 *         self.storeValues()
 *         # set mass matrix with no added mass
 *         self.setAddedMass(np.zeros((6,6)))             # <<<<<<<<<<<<<<
 *         # self.thisptr.setRotation(<double*> self.rotation_init.data)
 *         #
 */
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_int_6, __pyx_int_6); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_tuple__70); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "mbd/ChRigidBody.pyx":1310
 *             for key in self.record_dict:
 *                 headers += [key]
 *             with open(record_file+'.csv', 'w') as csvfile:             # <<<<<<<<<<<<<<
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(headers)
 */
  __pyx_tuple__79 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "mbd/ChRigidBody.pyx":1318
 *             else:
 *                 values_towrite += [getattr(self, val[0])]
 *         with open(record_file+'.csv', 'a') as csvfile:             # <<<<<<<<<<<<<<
 *             writer = csv.writer(csvfile, delimiter=',')
 *             writer.writerow(values_towrite)
 */
  __pyx_tuple__80 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "mbd/ChRigidBody.pyx":1328
 *                     for j in range(6):
 *                         headers += ['A'+str(i)+str(j)]
 *                 with open(record_file+'_Aij.csv', 'w') as csvfile:             # <<<<<<<<<<<<<<
 *                     writer = csv.writer(csvfile, delimiter=',')
 *                     writer.writerow(headers)
 */
  __pyx_tuple__81 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "mbd/ChRigidBody.pyx":1335
 *                 for j in range(6):
 *                     values_towrite += [self.Aij[i, j]]
 *             with open(record_file+'_Aij.csv', 'a') as csvfile:             # <<<<<<<<<<<<<<
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(values_towrite)
 */
  __pyx_tuple__82 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "mbd/ChRigidBody.pyx":1432
 *         self.proteus_dt = 0.
 *         self.first_step = True  # just to know if first step
 *         self.setCouplingScheme("CSS")             # <<<<<<<<<<<<<<
 *         self.dt_fluid = 0
 *         self.dt_fluid_next = 0
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_n_s_CSS); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "mbd/ChRigidBody.pyx":1546
 *             self.t = t = self.thisptr.system.GetChTime()
 *         else:
 *             sys.exit('no time step set')             # <<<<<<<<<<<<<<
 *         if self.model is not None:
 *             if self.build_kdtree is True and self.dist_search is False:
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_kp_s_no_time_step_set); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "mbd/ChRigidBody.pyx":1549
 *         if self.model is not None:
 *             if self.build_kdtree is True and self.dist_search is False:
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup")             # <<<<<<<<<<<<<<
 *                 self.nodes_kdtree = spatial.cKDTree(self.model.levelModelList[-1].mesh.nodeArray)
 *         if t >= self.next_sample:
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_kp_s_Building_k_d_tree_for_mooring_no); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "mbd/ChRigidBody.pyx":1555
 *             self.next_sample += self.sampleRate
 *         import time
 *         Profiling.logEvent("Chrono prestep")             # <<<<<<<<<<<<<<
 *         for s in self.subcomponents:
 *             s.prestep()
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_kp_s_Chrono_prestep); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "mbd/ChRigidBody.pyx":1559
 *             s.prestep()
 *         self.step(self.proteus_dt)
 *         Profiling.logEvent("Chrono poststep")             # <<<<<<<<<<<<<<
 *         for s in self.subcomponents:
 *             s.poststep()
 */
  __pyx_tuple__89 = PyTuple_Pack(1, __pyx_kp_s_Chrono_poststep); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);

  /* "mbd/ChRigidBody.pyx":1583
 *             self.model_mesh = self.model.levelModelList[-1].mesh
 *             if self.build_kdtree is True:
 *                 Profiling.logEvent("Building k-d tree for mooring nodes lookup on first time step")             # <<<<<<<<<<<<<<
 *                 self.u = self.model.levelModelList[-1].u
 *                 # finite element space (! linear for p, quadratic for velocity)
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_kp_s_Building_k_d_tree_for_mooring_no_2); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 1583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "mbd/ChRigidBody.pyx":2076
 *         dset[...] = datav
 *         dset = f.create_dataset('sx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('sy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 */
  __pyx_slice__93 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__93)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__93);
  __Pyx_GIVEREF(__pyx_slice__93);
  __pyx_tuple__94 = PyTuple_Pack(2, __pyx_slice__93, __pyx_int_0); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "mbd/ChRigidBody.pyx":2078
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('sy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('sz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]
 */
  __pyx_slice__95 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__95)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__95);
  __Pyx_GIVEREF(__pyx_slice__95);
  __pyx_tuple__96 = PyTuple_Pack(2, __pyx_slice__95, __pyx_int_1); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "mbd/ChRigidBody.pyx":2080
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('sz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]             # <<<<<<<<<<<<<<
 *         # velocity
 *         datav = self.getNodesVelocity()
 */
  __pyx_slice__97 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__97)) __PYX_ERR(0, 2080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__97);
  __Pyx_GIVEREF(__pyx_slice__97);
  __pyx_tuple__98 = PyTuple_Pack(2, __pyx_slice__97, __pyx_int_2); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 2080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "mbd/ChRigidBody.pyx":2086
 *         dset[...] = datav
 *         dset = f.create_dataset('ux_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('uy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 */
  __pyx_slice__99 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__99)) __PYX_ERR(0, 2086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__99);
  __Pyx_GIVEREF(__pyx_slice__99);
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_slice__99, __pyx_int_0); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 2086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "mbd/ChRigidBody.pyx":2088
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('uy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('uz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]
 */
  __pyx_slice__101 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__101)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__101);
  __Pyx_GIVEREF(__pyx_slice__101);
  __pyx_tuple__102 = PyTuple_Pack(2, __pyx_slice__101, __pyx_int_1); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);

  /* "mbd/ChRigidBody.pyx":2090
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('uz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]             # <<<<<<<<<<<<<<
 *         # acceleration
 *         datav = self.getNodesAcceleration()
 */
  __pyx_slice__103 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__103)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__103);
  __Pyx_GIVEREF(__pyx_slice__103);
  __pyx_tuple__104 = PyTuple_Pack(2, __pyx_slice__103, __pyx_int_2); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "mbd/ChRigidBody.pyx":2096
 *         dset[...] = datav
 *         dset = f.create_dataset('ax_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('ay_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 */
  __pyx_slice__105 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__105)) __PYX_ERR(0, 2096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__105);
  __Pyx_GIVEREF(__pyx_slice__105);
  __pyx_tuple__106 = PyTuple_Pack(2, __pyx_slice__105, __pyx_int_0); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 2096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);

  /* "mbd/ChRigidBody.pyx":2098
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('ay_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('az_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]
 */
  __pyx_slice__107 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__107)) __PYX_ERR(0, 2098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__107);
  __Pyx_GIVEREF(__pyx_slice__107);
  __pyx_tuple__108 = PyTuple_Pack(2, __pyx_slice__107, __pyx_int_1); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 2098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "mbd/ChRigidBody.pyx":2100
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('az_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]             # <<<<<<<<<<<<<<
 *         # drag
 *         datav = self.getDragForces()
 */
  __pyx_slice__109 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__109)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__109);
  __Pyx_GIVEREF(__pyx_slice__109);
  __pyx_tuple__110 = PyTuple_Pack(2, __pyx_slice__109, __pyx_int_2); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);

  /* "mbd/ChRigidBody.pyx":2106
 *         dset[...] = datav
 *         dset = f.create_dataset('dragx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('dragy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 */
  __pyx_slice__111 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__111)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__111);
  __Pyx_GIVEREF(__pyx_slice__111);
  __pyx_tuple__112 = PyTuple_Pack(2, __pyx_slice__111, __pyx_int_0); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);

  /* "mbd/ChRigidBody.pyx":2108
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('dragy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('dragz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]
 */
  __pyx_slice__113 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__113)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__113);
  __Pyx_GIVEREF(__pyx_slice__113);
  __pyx_tuple__114 = PyTuple_Pack(2, __pyx_slice__113, __pyx_int_1); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);

  /* "mbd/ChRigidBody.pyx":2110
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('dragz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]             # <<<<<<<<<<<<<<
 *         # addedmass
 *         datav = self.getAddedMassForces()
 */
  __pyx_slice__115 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__115)) __PYX_ERR(0, 2110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__115);
  __Pyx_GIVEREF(__pyx_slice__115);
  __pyx_tuple__116 = PyTuple_Pack(2, __pyx_slice__115, __pyx_int_2); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 2110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "mbd/ChRigidBody.pyx":2116
 *         dset[...] = datav
 *         dset = f.create_dataset('amx_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,0]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('amy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]
 */
  __pyx_slice__117 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__117)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__117);
  __Pyx_GIVEREF(__pyx_slice__117);
  __pyx_tuple__118 = PyTuple_Pack(2, __pyx_slice__117, __pyx_int_0); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);

  /* "mbd/ChRigidBody.pyx":2118
 *         dset[...] = datav[:,0]
 *         dset = f.create_dataset('amy_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,1]             # <<<<<<<<<<<<<<
 *         dset = f.create_dataset('amz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]
 */
  __pyx_slice__119 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__119)) __PYX_ERR(0, 2118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__119);
  __Pyx_GIVEREF(__pyx_slice__119);
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_slice__119, __pyx_int_1); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 2118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "mbd/ChRigidBody.pyx":2120
 *         dset[...] = datav[:,1]
 *         dset = f.create_dataset('amz_t'+str(tCount), (datav.shape[0],))
 *         dset[...] = datav[:,2]             # <<<<<<<<<<<<<<
 * 
 *     def _recordXML(self):
 */
  __pyx_slice__121 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__121)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__121);
  __Pyx_GIVEREF(__pyx_slice__121);
  __pyx_tuple__122 = PyTuple_Pack(2, __pyx_slice__121, __pyx_int_2); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "mbd/ChRigidBody.pyx":2196
 *         tree = ET.ElementTree(root)
 * 
 *         with open(xmlFile, "w") as f:             # <<<<<<<<<<<<<<
 *             xmlHeader = "<?xml version=\"1.0\" ?>\n<!DOCTYPE Xdmf SYSTEM \"Xdmf.dtd\" []>\n"
 *             f.write(xmlHeader)
 */
  __pyx_tuple__123 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 2196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "mbd/ChRigidBody.pyx":2207
 *         self.record_file = os.path.join(Profiling.logDir, self.name)
 *         def record(record_file, row, mode='a'):
 *             with open(record_file, mode) as csvfile:             # <<<<<<<<<<<<<<
 *                 writer = csv.writer(csvfile, delimiter=',')
 *                 writer.writerow(row)
 */
  __pyx_tuple__124 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 2207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "mbd/ChRigidBody.pyx":2206
 *         """
 *         self.record_file = os.path.join(Profiling.logDir, self.name)
 *         def record(record_file, row, mode='a'):             # <<<<<<<<<<<<<<
 *             with open(record_file, mode) as csvfile:
 *                 writer = csv.writer(csvfile, delimiter=',')
 */
  __pyx_tuple__125 = PyTuple_Pack(5, __pyx_n_s_record_file, __pyx_n_s_row, __pyx_n_s_mode, __pyx_n_s_csvfile, __pyx_n_s_writer); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_p_home_jcollins_proteus_proteus, __pyx_n_s_record_2, 2206, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __pyx_tuple__127 = PyTuple_Pack(1, ((PyObject*)__pyx_n_s_a)); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);

  /* "mbd/ChRigidBody.pyx":2237
 *             record(self.record_file+file_name, header_x, 'w')
 *         positions = self.getNodesPosition()
 *         row = (positions.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Velocity
 */
  __pyx_tuple__128 = PyTuple_Pack(1, __pyx_n_s_C); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 2237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);

  /* "mbd/ChRigidBody.pyx":2244
 *             record(self.record_file+file_name, header_x, 'w')
 *         velocities = self.getNodesVelocity()
 *         row = (velocities.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Acceleration
 */
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_n_s_C); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(0, 2244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "mbd/ChRigidBody.pyx":2251
 *             record(self.record_file+file_name, header_x, 'w')
 *         accelerations = self.getNodesAcceleration()
 *         row = (accelerations.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Fairlead / anchor tensions
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_n_s_C); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 2251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "mbd/ChRigidBody.pyx":2269
 *                 record(self.record_file+file_name, header_x[:-3], 'w')
 *             tensions = self.getNodesTension(eta=eta)
 *             row = (tensions.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *             record(self.record_file+file_name, row)
 *         # Drag
 */
  __pyx_tuple__131 = PyTuple_Pack(1, __pyx_n_s_C); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(0, 2269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);

  /* "mbd/ChRigidBody.pyx":2276
 *             record(self.record_file+file_name, header_x, 'w')
 *         forces = self.getDragForces()
 *         row = (forces.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Added mass
 */
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_n_s_C); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 2276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);

  /* "mbd/ChRigidBody.pyx":2283
 *             record(self.record_file+file_name, header_x, 'w')
 *         forces = self.getAddedMassForces()
 *         row = (forces.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Fluid Velocity
 */
  __pyx_tuple__133 = PyTuple_Pack(1, __pyx_n_s_C); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(0, 2283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "mbd/ChRigidBody.pyx":2290
 *             record(self.record_file+file_name, header_x, 'w')
 *         velocities = self.fluid_velocity_array
 *         row = (velocities.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 *         # Fluid Acceleration
 */
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_n_s_C); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 2290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);

  /* "mbd/ChRigidBody.pyx":2297
 *             record(self.record_file+file_name, header_x, 'w')
 *         accelerations = self.fluid_acceleration_array
 *         row = (accelerations.flatten('C')).tolist()             # <<<<<<<<<<<<<<
 *         record(self.record_file+file_name, row)
 * 
 */
  __pyx_tuple__135 = PyTuple_Pack(1, __pyx_n_s_C); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(0, 2297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "mbd/ChRigidBody.pyx":2309
 *             return pych.ChVector_to_npArray(T)
 *         else:
 *             return np.zeros(3)             # <<<<<<<<<<<<<<
 * 
 *     def getTensionFront(self):
 */
  __pyx_tuple__136 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 2309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);

  /* "mbd/ChRigidBody.pyx":2320
 *             return pych.ChVector_to_npArray(T)
 *         else:
 *             return np.zeros(3)             # <<<<<<<<<<<<<<
 * 
 *     def calculate_init(self):
 */
  __pyx_tuple__137 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(0, 2320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);

  /* "mbd/ChRigidBody.pyx":2676
 *         # get velocity at nodes
 *         # cdef np.ndarray fluid_velocity = np.zeros((len(self.thisptr.nodes.size()), 3))
 *         self.fluid_velocity_array_previous[:] = self.fluid_velocity_array             # <<<<<<<<<<<<<<
 *         if fluid_velocity_array is not None:
 *             self.fluid_velocity_array = fluid_velocity_array
 */
  __pyx_slice__139 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__139)) __PYX_ERR(0, 2676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__139);
  __Pyx_GIVEREF(__pyx_slice__139);

  /* "mbd/ChRigidBody.pyx":2699
 *             mesh_search = True
 *             if self.ProtChSystem.dist_search is True and self.ProtChSystem.first_step is False:
 *                 Profiling.logEvent("Starting distance search for cable nodes")             # <<<<<<<<<<<<<<
 *                 dist_search = True
 *             else:
 */
  __pyx_tuple__140 = PyTuple_Pack(1, __pyx_kp_s_Starting_distance_search_for_cab); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 2699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);

  /* "mbd/ChRigidBody.pyx":2702
 *                 dist_search = True
 *             else:
 *                 Profiling.logEvent("Starting k-d tree search for cable nodes")             # <<<<<<<<<<<<<<
 *         for i in range(nb_nodes):
 *             if self.beam_type == "BeamEuler":
 */
  __pyx_tuple__141 = PyTuple_Pack(1, __pyx_kp_s_Starting_k_d_tree_search_for_cab); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(0, 2702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);

  /* "mbd/ChRigidBody.pyx":2716
 *                 z = comm.bcast(z, self.ProtChSystem.chrono_processor)
 *             coords = np.array([x, y, z])
 *             vel_arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *             if mesh_search is True:
 *                 vel_grad_arr = np.zeros(3)
 */
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 2716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);

  /* "mbd/ChRigidBody.pyx":2718
 *             vel_arr = np.zeros(3)
 *             if mesh_search is True:
 *                 vel_grad_arr = np.zeros(3)             # <<<<<<<<<<<<<<
 *                 if dist_search is True:
 *                     xi, nearest_node, el, rank = self.ProtChSystem.findElementContainingCoordsDist(coords=coords[:self.nd],
 */
  __pyx_tuple__143 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(0, 2718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);

  /* "mbd/ChRigidBody.pyx":2733
 *                 comm.barrier()
 *                 if rank is not None and xi is not None:
 *                     vel_arr[:] = self.ProtChSystem.getFluidVelocityLocalCoords(xi, el, rank)             # <<<<<<<<<<<<<<
 *                 else:  # means node is outside domain
 *                     if self.fluid_velocity_function is not None:
 */
  __pyx_slice__144 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__144)) __PYX_ERR(0, 2733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__144);
  __Pyx_GIVEREF(__pyx_slice__144);

  /* "mbd/ChRigidBody.pyx":2736
 *                 else:  # means node is outside domain
 *                     if self.fluid_velocity_function is not None:
 *                         vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)             # <<<<<<<<<<<<<<
 *                     else:
 *                         vel_arr[:] = 0.
 */
  __pyx_slice__145 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__145)) __PYX_ERR(0, 2736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__145);
  __Pyx_GIVEREF(__pyx_slice__145);

  /* "mbd/ChRigidBody.pyx":2738
 *                         vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                     else:
 *                         vel_arr[:] = 0.             # <<<<<<<<<<<<<<
 *                 comm.barrier()
 *             else:
 */
  __pyx_slice__146 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__146)) __PYX_ERR(0, 2738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__146);
  __Pyx_GIVEREF(__pyx_slice__146);

  /* "mbd/ChRigidBody.pyx":2742
 *             else:
 *                 if self.fluid_velocity_function is not None:
 *                     vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)             # <<<<<<<<<<<<<<
 *                 else:
 *                     vel_arr[:] = 0
 */
  __pyx_slice__147 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__147)) __PYX_ERR(0, 2742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__147);
  __Pyx_GIVEREF(__pyx_slice__147);

  /* "mbd/ChRigidBody.pyx":2744
 *                     vel_arr[:] = self.fluid_velocity_function(coords, self.ProtChSystem.t)
 *                 else:
 *                     vel_arr[:] = 0             # <<<<<<<<<<<<<<
 *             self.fluid_velocity_array[i] = vel_arr
 *             vel = ch.ChVector[double](vel_arr[0], vel_arr[1], vel_arr[2])
 */
  __pyx_slice__148 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__148)) __PYX_ERR(0, 2744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__148);
  __Pyx_GIVEREF(__pyx_slice__148);

  /* "mbd/ChRigidBody.pyx":2763
 *             dens = self.fluid_density_array[i]
 *             fluid_density.push_back(dens)
 *         Profiling.logEvent("Finished search for cable nodes")             # <<<<<<<<<<<<<<
 *         self.thisptr.setFluidAccelerationAtNodes(fluid_acceleration)
 *         self.thisptr.setFluidVelocityAtNodes(fluid_velocity)
 */
  __pyx_tuple__149 = PyTuple_Pack(1, __pyx_kp_s_Finished_search_for_cable_nodes); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(0, 2763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__150 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__151 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(1, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__152 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(1, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__154 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__155 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__156 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(1, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__157 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);

  /* "excalibur.gnu/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__158 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(1, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);

  /* "View.MemoryView":131
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__159 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(2, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);

  /* "View.MemoryView":134
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__160 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);

  /* "View.MemoryView":137
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
  __pyx_tuple__161 = PyTuple_Pack(1, __pyx_n_s_ASCII); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(2, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);

  /* "View.MemoryView":146
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__162 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(2, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);

  /* "View.MemoryView":174
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__163 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(2, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);

  /* "View.MemoryView":190
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__164 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(2, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);

  /* "View.MemoryView":484
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__165 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(2, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);

  /* "View.MemoryView":556
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__166 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(2, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);

  /* "View.MemoryView":563
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__167 = PyTuple_New(1); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(2, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__167, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__167);

  /* "View.MemoryView":668
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__168 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__168)) __PYX_ERR(2, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__168);
  __Pyx_GIVEREF(__pyx_slice__168);

  /* "View.MemoryView":671
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
  __pyx_slice__169 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__169)) __PYX_ERR(2, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__169);
  __Pyx_GIVEREF(__pyx_slice__169);

  /* "View.MemoryView":682
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
  __pyx_slice__170 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__170)) __PYX_ERR(2, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__170);
  __Pyx_GIVEREF(__pyx_slice__170);

  /* "View.MemoryView":689
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__171 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(2, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);

  /* "mbd/ChRigidBody.pyx":2806
 * 
 * 
 * def getLocalNearestNode(coords, kdtree):             # <<<<<<<<<<<<<<
 *     """Finds nearest node to coordinates (local)
 *     Parameters
 */
  __pyx_tuple__173 = PyTuple_Pack(4, __pyx_n_s_coords, __pyx_n_s_kdtree, __pyx_n_s_distance, __pyx_n_s_node); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 2806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  __pyx_codeobj__174 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__173, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_p_home_jcollins_proteus_proteus, __pyx_n_s_getLocalNearestNode, 2806, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__174)) __PYX_ERR(0, 2806, __pyx_L1_error)

  /* "mbd/ChRigidBody.pyx":2884
 * 
 * 
 * def getLocalElement(femSpace, coords, node):             # <<<<<<<<<<<<<<
 *     """Given coordinates and its nearest node, determine if it is on a
 *     local element.
 */
  __pyx_tuple__175 = PyTuple_Pack(8, __pyx_n_s_femSpace, __pyx_n_s_coords, __pyx_n_s_node, __pyx_n_s_patchBoundaryNodes, __pyx_n_s_checkedElements, __pyx_n_s_eOffset, __pyx_n_s_eN, __pyx_n_s_xi); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 2884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  __pyx_codeobj__176 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__175, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_p_home_jcollins_proteus_proteus, __pyx_n_s_getLocalElement, 2884, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__176)) __PYX_ERR(0, 2884, __pyx_L1_error)

  /* "View.MemoryView":282
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__177 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(2, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);

  /* "View.MemoryView":283
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__178 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__178)) __PYX_ERR(2, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);

  /* "View.MemoryView":284
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__179 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(2, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);

  /* "View.MemoryView":287
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__180 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);

  /* "View.MemoryView":288
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__181 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_ = PyFloat_FromDouble(2.); if (unlikely(!__pyx_float_2_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initChRigidBody(void); /*proto*/
PyMODINIT_FUNC initChRigidBody(void)
#else
PyMODINIT_FUNC PyInit_ChRigidBody(void); /*proto*/
PyMODINIT_FUNC PyInit_ChRigidBody(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::string __pyx_t_5;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  static PyThread_type_lock __pyx_t_7[8];
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_ChRigidBody(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ChRigidBody", __pyx_methods, __pyx_k_Coupling_between_Chrono_and_Pro, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_mbd__ChRigidBody) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "mbd.ChRigidBody")) {
      if (unlikely(PyDict_SetItemString(modules, "mbd.ChRigidBody", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_3mbd_11ChRigidBody_ProtChBody = &__pyx_vtable_3mbd_11ChRigidBody_ProtChBody;
  __pyx_vtable_3mbd_11ChRigidBody_ProtChBody.callPrescribedMotion = (PyArrayObject *(*)(struct __pyx_obj_3mbd_11ChRigidBody_ProtChBody *, double))__pyx_f_3mbd_11ChRigidBody_10ProtChBody_callPrescribedMotion;
  if (PyType_Ready(&__pyx_type_3mbd_11ChRigidBody_ProtChBody) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_type_3mbd_11ChRigidBody_ProtChBody.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_3mbd_11ChRigidBody_ProtChBody.tp_dict, __pyx_vtabptr_3mbd_11ChRigidBody_ProtChBody) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "ProtChBody", (PyObject *)&__pyx_type_3mbd_11ChRigidBody_ProtChBody) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_ptype_3mbd_11ChRigidBody_ProtChBody = &__pyx_type_3mbd_11ChRigidBody_ProtChBody;
  if (PyType_Ready(&__pyx_type_3mbd_11ChRigidBody_ProtChSystem) < 0) __PYX_ERR(0, 1372, __pyx_L1_error)
  __pyx_type_3mbd_11ChRigidBody_ProtChSystem.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "ProtChSystem", (PyObject *)&__pyx_type_3mbd_11ChRigidBody_ProtChSystem) < 0) __PYX_ERR(0, 1372, __pyx_L1_error)
  __pyx_ptype_3mbd_11ChRigidBody_ProtChSystem = &__pyx_type_3mbd_11ChRigidBody_ProtChSystem;
  if (PyType_Ready(&__pyx_type_3mbd_11ChRigidBody_Mesh) < 0) __PYX_ERR(0, 1901, __pyx_L1_error)
  __pyx_type_3mbd_11ChRigidBody_Mesh.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Mesh", (PyObject *)&__pyx_type_3mbd_11ChRigidBody_Mesh) < 0) __PYX_ERR(0, 1901, __pyx_L1_error)
  __pyx_ptype_3mbd_11ChRigidBody_Mesh = &__pyx_type_3mbd_11ChRigidBody_Mesh;
  if (PyType_Ready(&__pyx_type_3mbd_11ChRigidBody_SurfaceBoxNodesCloud) < 0) __PYX_ERR(0, 1909, __pyx_L1_error)
  __pyx_type_3mbd_11ChRigidBody_SurfaceBoxNodesCloud.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "SurfaceBoxNodesCloud", (PyObject *)&__pyx_type_3mbd_11ChRigidBody_SurfaceBoxNodesCloud) < 0) __PYX_ERR(0, 1909, __pyx_L1_error)
  __pyx_ptype_3mbd_11ChRigidBody_SurfaceBoxNodesCloud = &__pyx_type_3mbd_11ChRigidBody_SurfaceBoxNodesCloud;
  if (PyType_Ready(&__pyx_type_3mbd_11ChRigidBody_ProtChMoorings) < 0) __PYX_ERR(0, 1942, __pyx_L1_error)
  __pyx_type_3mbd_11ChRigidBody_ProtChMoorings.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "ProtChMoorings", (PyObject *)&__pyx_type_3mbd_11ChRigidBody_ProtChMoorings) < 0) __PYX_ERR(0, 1942, __pyx_L1_error)
  __pyx_ptype_3mbd_11ChRigidBody_ProtChMoorings = &__pyx_type_3mbd_11ChRigidBody_ProtChMoorings;
  if (PyType_Ready(&__pyx_type_3mbd_11ChRigidBody_ProtChAddedMass) < 0) __PYX_ERR(0, 2945, __pyx_L1_error)
  __pyx_type_3mbd_11ChRigidBody_ProtChAddedMass.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "ProtChAddedMass", (PyObject *)&__pyx_type_3mbd_11ChRigidBody_ProtChAddedMass) < 0) __PYX_ERR(0, 2945, __pyx_L1_error)
  __pyx_ptype_3mbd_11ChRigidBody_ProtChAddedMass = &__pyx_type_3mbd_11ChRigidBody_ProtChAddedMass;
  if (PyType_Ready(&__pyx_type_3mbd_11ChRigidBody___pyx_scope_struct____cinit__) < 0) __PYX_ERR(0, 2000, __pyx_L1_error)
  __pyx_type_3mbd_11ChRigidBody___pyx_scope_struct____cinit__.tp_print = 0;
  __pyx_ptype_3mbd_11ChRigidBody___pyx_scope_struct____cinit__ = &__pyx_type_3mbd_11ChRigidBody___pyx_scope_struct____cinit__;
  if (PyType_Ready(&__pyx_type_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 2010, __pyx_L1_error)
  __pyx_type_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr = &__pyx_type_3mbd_11ChRigidBody___pyx_scope_struct_1_genexpr;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(2, 103, __pyx_L1_error)
  __pyx_type___pyx_array.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(2, 103, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(2, 275, __pyx_L1_error)
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(2, 326, __pyx_L1_error)
  __pyx_type___pyx_memoryview.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(2, 326, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(2, 951, __pyx_L1_error)
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(2, 951, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 861, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChVector = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChVector", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChVector), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChVector)) __PYX_ERR(4, 10, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChVector = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChVector*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChVector->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChVector)) __PYX_ERR(4, 10, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChQuaternion = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChQuaternion", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChQuaternion), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChQuaternion)) __PYX_ERR(4, 16, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChQuaternion = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChQuaternion*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChQuaternion->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChQuaternion)) __PYX_ERR(4, 16, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChCoordsys = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChCoordsys", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChCoordsys), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChCoordsys)) __PYX_ERR(4, 23, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChCoordsys = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChCoordsys*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChCoordsys->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChCoordsys)) __PYX_ERR(4, 23, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChFrame = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChFrame", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrame), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChFrame)) __PYX_ERR(4, 28, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChFrame = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChFrame*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChFrame->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChFrame)) __PYX_ERR(4, 28, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChFrameMoving = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChFrameMoving", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChFrameMoving), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChFrameMoving)) __PYX_ERR(4, 38, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChFrameMoving = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChFrameMoving*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChFrameMoving->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChFrameMoving)) __PYX_ERR(4, 38, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyFrame = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChBodyFrame", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyFrame), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyFrame)) __PYX_ERR(4, 47, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBodyFrame = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyFrame*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyFrame->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBodyFrame)) __PYX_ERR(4, 47, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBody = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChBody", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBody), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBody)) __PYX_ERR(4, 50, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBody = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBody*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBody->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBody)) __PYX_ERR(4, 50, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChBodyEasyBox", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox)) __PYX_ERR(4, 60, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBodyEasyBox)) __PYX_ERR(4, 60, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChMaterialSurfaceSMC", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC)) __PYX_ERR(4, 63, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChMaterialSurfaceSMC)) __PYX_ERR(4, 63, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChContactSurfaceNodeCloud", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud)) __PYX_ERR(4, 90, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChContactSurfaceNodeCloud)) __PYX_ERR(4, 90, __pyx_L1_error)
  __pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass = __Pyx_ImportType("proteus.mbd.pyChronoCore", "ChBodyAddedMass", sizeof(struct __pyx_obj_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass), 1); if (unlikely(!__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass)) __PYX_ERR(4, 109, __pyx_L1_error)
  __pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass = (struct __pyx_vtabstruct_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass*)__Pyx_GetVtable(__pyx_ptype_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass->tp_dict); if (unlikely(!__pyx_vtabptr_7proteus_3mbd_12pyChronoCore_ChBodyAddedMass)) __PYX_ERR(4, 109, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("proteus.mbd.pyChronoCore"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "ChVector_to_npArray", (void (**)(void))&__pyx_f_7proteus_3mbd_12pyChronoCore_ChVector_to_npArray, "PyArrayObject *(ChVector<double>  &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "mbd/ChRigidBody.pyx":19
 * 
 * 
 * import os             # <<<<<<<<<<<<<<
 * import sys
 * import csv
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":20
 * 
 * import os
 * import sys             # <<<<<<<<<<<<<<
 * import csv
 * import copy
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":21
 * import os
 * import sys
 * import csv             # <<<<<<<<<<<<<<
 * import copy
 * cimport numpy as np
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_csv_2, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_csv_2, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":22
 * import sys
 * import csv
 * import copy             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * import numpy as np
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_copy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy, __pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":24
 * import copy
 * cimport numpy as np
 * import numpy as np             # <<<<<<<<<<<<<<
 * from mpi4py import MPI
 * from scipy import spatial
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":25
 * cimport numpy as np
 * import numpy as np
 * from mpi4py import MPI             # <<<<<<<<<<<<<<
 * from scipy import spatial
 * from proteus import AuxiliaryVariables, Archiver, Comm, Profiling
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_MPI);
  __Pyx_GIVEREF(__pyx_n_s_MPI);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_MPI);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_mpi4py, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_MPI); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MPI, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":26
 * import numpy as np
 * from mpi4py import MPI
 * from scipy import spatial             # <<<<<<<<<<<<<<
 * from proteus import AuxiliaryVariables, Archiver, Comm, Profiling
 * from proteus import SpatialTools as st
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_spatial);
  __Pyx_GIVEREF(__pyx_n_s_spatial);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_spatial);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_spatial); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_spatial, __pyx_t_3) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":27
 * from mpi4py import MPI
 * from scipy import spatial
 * from proteus import AuxiliaryVariables, Archiver, Comm, Profiling             # <<<<<<<<<<<<<<
 * from proteus import SpatialTools as st
 * from libcpp.string cimport string
 */
  __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_AuxiliaryVariables);
  __Pyx_GIVEREF(__pyx_n_s_AuxiliaryVariables);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_AuxiliaryVariables);
  __Pyx_INCREF(__pyx_n_s_Archiver);
  __Pyx_GIVEREF(__pyx_n_s_Archiver);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Archiver);
  __Pyx_INCREF(__pyx_n_s_Comm);
  __Pyx_GIVEREF(__pyx_n_s_Comm);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_Comm);
  __Pyx_INCREF(__pyx_n_s_Profiling);
  __Pyx_GIVEREF(__pyx_n_s_Profiling);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_Profiling);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_proteus, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_AuxiliaryVariables); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AuxiliaryVariables, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Archiver); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Archiver, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Comm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Comm, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Profiling); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Profiling, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":28
 * from scipy import spatial
 * from proteus import AuxiliaryVariables, Archiver, Comm, Profiling
 * from proteus import SpatialTools as st             # <<<<<<<<<<<<<<
 * from libcpp.string cimport string
 * from libcpp.vector cimport vector
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_SpatialTools);
  __Pyx_GIVEREF(__pyx_n_s_SpatialTools);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_SpatialTools);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_proteus, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_SpatialTools); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_st, __pyx_t_3) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":34
 * from libcpp.memory cimport (shared_ptr,
 *                             make_shared)
 * from collections import OrderedDict             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref
 * import xml.etree.ElementTree as ET
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_OrderedDict);
  __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_OrderedDict);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_2) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":36
 * from collections import OrderedDict
 * from cython.operator cimport dereference as deref
 * import xml.etree.ElementTree as ET             # <<<<<<<<<<<<<<
 * import h5py
 * # chrono C++ headers
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s__172);
  __Pyx_GIVEREF(__pyx_n_s__172);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s__172);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_xml_etree_ElementTree, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ET, __pyx_t_2) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":37
 * from cython.operator cimport dereference as deref
 * import xml.etree.ElementTree as ET
 * import h5py             # <<<<<<<<<<<<<<
 * # chrono C++ headers
 * cimport ChronoHeaders as ch
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_h5py, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h5py, __pyx_t_2) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":42
 * # chrono Python headers
 * from proteus.mbd cimport pyChronoCore as pych
 * from proteus.mprans import BodyDynamics as bd             # <<<<<<<<<<<<<<
 * from proteus.Archiver import indentXML
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_BodyDynamics);
  __Pyx_GIVEREF(__pyx_n_s_BodyDynamics);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_BodyDynamics);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_proteus_mprans, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_BodyDynamics); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bd, __pyx_t_2) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mbd/ChRigidBody.pyx":43
 * from proteus.mbd cimport pyChronoCore as pych
 * from proteus.mprans import BodyDynamics as bd
 * from proteus.Archiver import indentXML             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_indentXML);
  __Pyx_GIVEREF(__pyx_n_s_indentXML);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_indentXML);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_proteus_Archiver, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_indentXML); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indentXML, __pyx_t_3) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":992
 *         pass
 * 
 *     def setPrescribedMotionCustom(self, double[:] t, double[:] x=None,             # <<<<<<<<<<<<<<
 *                                   double[:] y=None, double[:] z=None,
 *                                   double[:] ang=None, double[:] ang2=None,
 */
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(Py_None);
  if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 992, __pyx_L1_error)
  __pyx_k__72 = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "mbd/ChRigidBody.pyx":993
 * 
 *     def setPrescribedMotionCustom(self, double[:] t, double[:] x=None,
 *                                   double[:] y=None, double[:] z=None,             # <<<<<<<<<<<<<<
 *                                   double[:] ang=None, double[:] ang2=None,
 *                                   double[:] ang3=None, double t_max=0):
 */
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(Py_None);
  if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 993, __pyx_L1_error)
  __pyx_k__73 = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(Py_None);
  if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 993, __pyx_L1_error)
  __pyx_k__74 = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "mbd/ChRigidBody.pyx":994
 *     def setPrescribedMotionCustom(self, double[:] t, double[:] x=None,
 *                                   double[:] y=None, double[:] z=None,
 *                                   double[:] ang=None, double[:] ang2=None,             # <<<<<<<<<<<<<<
 *                                   double[:] ang3=None, double t_max=0):
 *         """Sets custom prescribed motion for body.
 */
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(Py_None);
  if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 994, __pyx_L1_error)
  __pyx_k__75 = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(Py_None);
  if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 994, __pyx_L1_error)
  __pyx_k__76 = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "mbd/ChRigidBody.pyx":995
 *                                   double[:] y=None, double[:] z=None,
 *                                   double[:] ang=None, double[:] ang2=None,
 *                                   double[:] ang3=None, double t_max=0):             # <<<<<<<<<<<<<<
 *         """Sets custom prescribed motion for body.
 *         Parameters must have the same length as the time array t
 */
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(Py_None);
  if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 995, __pyx_L1_error)
  __pyx_k__77 = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "mbd/ChRigidBody.pyx":1458
 *         return time
 * 
 *     def setCouplingScheme(self, string scheme, string prediction='backwardEuler'):             # <<<<<<<<<<<<<<
 *         assert scheme == "CSS" or scheme == "ISS", "Coupling scheme requested unknown"
 *         assert prediction == "backwardEuler" or prediction == "forwardEuler" or prediction == "implicitOrder2", "Prediction requested unknown"
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_backwardEuler); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1458, __pyx_L1_error)
  __pyx_k__84 = __pyx_t_5;

  /* "mbd/ChRigidBody.pyx":2008
 *                   double[:] rho,
 *                   double[:] E,
 *                   string beam_type="CableANCF"):             # <<<<<<<<<<<<<<
 *         check_arrays = [len(length), len(nb_elems), len(d), len(rho), len(E)]
 *         assert all(v == len(length) for v in check_arrays), 'arrays are not of same length'
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_CableANCF); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2008, __pyx_L1_error)
  __pyx_k__92 = __pyx_t_5;

  /* "mbd/ChRigidBody.pyx":2494
 *         deref(self.thisptr.cables[segment_nb]).setAddedMassCoefficients(tangential, normal)
 * 
 *     def setNodesPosition(self, double[:,:,:] positions=None, tangents=None):             # <<<<<<<<<<<<<<
 *         """Builds the nodes of the cable.
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(Py_None);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 2494, __pyx_L1_error)
  __pyx_k__138 = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "mbd/ChRigidBody.pyx":2806
 * 
 * 
 * def getLocalNearestNode(coords, kdtree):             # <<<<<<<<<<<<<<
 *     """Finds nearest node to coordinates (local)
 *     Parameters
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3mbd_11ChRigidBody_1getLocalNearestNode, NULL, __pyx_n_s_mbd_ChRigidBody); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getLocalNearestNode, __pyx_t_2) < 0) __PYX_ERR(0, 2806, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":2884
 * 
 * 
 * def getLocalElement(femSpace, coords, node):             # <<<<<<<<<<<<<<
 *     """Given coordinates and its nearest node, determine if it is on a
 *     local element.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3mbd_11ChRigidBody_3getLocalElement, NULL, __pyx_n_s_mbd_ChRigidBody); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getLocalElement, __pyx_t_2) < 0) __PYX_ERR(0, 2884, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mbd/ChRigidBody.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * """
 * Coupling between Chrono and Proteus is done in this file.
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":207
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":282
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__177, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":283
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__178, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":284
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__179, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":287
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__180, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":288
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__181, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":312
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":313
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_7[0] = PyThread_allocate_lock();
  __pyx_t_7[1] = PyThread_allocate_lock();
  __pyx_t_7[2] = PyThread_allocate_lock();
  __pyx_t_7[3] = PyThread_allocate_lock();
  __pyx_t_7[4] = PyThread_allocate_lock();
  __pyx_t_7[5] = PyThread_allocate_lock();
  __pyx_t_7[6] = PyThread_allocate_lock();
  __pyx_t_7[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_7, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":535
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":981
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 981, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init mbd.ChRigidBody", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mbd.ChRigidBody");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* ExtTypeTest */
      static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetItemInt */
      static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SliceObject */
      static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* BufferFormatCheck */
      static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

/* MemviewSliceInit */
        static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (!buf) {
        PyErr_SetString(PyExc_ValueError,
            "buf is NULL.");
        goto fail;
    } else if (memviewslice->memview || memviewslice->data) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
static CYTHON_INLINE void __pyx_fatalerror(const char *fmt, ...) {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    Py_FatalError(msg);
    va_end(vargs);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview || (PyObject *) memview == Py_None)
        return;
    if (__pyx_get_slice_count(memview) < 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (first_time) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview ) {
        return;
    } else if ((PyObject *) memview == Py_None) {
        memslice->memview = NULL;
        return;
    }
    if (__pyx_get_slice_count(memview) <= 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (last_time) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* RaiseTooManyValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
        static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
        static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* BufferIndexError */
        static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* SliceObject */
        static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* None */
        static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyFloatBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a, result;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyIntBinop */
          #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* SaveResetException */
          #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
          #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrFetchRestore */
            #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectCallMethod0 */
            static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
            static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
            static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
            static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
            static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* GetAttr */
            static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* Import */
            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyIntBinop */
            #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* None */
            static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* FetchCommonType */
            static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
            static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* SliceTupleAndList */
                #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* SetItemInt */
                static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* RaiseException */
                  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyErrExceptionMatches */
                    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* BytesEquals */
                    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
                    static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* None */
                    static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* decode_c_string */
                    static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* SwapException */
                    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* None */
                    static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* WriteUnraisableException */
                    static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* SetVTable */
                    static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
                    static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* ImportFrom */
                    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CodeObjectCache */
                    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


                    /* MemviewSliceIsContig */
                    static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs,
                             char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
                    static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
                    static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* TypeInfoCompare */
                    static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
                    static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (buf->strides[dim] != sizeof(void *)) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (buf->strides[dim] != buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (stride < buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (spec & (__Pyx_MEMVIEW_PTR)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (buf->suboffsets) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (buf->suboffsets && buf->suboffsets[dim] >= 0) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (!buf->suboffsets || (buf->suboffsets && buf->suboffsets[dim] < 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1)
            {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (buf->ndim != ndim) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
    }
    if ((unsigned) buf->itemsize != dtype->size) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    for (i = 0; i < ndim; i++) {
        spec = axes_specs[i];
        if (!__pyx_check_strides(buf, i, ndim, spec))
            goto fail;
        if (!__pyx_check_suboffsets(buf, i, ndim, spec))
            goto fail;
    }
    if (buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
                    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 2,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
                    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 1,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CIntFromPyVerify */
                    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* ObjectToMemviewSlice */
                    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 3,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* Print */
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
                    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* MemviewDtypeToObject */
                    static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(double *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj) {
    double value = __pyx_PyFloat_AsDouble(obj);
    if ((value == (double)-1) && PyErr_Occurred())
        return 0;
    *(double *) itemp = value;
    return 1;
}

/* MemviewDtypeToObject */
                    static CYTHON_INLINE PyObject *__pyx_memview_get_int(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_int(*(int *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_int(const char *itemp, PyObject *obj) {
    int value = __Pyx_PyInt_As_int(obj);
    if ((value == (int)-1) && PyErr_Occurred())
        return 0;
    *(int *) itemp = value;
    return 1;
}

/* Declarations */
                    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
                    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
                    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
                    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
                    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* MemviewSliceCopyTemplate */
                    static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (from_mvs->suboffsets[i] >= 0) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntFromPy */
                    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
                    static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* PrintOne */
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
                    static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* ObjectToMemviewSlice */
                    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 1,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* PyObjectCallMethod1 */
                    static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
                    #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                        static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                        #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                        static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                        #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                        #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FunctionImport */
                        #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
                        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
